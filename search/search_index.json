{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#home","title":"Home","text":"<p>Welcome to the SeAT documentation pages!</p> <p>This site aims to provide you with useful, technical information about SeAT. Please refer to the index on the side for detailed installation instructions, documentation about SeAT internals and/or development guidelines!</p> <p>Contributing to Documentation</p> <p>Great software is coupled with even greater documentation. If you would like to contribute to making this documentation even better, please don't hesitate to fork the documentation repository and submit a pull request with your contribution. We are always looking for better information.</p>"},{"location":"#quick-start","title":"Quick Start","text":"<p>There are many ways to install SeAT. In all cases you will need a dedicated server as a minimum. Using the docker installation you are free to choose any Docker capable host (yes, even Windows!). However, if you choose to install SeAT on bare metal, you'll need a linux distribution. We suggest you choose an LTS version of Ubuntu, Debian or CentOS.</p>"},{"location":"#installation-options","title":"Installation Options","text":"<p>Ignoring the details, to get SeAT installed quickly you have a few options. All of them will get you SeAT installed, but you still have to manually configure an SSO application on the EVE Online Developers Portal.</p> Method Comments Docker Follow our docker installation guide. This is the recommended way to install SeAT as it will handle near everything for you. Manually You can always install SeAT by following our manual installation guide. All you need is PHP, MariaDB, Redis and a web server and some Linux experience. <p>Warning</p> <p>While installing SeAT - choose one method, and stick to it. Otherwise, you'll get SeAT installed multiple times.</p>"},{"location":"#upgrades-updates","title":"Upgrades / Updates","text":"<p>SeAT is being worked on continuously. New features are added, performance improvements are made and bugs are fixed. If you wish to upgrade to the latest version of SeAT refer to the upgrade section.</p>"},{"location":"#contact","title":"Contact","text":"<p>Want to get in touch with developers, or just other users of SeAT? Refer to the contact section to find out how!</p>"},{"location":"community_packages/","title":"Community Packages","text":""},{"location":"community_packages/#community-packages","title":"Community Packages","text":"<p>Below is a list of packages contributed by the community. These packages normally follow the same installation procedure, however, its best you consult the documentation of the package itself in case there is anything special you need to get it working.</p>"},{"location":"community_packages/#blade-package-installation","title":"Blade package installation","text":"<p>Packages will normally come in the form of a composer package that you need to include in your SeAT install, as well as a Service Provider that you need to bootstrap. So, generically speaking, installing a package will mean that you:</p> <ul> <li> <p>Ensure that you are in the path where you installed. By default, this should be <code>/var/www/seat</code>.</p> </li> <li> <p>Put your application into maintenance mode. This will ensure that no request from the outside will hit your applications logic, and also help you perform an upgrade uninterrupted. Do this with the following commands issued as the webserver user:</p> </li> </ul> <pre><code>sudo -H -u www-data bash -c 'php artisan down'\n</code></pre> <ul> <li>Require the package via composer:</li> </ul> <pre><code>sudo -H -u www-data bash -c 'composer require &lt;package vendor&gt;/&lt;package-name&gt;'\n</code></pre> <ul> <li>Publish the assets with artisan:</li> </ul> <pre><code>sudo -H -u www-data bash -c 'php artisan vendor:publish --force --all'\n</code></pre> <ul> <li>Run migration in order to update database:</li> </ul> <pre><code>sudo -H -u www-data bash -c 'php artisan migrate'\n</code></pre> <ul> <li>Renew config and route cache to benefit of newly added functionalities:</li> </ul> <pre><code>sudo -H -u www-data bash -c 'php artisan route:cache'\nsudo -H -u www-data bash -c 'php artisan config:cache'\n</code></pre> <ul> <li>Clear SeAT cache after installation:</li> </ul> <pre><code>sudo -H -u www-data bash -c 'php artisan seat:cache:clear'\n</code></pre> <ul> <li>Seed schedule so that new and missing commands get added to your schedule:</li> </ul> <pre><code>sudo -H -u www-data bash -c 'php /var/www/seat/artisan db:seed --class=Seat\\\\Services\\\\Database\\\\Seeders\\\\PluginDatabaseSeeder'\n</code></pre> <ul> <li>Bring your application live and back out of maintenance mode:</li> </ul> <pre><code>sudo -H -u www-data bash -c 'php artisan up'\n</code></pre> <p>Installing packages like this will ensure that none of the core SeAT packages are affected and you should be free to upgrade SeAT core at anytime.</p>"},{"location":"community_packages/#docker-package-installation","title":"Docker package installation","text":"<p>Applying community packages to your SeAT instance with Docker requires you to update your .env file located in <code>/opt/seat-docker</code> and uncommenting SEAT_PLUGINS by removing '#' and entering the package(s) to be installed separating each package with a comma. An example of how to enter packages in your .env would be:</p> <pre><code># SeAT Plugins\n# This is a list of the all of the third party plugins that you\n# would like to install as part of SeAT. Package names should be\n# comma seperated if multiple packages should be installed.\nSEAT_PLUGINS=denngarr/seat-fitting,cryptaeve/seat-squad-sync\n</code></pre> <ul> <li>Once you have entered the package(s) to be installed run the below command in <code>/opt/seat-docker</code>:</li> </ul> Docker (SeAT 4.x)Docker (SeAT 5.x - using Traefik)Docker (SeAT 5.x - using reverse proxy) <pre><code>docker-compose up -d\n</code></pre> <pre><code>docker compose -f docker-compose.yml -f docker-compose.mariadb.yml -f docker-compose.traefik.yml up -d\n</code></pre> <pre><code>docker compose -f docker-compose.yml -f docker-compose.mariadb.yml -f docker-compose.proxy.yml up -d\n</code></pre> <p>After running the above command wait for containers affected to rebuild. If SeAT does not come back up refer to Troubleshooting for more insight.</p>"},{"location":"community_packages/#package-list","title":"Package list","text":""},{"location":"community_packages/#seat-specific-packages","title":"SeAT specific packages","text":""},{"location":"community_packages/#maintained-packages","title":"Maintained packages","text":"Package Version (SeAT 4.x) Version (SeAT 5.x) Installation Description alliancewaw/seat-mumble-register Read the docs                                                     This plugin provide an extension to generate a certificate for SeAT user and regist it to mumble server cryocaustik/seat-hr Human Resources plugin for SeAT with Applications (with customized questions per corporation), Blacklist, Intel, Kick History, Notes, and Sheet cryptaeve/seat-squad-sync Adds the ability to sync squad members into filters of permissions cryptaeve/seat-text A module to serve public static ascii, with editing access controlled by seat denngarr/seat-fitting See cryptatech-seat-fitting Module to check fittings per character denngarr/seat-srp See cryptatech/seat-srp A module for SeAT that tracks SRP requests cryptatech/seat-fitting See denngarr/seat-fitting Read the docs Module to check fittings per character cryptatech/seat-srp See denngarr/seat-srp A module for SeAT that tracks SRP requests h4zz4rddev/seat-buyback A SeAT module for buyback functionality humunuk/alliance-structure-mngmt Add \"Structures\" sub-menu to Alliance page and show all the structures that belong to corps in alliance kassie/calendar See hermesdj/seat-calendar Read the docs Calendar plugin hermesdj/seat-calendar See kassie/calendar Read the docs Calendar plugin pyTonicis/seat-corp-mining-tax Read the docs A module to manage corporation mining taxes, mining statistics, corporation moon minings warlof/seat-discord-connector Read the docs A Discord driver to be used with <code>seat-connector</code> warlof/seat-teamspeak Read the docs A Teamspeak driver to be used with <code>seat-connector</code> recursivetree/seat-info Read the docs A module that adds a small wiki-like article systems for example as a corporation bulletin.SeAT 5.xYou need to follow special steps after upgrading to retain your resource files. recursivetree/seat-rat A module to monitor ratting usage in a system, e.g. to prevent dropping the bounty risk modifier in nullsec. simplyunnamed/seat-user-last-login Tool to help find potential AFK's in your corporation. recursivetree/seat-billing A billing module to help you with ore and rating taxes. recursivetree/seat-pushx-blamer A module to tell you who's guilty of blocking the PushX queue. recursivetree/seat-alliance-industry A corporation/alliance/coalition industry order marketplace recursivetree/seat-inventory Inventory manager for contracts and corporation hangars. recursivetree/seat-transport This plugin is a calculator for hauling costs, for example for an alliance JF service. recursivetree/seat-mineral-hauling Calculates the most efficient way to move minerals in refined ore form. feibam/seat-qq-connector A SeAT plugin which Link seat user to QQ number to help you find SPY in the group hermesdj/seat-industry A fork of recursivetree/seat-alliance-industry that became it's own thing through major refactoring and modification on how the orders and deliveries works. hermesdj/seat-planetary-industry Read the docs Planetary Industry plugin for SeAT. hermesdj/seat-mining-scan-parser A simple tool used to parse mining scan results to evaluate the content of a belt."},{"location":"community_packages/#price-provider-packages","title":"Price Provider Packages","text":"<p>These packages implement different prices sources for the recursivetree/seat-prices-core price provider system. If you are on SeAT 5 and use a plugin that uses recursivetree/seat-prices-core internally, you can install and use any of the following price provider packages.</p> Price Provider Version Description recursivetree/seat-prices-evepraisal Prices from evepraisal clones cryptatech/seat-prices-janice Prices from https://janice.e-351.com/ cryptatech/seat-prices-fuzzwork Prices from https://market.fuzzwork.co.uk/"},{"location":"community_packages/#library-packages","title":"Library Packages","text":"<p>These packages provide utilities for other packages and usually don't need to be installed manually.</p> Package Version Description warlof/seat-connector A generic connector module that handles invites and roles management with any registered platform recursivetree/seat-treelib A module that contains shared code for all <code>recursivetree/*</code> plugins recursivetree/seat-prices-core This plugin provides a price provider system for all plugins dealing with prices. Seat 5.x only."},{"location":"community_packages/#deprecated-packages","title":"Deprecated packages","text":"Package Version Description eve-scout/eveseat-oauth2-server This EVE SeAT package enables an OAuth2 server for Single sign-on. flyingferret/seat-whtools A small collection of tools for helping with Wh-Life corporation management, including calculating doctrine stocking levels (based on contracts and <code>denngarr/seat-fitting</code> plugin), a blue loot tax calculator, and a skill base certificate management.  Currently very much a  work in progress. freedenizen/eveseat-notes A notes addon for seat 1.x herpaderpaldent/seat-discourse SeAT Discourse enables SeAT to act as SSO provider for your Discourse-Forum instance. Groups and Categories do respect roles of members. With this package you can create hidden sections for your member and public sections for potential recruits to which members get automatically access to. Important: Check installation instructions on Github. herpaderpaldent/seat-groups Module to create auto, open and managed role groups to which user can be automatically be assigned, user can opt-in or user can apply to. herpaderpaldent/seat-notifications This is a fully functional notification package for discord and slack notifications. This package is very easily extendable by other packages and should replace core notifications at some point. Currently seat-groups provide many useful notifications. Notifications are send out by slack or discord bot and uses twice a full oAuth2 authentication of the user. warlof/seat-migrator A migration script between SeAT 2 and SeAT 3 warlof/seat-slack-sso Slack SSO integration for seat 2.x warlof/eveseat-mining-ledger ESI capability that provides a mining ledger to SeAT 2.x warlof/slackbot A slack bot that handles invites and kicks based on an api key recursivetree/seat-prices-evemarketer Prices from evemarketer.com"},{"location":"community_packages/#other-seat-related-packages","title":"Other SeAT related packages","text":"<ul> <li>nullsecurity-australia/helm-charts Allows to install EVE SeAT on a Kubernetes Cluster</li> </ul> <p>Danger</p> <p>Packages after this message are provided as history and idea database. They will not work on the stable version since they are non longer maintained by their author or have been integrated in core.</p> <ul> <li>Betriebsrat/err-seat Seat Api Interface for errbot</li> <li>eve-scout/passport-eveseat Passport strategy for authenticating with EVE SeAT using the OAuth 2.0 API.</li> <li>eve-scout/nodebb-plugin-sso-eveseat This NodeBB plugin allows users login/register via their EVE SeAT account.</li> </ul>"},{"location":"community_packages/#installing-different-versions","title":"Installing different versions","text":"<p>Sometimes it can be useful to install a version different from the latest version, for example if you want to install an older version of a plugin or if you want to test a bugfix. The easiest way to find all available versions is to go to the packagist site of the plugin by clicking on the version in the available plugins list. On packagist, if you scroll down, to the right you will find a list of all available versions.</p> BladeDocker (SeAT 4.x)Docker (SeAT 5.x - using Traefik)Docker (SeAT 5.x - using proxy) <p>Follow the normal installation steps, but change the <code>composer require</code> command to include the package according to the following example:</p> <pre><code>sudo -H -u www-data bash -c 'composer require &lt;package vendor&gt;/&lt;package-name&gt;:&lt;version-name&gt;'\n</code></pre> <p>In your <code>.env</code> file, add the version to the package like this:</p> <p><pre><code>SEAT_PLUGINS=&lt;vendor&gt;/&lt;package&gt;:&lt;version&gt;,cryptaeve/seat-squad-sync:4.0.2\n</code></pre> Next, restart the stack as usual.</p> <pre><code>docker-compose down\ndocker-compose up -d\n</code></pre> <p>In your <code>.env</code> file, add the version to the package like this:</p> <p><pre><code>SEAT_PLUGINS=&lt;vendor&gt;/&lt;package&gt;:&lt;version&gt;,cryptaeve/seat-squad-sync:4.0.2\n</code></pre> Next, restart the stack as usual.</p> <pre><code>docker-compose down\ndocker-compose -f docker-compose.yml -f docker-compose.mariadb.yml -f docker-compose.traefik.yml up -d\n</code></pre> <p>In your <code>.env</code> file, add the version to the package like this:</p> <p><pre><code>SEAT_PLUGINS=&lt;vendor&gt;/&lt;package&gt;:&lt;version&gt;,cryptaeve/seat-squad-sync:4.0.2\n</code></pre> Next, restart the stack as usual.</p> <pre><code>docker-compose down\ndocker-compose -f docker-compose.yml -f docker-compose.mariadb.yml -f docker-compose.proxy.yml up -d\n</code></pre>"},{"location":"styling/","title":"Styling","text":""},{"location":"styling/#styling","title":"Styling","text":"<p>By default, SeAT uses Bootstrap 4 and the Admin LTE template.</p> <p>You may want to customise SeAT design to match either your corporation or alliance colours.</p> <p>To do so, you can use two available css hooks :</p> <ul> <li><code>custom-layout-mini.css</code> used by the sign-in page</li> <li><code>custom-layout.css</code> used by all the entire application, globally</li> </ul>"},{"location":"styling/#bare-metal-installs","title":"Bare Metal Installs","text":"<p>Both files must be located into your <code>public</code> directory.</p> <p>Example</p> <p>Using the default base directory, you'll get the following path : - <code>/var/www/seat/public/custom-layout-mini.css</code> - <code>/var/www/seat/public/custom-layout.css</code></p> <p>These files are loaded automatically if they are detected - you have nothing else to do to enable them.</p>"},{"location":"styling/#docker-installs","title":"Docker Installs","text":"<p>An example of adding these to your Web UI container is provided below:</p> <p>Note</p> <p>Do note the version in <code>docker-compose.yml</code> and reflect this in your override file otherwise version mismatches will occur.</p> <ul> <li>Creating <code>custom</code> directory in <code>/opt/seat-docker/</code> and add files to new directory</li> <li>Creating <code>docker-compose.override.yml</code> in <code>/opt/seat-docker/</code> directory</li> <li>Adding following code to <code>docker-compose.override.yml</code> Note: Uncomment the needed file(s) by removing the <code>#</code></li> </ul> SeAT 4SeAT 5 (using Traefik)SeAT 5 (using proxy) <pre><code>version: \"3.2\"\nservices:\nseat-web:\nvolumes:\n#      - /opt/seat-docker/custom/custom-layout-mini.css:/var/www/seat/public/custom-layout-mini.css\n#      - /opt/seat-docker/custom/custom-layout.css:/var/www/seat/public/custom-layout.css\n</code></pre> <p>Once you have placed the files you will need to run <code>docker-compose up -d</code> for it to take effect.</p> <pre><code>version: \"3.2\"\nservices:\nfront:\nvolumes:\n#      - /opt/seat-docker/custom/custom-layout-mini.css:/var/www/seat/public/custom-layout-mini.css\n#      - /opt/seat-docker/custom/custom-layout.css:/var/www/seat/public/custom-layout.css\n</code></pre> <p>Once you have placed the files you will need to run <code>docker-compose -f docker-compose.yml -f docker-compose.mariadb.yml -f docker-compose.traefik.yml up -d</code> for it to take effect.</p> <pre><code>version: \"3.2\"\nservices:\nfront:\nvolumes:\n#      - /opt/seat-docker/custom/custom-layout-mini.css:/var/www/seat/public/custom-layout-mini.css\n#      - /opt/seat-docker/custom/custom-layout.css:/var/www/seat/public/custom-layout.css\n</code></pre> <p>Once you have placed the files you will need to run <code>docker-compose -f docker-compose.yml -f docker-compose.mariadb.yml -f docker-compose.proxy.yml up -d</code> for it to take effect.</p> <p>An example of a customized login page using <code>custom-layout-mini.css</code> would be:</p> <p>Note</p> <p>Valid <code>corporations</code> or <code>alliances</code> ids in the URL can be used for <code>login.logo::before</code> section.</p> <pre><code>/**\n * SeAT login page layout\n */\n@media all {\nhtml, body {\nheight: auto;\n}\n.login-page, .register.body {\ncolor: rgb(255,255,255);\nbackground-image: url(https://web.ccpgamescdn.com/aws/eveonline/sso/background.jpg);\nbackground-position: center center;\nbackground-repeat: no-repeat;\nbackground-size: cover;\nbackground-attachment: fixed;\n}\n.login-box, .register-box {\nwidth: 360px;\nmargin: 0;\nposition: absolute;\ntop: 50%;\nleft: 50%;\nbackground: rgba(48,48,48,.8);\ntransform: translate(-50%, -50%);\nborder: 5px solid #ecf0f1;\nborder-radius: 40px;\nbox-shadow: 0 1px 1px rgba(0,0,0,0.05);\n}\n.login-logo, .register-logo {\nfont-size: 35px;\ntext-align: center;\nmargin-bottom: 25px;\nfont-weight: 300;\ncontent: url(https://images.evetech.net/corporations/98482334/logo?size=128);\nmargin-top: 50px;\n}\n.login-logo::before, .register-logo::before {\ndisplay: block;\nwidth: 128px;\nheight:128px;\nmargin: 0 auto;\nborder-radius: 50%;\nmargin-bottom: 50px;\n}\n.login-box-body, .register-box-body {\nbackground: transparent;\npadding: 20px;\nborder-top: 0;\ncolor: inherit;\n}\n}\n</code></pre> <p>The above code will create the login page below:</p> <p></p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#troubleshooting","title":"Troubleshooting","text":"<p>So the inevitable happened. Something broke or simply isn't working as expected! That's OK. Usually its possible to recover from almost any type of error. The only thing that you can't recover from is not making database backups!</p> <p>There are a few things you can do to perform general troubleshooting. These range from flipping SeAT into debug mode to simply running a self diagnostics command. Lets take a look at a few steps you can take:</p>"},{"location":"troubleshooting/#whoops","title":"Whoops","text":"<p>Whoops, looks like something went wrong.</p> <p></p> <p>The dreaded \"Whoops\" message has appeared and now you need to figure out why. Normally, this means that something serious broke and the application simply can't recover by itself. In many cases it could either be a quick fix you can do yourself, or something that could result in the need to fix some code.</p> <p>In either case, the next steps to perform when seeing this would be to either enable debug mode and reloading the page / request that failed, or by viewing the log file while retrying the failed request.</p>"},{"location":"troubleshooting/#memory-errors","title":"Memory Errors","text":"<p>Fatal error: Allowed memory size of #### bytes exhausted (tried to allocate 4096 bytes)...</p> <p>If you are presented with an error below similar to this after \"Updating Dependencies\" you must append your .ENV file with <code>COMPOSER_MEMORY_LIMIT= -1</code> and restart the stack with the following if you are using docker:</p> Docker (SeAT 4.x)Docker (SeAT 5.x - using Traefik)Docker (SeAT 5.x - using reverse proxy) <pre><code>docker-compose up -d\n</code></pre> <pre><code>docker compose -f docker-compose.yml -f docker-compose.mariadb.yml -f docker-compose.traefik.yml up -d\n</code></pre> <pre><code>docker compose -f docker-compose.yml -f docker-compose.mariadb.yml -f docker-compose.proxy.yml up -d\n</code></pre> <p>Note</p> <p>Note: spacing is important for this parameter, if you are unsure copy/paste the needed line into your .ENV file.</p>"},{"location":"troubleshooting/#enabling-debug-mode","title":"Enabling Debug Mode","text":"<p>Debug mode controls how much information about an error condition is displayed to the user. When debug mode is enabled, the error message will be extremely verbose, whereas when its disabled, it simply states that an error had occurred. In either case, the error will always be written to the logs. By default, SeAT does not have debug mode enabled. There are many reasons for this with the primary reason being security related. It goes without saying that once you have completed debugging and fixing your instance, always make sure you disable debug mode afterwards.</p> <p>Once you have enabled debug mode, any errors that may occur would look something like the following instead of the default \"Whoops\" message. Depending on if you have development packages installed (which you wouldn't by default in non-development installations), the debug page may look slightly different.</p> <p></p> <p>Irrespective of how you installed SeAT, enabling debug mode is always a matter of changing the <code>APP_DEBUG</code> configuration option in the <code>.env</code> to `true. However, for it to apply depends on how you installed, so follow the appropriate steps below.</p>"},{"location":"troubleshooting/#debug-mode-host-installs","title":"Debug Mode - Host Installs","text":"<p>Assuming you installed SeAT on your host using either the SeAT tool or manually, cd to your SeAT installation directory. If you followed the guides on this documentation website, that would be in <code>/var/www/seat</code>. Next, open the <code>.env</code> file in a text editor and modify the line that says <code>APP_DEBUG=false</code> to say <code>APP_DEBUG=true</code>.</p> <p>The change would immediately take effect and you can simply reload the failed request for a detailed error message and code stack trace.</p>"},{"location":"troubleshooting/#debug-mode-docker-installs","title":"Debug Mode - Docker Installs","text":"<p>If you installed using Docker, cd to the directory where the <code>docker-compose.yml</code> file is located. Assuming you followed the guides on this website, that would be in <code>/opt/seat-docker</code>. Next, open the <code>.env</code> file in a text editor and modify the line that says <code>APP_DEBUG=false</code> to say <code>APP_DEBUG=true</code>.</p> <p>For the change to take effect, you need to reload the stack:</p> Docker (SeAT 4.x)Docker (SeAT 5.x - using Traefik)Docker (SeAT 5.x - using reverse proxy) <pre><code>docker-compose up -d\n</code></pre> <pre><code>docker compose -f docker-compose.yml -f docker-compose.mariadb.yml -f docker-compose.traefik.yml up -d\n</code></pre> <pre><code>docker compose -f docker-compose.yml -f docker-compose.mariadb.yml -f docker-compose.proxy.yml up -d\n</code></pre> <p>The containers will take a few moments to settle down after which you can reload the failed the request for a detailed error message and code stack trace.</p>"},{"location":"troubleshooting/#checking-log-files","title":"Checking Log Files","text":"<p>Logs are always written to one of two log files irrespective of whether the application is in debug mode or not. Application logs go to the Laravel frameworks log files. API requests sent to ESI are stored int he Eseye log file. Logs are stored in the applications storage directory which can be found in the <code>storage/logs</code> folder.</p> <p>Assuming you followed the guides on this documentation site, the full path to the directory where log files are will be <code>/var/www/seat/storage/logs/</code>. In the case of Docker installations, this will also be the path within the <code>seat-web</code>/<code>front</code> or <code>seat-worker</code>/<code>worker</code> container. Log files are rotated daily and are kept for a maximum of 10 days by default. Therefore, to get to todays application logs, the log file itself may be called <code>laravel-2018-05-31.log</code>. To find today's ESI requests logs, the log file will be called <code>eseye-2018-05-31.log</code>.</p>"},{"location":"troubleshooting/#live-logs-host-installs","title":"Live Logs - Host Installs","text":"<p>Irrespective of which log file you want to look at, getting todays live logs written to screen can be done with the following commands:</p> <p>Application Logs:</p> <pre><code>tail -f /var/www/seat/storage/logs/laravel-$(date +%Y-%m-%d).log\n</code></pre> <p>Esye / ESI Logs:</p> <pre><code>tail -f /var/www/seat/storage/logs/eseye-$(date +%Y-%m-%d).log\n</code></pre>"},{"location":"troubleshooting/#live-logs-docker-installs","title":"Live Logs - Docker Installs","text":"<p>Application source code and log files are shared between the <code>seat-web</code>/<code>front</code>, <code>seat-worker</code>/<code>worker</code> and <code>seat-cron</code>/<code>scheduler</code> containers. Therefore, the following commands can be executed on any of those containers. For purposes of demonstration, we are going to tail the logs from the <code>seat-web</code>/<code>front</code> container.</p> <p>First, enter get a shell within the <code>seat-web</code>/<code>front</code> container while in the <code>/opt/seat-docker/</code> directory with:</p> SeAT 4.xSeAT 5.x <pre><code>docker-compose exec seat-web sh\n</code></pre> <pre><code>docker compose exec front sh\n</code></pre> <p>Next, tail the log files you want to see.</p> <p>Application Logs:</p> <pre><code>tail -f /var/www/seat/storage/logs/laravel-$(date +%Y-%m-%d).log\n</code></pre> <p>Esye / ESI Logs:</p> <pre><code>tail -f /var/www/seat/storage/logs/eseye-$(date +%Y-%m-%d).log\n</code></pre>"},{"location":"troubleshooting/#diagnose-command","title":"Diagnose command","text":"<p>A diagnostics command exists that aims to perform a number of self-checks to help you diagnose problems. This command should be run as the same user the SeAT workers are running as, which is typically either <code>www-data</code> on Ubuntu / Debian based systems and <code>nginx</code> on CentOS based systems. If you have created yourself a separate user for SeAT, then running the diagnose command as that user is what you need to do.</p>"},{"location":"troubleshooting/#diagnose-host-installs","title":"Diagnose - Host Installs","text":"<p>Host installs require you to first <code>cd</code> to the directory where you installed SeAT. If you followed the guides on this website, that would be <code>/var/www/seat</code>. Next, run the diagnose command as the user you are running the workers as. If you are the <code>root</code> user, you can run it with:</p> <pre><code>su -c 'php artisan seat:admin:diagnose' -s /bin/sh www-data\n</code></pre>"},{"location":"troubleshooting/#diagnose-docker-installs","title":"Diagnose - Docker Installs","text":"<p>For Docker installations, the only requirement to run the diagnose command would be to ensure that you are currently in the same folder as that where the stacks <code>docker-compose.yml</code> file lives. If you followed the guides on this website that would be in <code>/opt/seat-docker</code>. Next, run the command with:</p> SeAT 4.xSeAT 5.x <pre><code>docker-compose exec seat-web php artisan seat:admin:diagnose\n</code></pre> <pre><code>docker compose exec front php artisan seat:admin:diagnose\n</code></pre>"},{"location":"about/contact/","title":"Contact","text":""},{"location":"about/contact/#contact","title":"Contact","text":"<p>Have a question? Want to say thank you? Need to express your opinion on SeAT? You are welcome to join us on our official Discord Server! https://discord.gg/VcUZRcnMYK.</p>"},{"location":"about/contact/#eve-online-forum-thread","title":"EVE Online Forum Thread","text":"<p>Track the conversation on the EVE Online Forums.</p>"},{"location":"about/reporting_bugs/","title":"Reporting Bugs","text":""},{"location":"about/reporting_bugs/#reporting-bugs","title":"Reporting Bugs","text":"<p>So, you think its time to report an issue. Awesome! However, before you do this, please go through the troubleshooting steps first to identify any common errors that you might be able to to fix yourself.</p>"},{"location":"about/reporting_bugs/#the-more-info-the-better","title":"The more info, the better","text":"<p>In order to best understand the bug, we need as much info as possible about your environment. For that, you can run the following command (from your SeAT directory), and copy / paste the output as part of your bug report:</p> <pre><code>php artisan seat:admin:diagnose\n</code></pre>"},{"location":"about/reporting_bugs/#log-files","title":"Log files","text":"<p>Log files are a fantastic resource. Check out the Laravel log for any <code>Exception</code> type errors, and add them to your bug report. The log file is located (relative to where you installed SeAT) at:</p> <pre><code>storage/logs/laravel-&lt;todays-date&gt;.log\n</code></pre>"},{"location":"about/reporting_bugs/#screenshots-and-debug-mode","title":"Screenshots and debug mode","text":"<p>Screenshots may also help, so don't be shy to take some and attach them to your bug report! If you flip your installation into debug mode then it may be possible to capture the error that is occurring via a screenshot.</p>"},{"location":"about/reporting_bugs/#report-the-bug","title":"Report the bug","text":"<p>Finally, to report the bug, head over to Github Issues and click on New Issue.</p>"},{"location":"admin_guides/admin_login/","title":"Admin Login","text":""},{"location":"admin_guides/admin_login/#admin-login","title":"Admin Login","text":"<p>SeAT is heavily relaying on EVE Online Single Sign-On to authenticate user. However, it's also shipped with a built-in administrator user.</p> <p>You need an admin account in order to do certain tasks like configuring your instances, roles, squads, etc...</p> <p>In order to authenticate with built-in admin user, use command disclosed bellow (choose your context).</p> Docker (SeAT 4.x)Docker (SeAT 5.x)Bare metal <pre><code>cd /opt/seat-docker\ndocker-compose exec seat-web php artisan seat:admin:login\n</code></pre> <pre><code>cd /opt/seat-docker\ndocker compose exec front php artisan seat:admin:login\n</code></pre> <pre><code>sudo -H -u www-data bash -c 'php /var/www/seat/artisan seat:admin:login'\n</code></pre> <p>You'll get a link after the command has finished running, which looks similar to the one bellow:</p> <pre><code>SeAT Admin Login URL Generator\nUser 'admin' does not exist. It will be created.\nChecking if 'admin' is a super user\nAdding 'admin' to the Superuser role\nGenerating authentication token\n\nYour authentication URL is valid for 60 seconds.\nhttp://localhost/auth/login/admin/9G3sb8hjMvrbIJrIf10KKtIj1c8e9mL5\n</code></pre> <p>Copy it and paste it inside your browser, and you will be authenticated as the built-in admin account.</p> <p>Hint</p> <p>You can define a standard user account as an administrator from the user card. To do so, go into Settings &gt; Users, search the user which need to be upgraded and clic on the edit button. On the displaying card, check Administrator and confirm change using edit button.</p> <p>Warning</p> <p>If you have not configured the <code>APP_URL</code> setting in the <code>.env</code> file, then the admin url will be generated for <code>localhost</code>. This is most likely incorrect and you can simply replace <code>localhost</code> with your server IP address or domain name.</p>"},{"location":"admin_guides/authorizations/","title":"Authorizations","text":""},{"location":"admin_guides/authorizations/#role-based-access-control","title":"Role-Based Access Control","text":""},{"location":"admin_guides/authorizations/#introduction","title":"Introduction","text":"<p>SeAT supports configuring user access control by means of Role-based Access Control (RBAC). This allows for SeAT administrators to granularly control who has access to what based on which roles a SeAT user has.</p> <p>In SeAT, the default rule is to deny access. As a result, someone without a permission will not be able to access the requested resource.</p> <p>Tip</p> <p>Use roles to define permission without wondering about automation. You will be able to set up role auto assignment with Squads. The more granular are your roles, the easier they will be to maintain them and built your automation rules.</p>"},{"location":"admin_guides/authorizations/#definitions","title":"Definitions","text":"<p>This section aims to clear up the definitions used in the SeAT RBAC implementation.</p> <ul> <li> <p>User A SeAT user account. This can be either a user account that was created in SeAT itself, or an automatically created account based on SSO. The only difference between the accounts is that with an SSO account, SeAT has no idea what the account's password is. Otherwise, everything else is exactly the same.</p> </li> <li> <p>Scope A scope is a domain grouping different permissions related to the same topic. Permissions from certain scope can be limited (ie: character or corporation).</p> </li> <li> <p>Permission A Permission is an attribute that is assigned to a Role. It grants access based on the specific permission.</p> </li> <li> <p>Role A Role is simply a collection of permissions. Users get assigned a roles and inherit the permissions granted by that role. A user cannot be given a raw permission. Permissions can only be granted by creating a Role, assigning permissions to the Role and granting the role to a user.</p> </li> <li> <p>Filters Permissions from certain scope can received filters. That simply mean the granted permission is limited to certain conditions. As an example, you may want to limit the asset permission from character scope to only a selection of character.</p> </li> <li> <p>Entity An entity is something on which the permission will be applied. It can be a Character, a Corporation or anything else.</p> </li> </ul>"},{"location":"admin_guides/authorizations/#interface","title":"Interface","text":"<p>To manage roles, you must go into Settings from SeAT sidebar, then choose Access Management.</p> <p>Info</p> <p>To be able to manage SeAT roles, you must be authenticated as an administrator user. Administrators can be managed in the users list, located in Settings.</p>"},{"location":"admin_guides/authorizations/#role-card","title":"Role card","text":"<p>The Role card is compounds of two main area.</p> <p></p> <p>Left pane contains basic information. It allows you to provide a name, a description and upload an optional logo. Those information can be sync with any third party platform using the API.</p> <p>Tip</p> <p>Provided logo are stored into database - so you don't need to worry when moving your installation.</p> <p>Right pane contains role settings. The pane is split in two tabs - first tab is showing the role permissions definitions. Second pane, the members one, gives you the current role members and related management actions.</p>"},{"location":"admin_guides/authorizations/#role-definition","title":"Role definition","text":""},{"location":"admin_guides/authorizations/#role-permissions","title":"Role permissions","text":"<p>The role permissions tab is built using a navigation bar, which is showing all available scopes - and the list of permissions from active scope. Use the scope navigation to show permissions related to each scope.</p> <p>Each permission block is structured as follow:</p> <ul> <li>a checkbox: if you check it, you mark the permission to be granted by the role</li> <li>an optional icon: it is visual only and help to pair some permission inside a same scope. It might be useful for large scope like character or corporation to distinguish permission kind. Options include <code>military</code>, <code>financial</code> and <code>industrial</code>.</li> <li>a user friendly name</li> <li>an optional description: this is mostly a text explaining the permission purpose</li> <li>an optional limits button: it will help you to filter/restrict the permission to only a certain population. Only character and corporation scope permissions can be filtered.</li> </ul> <p>Warning</p> <p>In SeAT 3, leaving the affiliations of a role empty, meant that the role would apply to no relevant entities. It had no effect. This has changed in SeAT 4. If you give a role a permission with no filter, this permission will apply globally to all entities. For example giving the Corporation Sheet permission to a role with no filter means that the members of the role will be able to see the corporation sheets of every corporation on the server.</p>"},{"location":"admin_guides/authorizations/#role-members","title":"Role members","text":"<p>The role members tab is a table listing all users who are currently assigned the role. All of them receive the benefits of the permissions which have been defined in the permissions tab from that same role. You will be able to add or remove any user to or from the role using action buttons.</p> <p>To remove an user from the role to which is part, simply click on the \"Remove\" button located on the member line.</p> <p>To add one or multiple user to the role, use the green \"Add\" button located at bottom right corner. This will show you a dialog box. Use the drop-down control to find users which you want to add. Once all users to be add have been chosen, click on the \"Close\" button located at bottom right corner from that modal. Selected users will be shown with a warning background to highlight their addition to the role. This means their selection isn't saved yet - you have to apply change using the green \"Submit\" button located under the General pane.</p>"},{"location":"admin_guides/buckets/","title":"Buckets","text":""},{"location":"admin_guides/buckets/#buckets-and-continuous-update","title":"Buckets and continuous update","text":"<p>Starting with eveseat/console@4.7.0 and eveseat/eveapi@4.8.0, a new system has been designed to ensure continuous updates and reduce load on both SeAT stack and ESI.</p>"},{"location":"admin_guides/buckets/#general","title":"General","text":"<p>Each instance is allowed to get up to 30 buckets. Every bucket will handle a batch of tokens, and their related characters and corporations data update. Size of bucket is dynamically set based on the following criteria :</p> <ul> <li>a token can be updated only once every 3600 seconds</li> <li>a token can be updated in an average of 120 seconds</li> </ul> <p>Info</p> <p>Most data ESI endpoint and data they deliver are restricted to a 1-hour cache long. However, certain are shorter and benefit of dedicated command to allow you update more frequently - please, do not abuse of them.</p> <ul> <li><code>esi:update:contracts</code></li> <li><code>esi:update:killmails</code></li> <li><code>esi:update:affiliations</code></li> <li><code>esi:update:notifications</code></li> </ul>"},{"location":"admin_guides/buckets/#health","title":"Health","text":"<p>You can determine a bucket status using <code>seat:buckets:list</code> and <code>seat:buckets:info ID</code> commands. The first one will show you all existing buckets in the system together with the amount of token they're managing and their status. The second will show you details about a specific bucket including characters they have the charge of.</p> <p>A bucket can have one of the following status :</p> <ul> <li>available : there are free slots according to current threshold</li> <li>balanced : maximum tokens has been reached according to the current threshold, and the bucket cannot handle more token</li> <li>overload : there are too many tokens handled by this bucket according to the current threshold</li> </ul>"},{"location":"admin_guides/buckets/#balancing","title":"Balancing","text":"<p>Bucket balancing is run every time a token is created or removed from the system. As a result, you may find bucket with a certain amount of token at one time and a completely different one at another.</p> <p>If you find yourself with unbalanced buckets, you can force them to be balanced using <code>seat:buckets:balance</code>. However, depending on instance state, certain buckets will not be able to be more balanced for a time (ie: lack of tokens).</p>"},{"location":"admin_guides/buckets/#update","title":"Update","text":"<p>This system has been designed to ensure there is a bucket to update every two minutes (except for instances with less than 30 tokens). You can force bucket to be processed and bypass the scheduler using <code>seat:buckets:update</code> - however, keep in mind that tokens handled by updating bucket will be frozen for the next 60 minutes.</p> <p>Hint</p> <p>Manual command to force update character and corporation are still available. They require the ID of a tied character.</p> <ul> <li><code>esi:update:characters character_id</code></li> <li><code>esi:update:corporations character_id</code></li> </ul>"},{"location":"admin_guides/docker_admin/","title":"Docker Admin","text":""},{"location":"admin_guides/docker_admin/#docker-administration","title":"Docker Administration","text":"<p>Occasionally you will need to perform administrative tasks in your SeAT instance running within docker. Be it because you would like to configure TLS for the web interface, change the port of the SeAT webserver or simply generate an admin login URL, this guide aims to help you get familiar for the commands needed for this.</p> <p>Many of the commands are exactly the same as those used in a bare metal installation, except for the fact that they are always prefixed with <code>docker compose</code> and run from the same directory that you have the seat <code>docker-compose.yml</code> file stored. If your <code>docker-compose.yml</code> lives in <code>/opt/seat-docker</code>, you will need to <code>cd</code> to that directory first and then execute the <code>docker compose</code> commands.</p> <p>Info</p> <p>With SeAT 5, we migrated from the <code>docker-compose</code> command to <code>docker compose</code>. Besides the name, they are fully compatible. If you are still on SeAT 4, you have to use <code>docker-compose</code> instead of <code>docker compose</code> for all actions. This applies to all actions, not just the ones listed on this page.</p>"},{"location":"admin_guides/docker_admin/#container-status","title":"Container Status","text":"<p>For a quick, birds-eye view on the status of the containers within the SeAT docker stack, the following command may be run:</p> SeAT 4.xSeAT 5.x <pre><code>docker-compose ps\n</code></pre> <pre><code>docker compose ps\n</code></pre> <p>This should give you the name, entry point, current status and internal ports used within the docker network as output.</p>"},{"location":"admin_guides/docker_admin/#configuration-changes","title":"Configuration Changes","text":"<p>A dockerized installation of SeAT is primarily configured via a configuration file located at <code>.env</code>. Configuration options such as your applications SSO secrets, SeAT's web server ports are amongst the many configuration options available in this file.</p> <p>Making changes to this file requires the docker stack to be restarted so that the configuration may be applies. An example case would be when you configure SSO for your instance.</p> <p>Once you have made a configuration change, save the <code>.env</code> file and restart the stack by simply running the following command from the path where the <code>docker-compose.yml</code> lives:</p> Docker (SeAT 4.x)Docker (SeAT 5.x - using Traefik)Docker (SeAT 5.x - using reverse proxy) <pre><code>docker-compose up -d\n</code></pre> <pre><code>docker compose -f docker-compose.yml -f docker-compose.mariadb.yml -f docker-compose.traefik.yml up -d\n</code></pre> <pre><code>docker compose -f docker-compose.yml -f docker-compose.mariadb.yml -f docker-compose.proxy.yml up -d\n</code></pre>"},{"location":"admin_guides/docker_admin/#live-container-logs","title":"Live Container Logs","text":"<p>Getting an idea of what is happening inside of the containers may be useful for many things, including debugging any issues that may occur. All of the containers generate logs that can be viewed either in isolation, or all of the containers in the stack.</p> Docker (SeAT 4.x)Docker (SeAT 5.x) <p>To view a single services' logs (<code>seat-web</code> in this examples case), run:</p> <pre><code>docker-compose logs --tail 10 -f seat-web\n</code></pre> <p>All services can referenced by their name using <code>docker compose</code>. You can see the service names here. At the time of writing this doc, the available services were: <code>mariadb</code>, <code>redis</code>, <code>traefik</code>, <code>seat-web</code>, <code>seat-worker</code> and <code>seat-cron</code>.</p> <p>To view a single services' logs (<code>front</code> in this examples case), run:</p> <pre><code>docker compose logs --tail 10 -f front\n</code></pre> <p>All services can referenced by their name using <code>docker compose</code>. You can see the service names here and in the adjacent <code>docker-compose.x.yml</code> files. At the time of writing this doc, the available services were: <code>mariadb</code>, <code>cache</code>, <code>traefik</code>, <code>front</code>, <code>worker</code> and <code>scheduler</code>.</p> <p>To view all service logs at once, run:</p> Docker (SeAT 4.x)Docker (SeAT 5.x) <pre><code>docker-compose logs --tail 10 -f\n</code></pre> <pre><code>docker compose logs --tail 10 -f\n</code></pre> <p>Once you are done viewing the output, simply pressing ^C will exit the log viewer.</p>"},{"location":"admin_guides/docker_admin/#application-logs","title":"Application Logs","text":"<p>While most processes will output information to stdout (which is what you will see when you run <code>docker-compose logs</code>), there are some app specific logs also generated.</p>"},{"location":"admin_guides/docker_admin/#logs-web-ui","title":"Logs - Web UI","text":"Docker (SeAT 4.x)Docker (SeAT 5.x) <p>If you are getting HTTP 500's, or other exception when using the web interface, the best place to find the relevant logs will be in the <code>seat-web</code> service, in the <code>/var/www/seat/storage/logs</code> directory. To reach them, run <code>docker-compose exec seat-web bash</code>. This will drop you into bash shell in the container:</p> <pre><code>$ docker-compose exec seat-web bash\nroot@9aff5b002ca0:/var/www/seat#\n</code></pre> <p>If you are getting HTTP 500's, or other exception when using the web interface, the best place to find the relevant logs will be in the <code>front</code> service, in the <code>/var/www/seat/storage/logs</code> directory. To reach them, run <code>docker-compose exec front bash</code>. This will drop you into bash shell in the container:</p> <pre><code>$ docker-compose exec front bash\nroot@9aff5b002ca0:/var/www/seat#\n</code></pre> <p>Next, cd to the logs directory with:</p> <pre><code>cd storage/logs/\n</code></pre> <p>This directory should have daily log files for you to view.</p>"},{"location":"admin_guides/docker_admin/#logs-worker-updaters","title":"Logs - Worker / Updaters","text":"Docker (SeAT 4.x)Docker (SeAT 5.x) <p>If you think your workers may be causing some exceptions, or you want to investigate why they may be failing, you can do so in the <code>seat-worker</code> service. Just like for the web UI, get a bash shell and cd to the logs directory.</p> <pre><code># docker-compose exec seat-worker bash\nroot@8ed8967348f1:/var/www/seat# cd storage/logs/\nroot@8ed8967348f1:/var/www/seat/storage/logs# ls\neseye-2020-08-23.log\n</code></pre> <p>If you think your workers may be causing some exceptions, or you want to investigate why they may be failing, you can do so in the <code>worker</code> service. Just like for the web UI, get a bash shell and cd to the logs directory.</p> <pre><code># docker compose exec worker bash\nroot@8ed8967348f1:/var/www/seat# cd storage/logs/\nroot@8ed8967348f1:/var/www/seat/storage/logs# ls\neseye-2020-08-23.log\n</code></pre> <p>The eseye log as well as Laravel log should help you debug what is going on.</p>"},{"location":"admin_guides/docker_admin/#installing-plugins","title":"Installing Plugins","text":"<p>SeAT provides the ability for third party developers to integrate with the core environment to extend its features and functionality. It is possible to install those plugins in a docker environment. Installing a plugin is relatively easy too. All you need to do is add the plugin name to your <code>SEAT_PLUGINS</code> variable in the <code>.env</code> file and run <code>docker-compose up -d</code> again. The plugin will be read from the <code>.env</code> file and installed as the application container starts.</p> <p>For example. Open the <code>.env</code> file (which is most probably at <code>/opt/seat-docker/.env</code>) and edit the <code>SEAT_PLUGINS</code> variable to include the package you want to install. In our example we use the pseudo package called user/seat-plugin:</p> <pre><code># SeAT Plugins\n# This is a list of the all of the third party plugins that you\n# would like to install as part of SeAT. Package names should be\n# comma separated if multiple packages should be installed.\nSEAT_PLUGINS=user/seat-plugin\n</code></pre> <p>Save your <code>.env</code> file and run <code>docker-compose up -d</code> to restart the stack with the new plugins as part of it. Depending on how big the plugin itself may be, this could take a few moments to complete.</p> <p>You can monitor the installation process by running:</p> Docker (SeAT 4.x)Docker (SeAT 5.x) <pre><code>docker-compose logs --tail 10 -f\n</code></pre> <pre><code>docker compose logs --tail 10 -f\n</code></pre>"},{"location":"admin_guides/docker_admin/#database-backups-and-restore","title":"Database Backups and Restore","text":"<p>Backups. They are important and really simple to do. To perform a backup of the current database used within the docker stack, compressing and saving it to a file called <code>seat_backup.sql.gz</code>, run:</p> Docker (SeAT 4.x)Docker (SeAT 5.x) <pre><code>docker-compose exec mariadb sh -c 'exec mysqldump \"$MYSQL_DATABASE\" -u\"$MYSQL_USER\" -p\"$MYSQL_PASSWORD\"' | gzip &gt; seat_backup.sql.gz\n</code></pre> <pre><code>docker compose exec mariadb sh -c 'exec mysqldump \"$MYSQL_DATABASE\" -u\"$MYSQL_USER\" -p\"$MYSQL_PASSWORD\"' | gzip &gt; seat_backup.sql.gz\n</code></pre> <p>To restore a backup to a new dockerized instance of SeAT, run:</p> Docker (SeAT 4.x)Docker (SeAT 5.x) <pre><code>zcat seat_backup.sql.gz | docker-compose exec -T mariadb sh -c 'exec mysql \"$MYSQL_DATABASE\" -u\"$MYSQL_USER\" -p\"$MYSQL_PASSWORD\"'\n</code></pre> <pre><code>zcat seat_backup.sql.gz | docker compose exec -T mariadb sh -c 'exec mysql \"$MYSQL_DATABASE\" -u\"$MYSQL_USER\" -p\"$MYSQL_PASSWORD\"'\n</code></pre>"},{"location":"admin_guides/scaled_deployments/","title":"Scaled Deployments","text":"<p>DEPRECATED!!!</p> <p>This guide is deprecated and is not functional in SeAT v3. If you need more performance in SeAT v3 then you have two options, move the DB alone to another server, and/or beef up the server SeAT is running on. This guide may be updated in the future when horizontal scaling is viable again. It is left as is for now due to academic and nostalgic reasons.</p>"},{"location":"admin_guides/scaled_deployments/#scaled-seat-deployments","title":"Scaled SeAT Deployments","text":"<p>At some stage, you may come to a point where a single install of SeAT might not be enough to process api key updates. Thankfully, it is actually very easy to scale SeAT horizontally in order to improve performance. This document aims to share some need to knows before embarking on a tiered installation of SeAT.</p>"},{"location":"admin_guides/scaled_deployments/#definitions","title":"Definitions","text":"<p>Lets get some definitions cleared up.</p>"},{"location":"admin_guides/scaled_deployments/#server","title":"Server","text":"<p>A server is defined as any VPS, hardware, docker container, or other form of virtualization. When talking performance though, keep in mind that there will probably be very little performance gains when everything runs on the same physical hardware instance.</p>"},{"location":"admin_guides/scaled_deployments/#seat-component","title":"SeAT component","text":"<p>A SeAT Component is a collection of SeAT packages and configurations that is responsible for performing a specific task. Tasks include the SeAT Web Interface, the job workers or dispatchers.</p>"},{"location":"admin_guides/scaled_deployments/#components","title":"Components","text":"<p>Before we can talk scale, we need to understand which components SeAT actually consists of. We will not talk about the immutable resources here as they will be mentioned in the next section.</p> <p>So, which components are there to SeAT?</p> <ul> <li>The web front end.</li> <li>The queue workers.</li> <li>The job dispatcher.</li> </ul> <p>Each of these components can live on their own server and must share the same immutable resources.</p>"},{"location":"admin_guides/scaled_deployments/#immutable-resources","title":"Immutable resources","text":"<p>While almost every component in SeAT can 'run on its own', there are some services that SeAT consumes that SeAT can not scale itself. Instead, SeAT can consume a clustered or load balanced instance of these services. There are various reasons for this where the most important is that state is maintained between queue workers using Redis and MariaDB.</p> <p>Services that should be shared between all SeAT components are:</p> <ul> <li>The Redis cache.</li> <li>The MariaDB database.</li> </ul> <p>When mentioning these components, they can definitely exist in their clustered/load balanced forms. For Redis, have a look at their Redis cluster tutorial and for MariaDB, you can have a look at their MariaDB cluster installation.</p>"},{"location":"admin_guides/scaled_deployments/#simple-scaled-setup","title":"Simple scaled setup","text":"<p>The following example setup is probably the most simple option to gain performance improvements by scaling out. The gist of it is that we simply add more queue worker components to the SeAT setup.</p> <p>Lets start by taking a look at a diagram, showing the extra queue worker component added.</p> <p></p> <p>Installing a new server with only the queue worker component setup can bring a significant speed boost into the environment. A new queue worker could be configured to run an extra 4-6 jobs. This queue worker must be configured to make use of the immutable resources.</p>"},{"location":"admin_guides/scaled_deployments/#more-complicated-scaled-setup","title":"More complicated scaled setup","text":"<p>Of course, one can totally go full nelson and explode all of the components in use. Below is an example deployment (with data flow links, red for redis, blue for MariaDB) that shows how each SeAT component can live on its own server.</p> <p></p>"},{"location":"admin_guides/scaled_deployments/#component-setups","title":"Component setups","text":"<p>Lets talk about component configurations quickly. Apart from the immutable resources, all of the software needed can be sourced from SeAT packages. All of the standard requirements such as PHP7.1 and Supervisor 3 also apply. However, not all components would need a web server for example.</p> <p>Below are the descriptions (and short requirements list) for the different SeAT components.</p>"},{"location":"admin_guides/scaled_deployments/#web-front-end","title":"Web front end","text":"<p>To setup a web front end component, use the following steps:</p> <ul> <li>Ensure you have at least PHP7.1 installed.</li> <li>Ensure that you have a web server installed that can serve the <code>public/</code> directory from the SeAT project.</li> <li>Ensure that you have <code>composer</code> installed and available in <code>PATH</code>.</li> <li>Download SeAT somewhere like <code>/var/www/seat</code> using <code>composer create-project eveseat/seat /var/www/seat --no-dev</code>.</li> <li>Once installed, configure the <code>.env</code> files database and Redis settings to connect to your immutable sources.</li> </ul>"},{"location":"admin_guides/scaled_deployments/#queue-worker","title":"Queue worker","text":"<p>To setup a queue worker component, use the following steps:</p> <ul> <li>Ensure you have at least PHP7.1 installed.</li> <li>Ensure that you have supervisor3 installed.</li> <li>Ensure that you have <code>composer</code> installed and available in <code>PATH</code>.</li> <li>Download SeAT somewhere using <code>composer create-project eveseat/seat --no-dev</code>.</li> <li>Once installed, configure the <code>.env</code> files database and Redis settings to connect to your immutable sources.</li> <li>Configure the workers in a <code>seat.ini</code> file for supervisor to start.</li> </ul>"},{"location":"admin_guides/scaled_deployments/#job-dispatcher","title":"Job dispatcher","text":"<p>To setup a job dispatcher component, use the following steps:</p> <ul> <li>Ensure you have at least PHP7.1 installed.</li> <li>Ensure that you have <code>composer</code> installed and available in <code>PATH</code>.</li> <li>Download SeAT somewhere like <code>/var/www/seat</code> using <code>composer create-project eveseat/seat /var/www/seat --no-dev</code>.</li> <li>Once installed, configure the <code>.env</code> files database and Redis settings to connect to your immutable sources.</li> <li>Setup the cronjob to run <code>php artisan schedule:run 1&gt;&gt; /dev/null 2&gt;&amp;1</code> every minute.</li> </ul>"},{"location":"admin_guides/squads/","title":"Squads","text":""},{"location":"admin_guides/squads/#squads","title":"Squads","text":""},{"location":"admin_guides/squads/#introduction","title":"Introduction","text":"<p>Since SeAT 4.0, there is a way to apply automatic logic between an end user and its roles. The purpose is to keep distinct the security and automations.</p> <p>Squads is the core implementation of the deprecated seat-groups plugin.</p>"},{"location":"admin_guides/squads/#squads-types","title":"Squads Types","text":"<p>There are multiple kinds of squad. The way they work and the automations they apply depend on their type.</p>"},{"location":"admin_guides/squads/#automatic","title":"Automatic","text":"<p>This is the simplest squad type. Membership of a squad of this type is controlled by the filters (see below) set for the squad.</p> <p>A member of an automatic squad cannot remove themselves from the group. If a user no longer fulfils the criteria of the filter set for the squad they will be automatically removed from it.</p>"},{"location":"admin_guides/squads/#manual","title":"Manual","text":"<p>Manual squads have to be applied to, the processing of the application depends on whether there is a moderator for the group or not.</p> <p>If there is no moderator the application will be automatically accepted.</p> <p>If there is at least one moderator they can accept or reject applications.</p> <p>Filters applied to a squad of this type will have two effects: - hide the \"Apply\" button if the filter criteria are not met - kick the member from the group if the filter criteria are not met</p>"},{"location":"admin_guides/squads/#hidden","title":"Hidden","text":"<p>Hidden squads are visible exclusively to their members and admins. To be part of a hidden squad, the user needs to be added to it by an admin.</p> <p>This mean, only admin user can invite another user to a hidden squad.</p>"},{"location":"admin_guides/squads/#squads-filters","title":"Squads Filters","text":"<p>Filters have different behaviors depending on the Squad Type. In case the Squad is of auto type, filters will be applied continuously to invite and kick members from the Squad - based on user changes.</p> <p>Otherwise, filters are used to automatically kick members from a Squad and determine the availability of the \"Apply\" button on Squad Card.</p> <p>Squads Filters have been designed to assist you to build rules which will determine whether a given user is eligible for a Squad. You pair different conditions together and link them with match keywords.</p> <p>Match keywords can be either <code>All</code> or <code>Any</code>. <code>All</code> mean all conditions must be met by the user for them to be eligible. <code>Any</code> means that a user is eligible if they meet any of the conditions.</p> <p>To add a condition, use <code>Add Rule</code> button located at the end of the modal. In case you have to build a complex rule, use <code>Add Group</code> which will allow you to pair multiple conditions in a single rule.</p> <p>Info</p> <p>Filters come with multiple operators. Not all operators work with all filters. <code>Is</code> and <code>Is not</code> are used to indicate either equality with criteria or inequality. Those operators are the most common and work with nearly all filter types. <code>Contains</code> is used to indicate that criteria must be included in a domain. This operator currently only works with the <code>Scopes</code> filter.</p> <p></p> <p>Example</p> <p>In the example above, we want only users who own at least one character (inside either Get Off My Lawn OR Toilet Paper. alliances) AND with skill Capital Ships to be eligible for membership in our Squad.</p>"},{"location":"admin_guides/squads/#squad-applications","title":"Squad Applications","text":"<p>Applications are only available to manual squads.</p> <p>For a user to be able to apply to a manual squad they need to meed the squads filter criteria. Otherwise, application button will not be available.</p> <p>If the user applies to a moderated squad, they are required to fill an application form. This will leave you the ability to build workflow internally and allow moderators to check any incoming members. Users can also cancel squad applications at any time using the Cancel button which will replace the Join button.</p>"},{"location":"admin_guides/squads/#squad-moderators","title":"Squad Moderators","text":"<p>Moderators of a Squad don't need to be part of that squad. They will be able to see a list of every member of each squad they moderate, allowing them to invite further members or kick existing ones.</p> <p>Squad moderators can also see Squad candidates, the time when they applied and each application form. From there, they can approve an application or reject it.</p> <p>When an application is approved, the user who sent it is becomes a member of the Squad. If an application is denied, the application is removed and user can submit a new application.</p> <p>Only administrator users can add or remove moderators to/from a Squad.</p>"},{"location":"admin_guides/squads/#interface","title":"Interface","text":""},{"location":"admin_guides/squads/#squads-list","title":"Squads List","text":"<p>Squads list is the entry point of squads. You can create a new squad, search for a squad, show available squads and get squad status from there. The Squads list is available to all users, without any restriction. You can access it using <code>Squads</code> from the left sidebar.</p> <p></p> <p>The list is split in three main areas. First area, at top, contains controls which will allow you to create a squad, or filter the shown squads. The main area, contains squads tiles from the active page. You can get up to six squads per page. Footer area is the pagination controls - allowing you to switch displayed page (first, previous, current, next and last).</p> <p></p> <p>Every Squad Tile is built following the same pattern :</p> <p>1) Logo 2) Name and description 3) User status related to that squad 4) Metadata 5) Type</p> <p></p> <p>Except metadata, other attributes are self-explained. Metadata is a list of counters showing you, from left to right:</p> <ul> <li>number of members of the squad (in white)</li> <li>number of moderators of the squad (in orange)</li> <li>number of applicants to the squad (in blue)</li> </ul> <p>Hint</p> <p>Squad Logo is a visual way for your end user to identify quickly a Squad. By default, logo are generated based on the Squad Name - but you can customise it in the Squad settings.</p>"},{"location":"admin_guides/squads/#squads-card","title":"Squads Card","text":"<p>When you click on a Squad Tile, you'll land on the related Squad Card. Squad Card is the landing area of a Squad. You will retrieve summarised information you had on the tile in the general pane.</p> <p>In case the Squad is manual, you will get access to the list of Squad moderators. This list is public, this mean everyone can see it, without consideration if he's or not a member of that Squad.</p> <p></p> <p>Under the general pane, you'll get access to the list of roles assigned by the Squad. This list is disclosed to admin user only. This mean neither \"standard user\" or moderators will get access to it.</p> <p>From that pane, you are able to remove a role from the squad or add other ones to it.</p> <p></p> <p>Members pane is visible to all moderators and squad members. Moderators can invite or kick user from the squad using actions buttons.</p> <p></p> <p>Info</p> <p>When an user is kicked or invited from/to a Squad, the event is shown into security logs. You will be able to see who kick or invite any user from/to any Squad.</p> <p>Last but not least, there is an extra Candidates pane which is available on Manual Moderated Squad. Squad applications can be managed from this area.</p> <p></p>"},{"location":"admin_guides/squads/#squads-settings","title":"Squads Settings","text":"<p>When you create a new Squad, you have to fill a small form which will define it. Mandatory elements are :</p> <ul> <li>The name of created squad which have to be unique</li> <li>Squad Type (between Auto, Hidden and Manual - see Squads Types)</li> <li>A description, which will be displayed on both Squad Card and Squad Tile</li> </ul> <p>You also can upload a shiny logo which will be used instead the generated icon and provide filters for squad eligibility.</p> <p></p> <p>Caution</p> <p>As soon as you save your Squad, filters are applied. In case the Squad is of auto type, eligible members will be added to it. For any other Squad Types, non-eligible members will be kicked from the Squad</p> <p>Hint</p> <p>Don't pay attention to your Squads Description. If it's too long, it will be shortened when displayed on the Squad Tile. However, the full description will always be available on the Squad Card into the general pane.</p>"},{"location":"admin_guides/understanding_tracking/","title":"Understanding Tracking","text":""},{"location":"admin_guides/understanding_tracking/#understanding-tracking","title":"Understanding Tracking","text":""},{"location":"admin_guides/understanding_tracking/#introduction","title":"Introduction","text":"<p>SeAT implements the Google Analytics Measurement Protocol. This document aims to explain in as much detail as possible how it has been implemented in SeAT, as well as what is tracked and what is not. This document aims to be as transparent as possible.</p>"},{"location":"admin_guides/understanding_tracking/#why","title":"Why","text":"<p>Well, the most obvious is it being nice to know how much SeAT is actually being used. One may argue that Github &amp; packagist gives statistics on how many times the project has been installed / cloned, but that does not really reflect how many actual active installations there are.</p> <p>Knowing how many active installs there are, encourages development.</p> <p>Lastly, certain exception types are also sent as hits. This helps immensely with figuring out if a new version may have a serious bug.</p>"},{"location":"admin_guides/understanding_tracking/#how-its-implemented","title":"How its implemented","text":"<p>First of all, the Google Analytics Measurement Protocol is really just that. It just measures usage. In summary, when certain events happen, only a hit with what happened is sent. No other data is sent with the hit.</p> <p>For example. When the scheduler queues jobs, a hit is sent that says that this happened, and that it happened for x amount of keys. This can be seen in the following line of code: QueueKeys. It can also be seen that no other data goes along with the hit. For example, the <code>access_token</code> and <code>refresh_token</code> (which is what most will be worried about) does not go with the hit.</p> <p>Once a hit is getting ready to be sent, information such as which OS/Version as well as versions of installed SeAT packages gets sent along with the hit. This can be seen in the following lines of code.</p>"},{"location":"admin_guides/understanding_tracking/#how-are-you-protecting-my-privacy","title":"How are you protecting my privacy?","text":"<p>Very special care has been taken to ensure that no personally identifiable information goes along with the Measurement Protocol hits. In fact, its actually not allowed and serves no purpose for tracking. That being said, the following actions have been taken to ensure that privacy is key:</p> <ul> <li>Source IP addresses are anonymized (Ref: eveseat/services:Jobs/Analytics#L132)</li> <li>Only OS Name, Machine Type and Version is reported. Type <code>a</code> is specifically not sent as it will disclose the hostname of the server (Ref: eveseat/services:Jobs/Analytics#L151-L153)</li> <li>Identifying an installation is done by generating a completely random V4 UUID. It is simply not possible to identify anyone with just this string (Ref: eveseat/services:Jobs/Analytics#L84-L90)</li> <li>If you insist, tracking can be completely disabled in the SeAT web interface (Ref: eveseat/services:Jobs/Analytics#L213-L214 and eveseat/web:Http/Controllers/Configuration/SeatController#L66)</li> </ul>"},{"location":"admin_guides/understanding_tracking/#can-you-link-the-commits-where-this-was-added","title":"Can you link the commits where this was added?","text":"<p>Sure!</p> <ul> <li>b2765c6d</li> <li>f3f44dc6</li> <li>cfdf20c0</li> <li>ccd332de</li> <li>b4a80803</li> </ul>"},{"location":"admin_guides/understanding_tracking/#are-the-stats-a-secret","title":"Are the stats a secret?","text":"<p>Not at all. However, as a start I am going to limit access to people whom have actively contributed towards SeAT. If you would like access, please ping me on Slack.</p>"},{"location":"admin_guides/understanding_tracking/#how-do-i-disable-this-crap","title":"How do I disable this crap?","text":"<p>If you insist on disabling the usage tracking, you can do this (as a SeAT administrator) by browsing to Configuration -&gt; SeAT Settings and setting Allow Tracking to No.</p> <p></p>"},{"location":"configuration/configuration_overload/","title":"Configuration Overload","text":"<p>This page aims to give a brief overview of how configuration is handled in SeAT and its packages. To give some perspective, we have to have a quick look at how packages are built and bootstrapped.</p>"},{"location":"configuration/configuration_overload/#quick-n-dirty-package-summary","title":"Quick-n-dirty-package summary","text":"<p>All of SeAT's core internals are built as packages. This means, every package has a service provider. All a service provider really is, is a class with 2 methods ie: <code>handle()</code> and <code>register()</code>. When a service provider is bootstrapped into the application, these 2 methods are called at some stage.</p> <p>It is in these methods that we tell the Laravel framework more about our package. Amongst many things that we can tell it, one of them is configuration related. All we really telling the application is where the configuration file is, and under which namespace does it live. Another important fact is that SeAT package configurations are added with the <code>mergeConfigFrom()</code> method. This means, you can override the defaults in your installation without worrying about breaking the package itself.</p>"},{"location":"configuration/configuration_overload/#overriding-configuration","title":"Overriding configuration","text":"<p>Lets take a look at a sample package configuration file: The eveseat/eveapi package for example. At the time of this writing, it has 5 configuration options. The first being a <code>version</code>, the last being <code>eseye_loglevel</code>. When this package is installed, this configuration file will live somewhere deep inside your <code>vendor</code> folder. Changing the value there is not impossible, but it will be lost with the next package upgrade. The better method will be to override the change locally, inside you <code>config/</code> folder here.</p>"},{"location":"configuration/configuration_overload/#an-example-changing-eseye_loglevel","title":"An example, changing <code>eseye_loglevel</code>","text":"<p>To start, create the file <code>eveapi.config.php</code> inside the <code>config</code> folder. Next, we add the contents in the file to return an array, specifying the <code>eseye_loglevel</code> key and its new value. The file would look something like this:</p> <pre><code>&lt;?php\n// File: config/eveapi.config.php\nreturn [\n'eseye_loglevel' =&gt; 'debug',\n];\n</code></pre> <p>That's it. The configuration should now have been overridden.</p>"},{"location":"configuration/env_file_reference/","title":"Env File Reference","text":""},{"location":"configuration/env_file_reference/#env-reference","title":"Env Reference","text":"<p>In both the case of a Docker installation as well as a host based installation (manual or via SeAT tool), SeAT has some configuration values that can be set via an <code>.env</code> file. Depending on your installation type, this file will be in either <code>/opt/seat-docker/.env</code> or in <code>/var/www/seat/.env</code></p>"},{"location":"configuration/env_file_reference/#configuration-value-reference","title":"Configuration Value Reference","text":"Parameter Name Default value Description APP_URL http://seat.local This is the public address where SeAT instance is reachable. That should match with the <code>EVE_CALLBACK_URL</code> without <code>/auth/eve/callback</code> suffix APP_LOCALE en This is the locale used by the server to generate translated strings. DB_HOST 127.0.0.1 This is the IP or domain from your SQL Server. DB_PORT 3306 This is the port used by your SQL Server to receive query. DB_DATABASE seat This is the name for your SeAT database. DB_USERNAME seat This is the user which is granted to the SeAT database from SeAT server. DB_PASSWORD secret This is the user password MAIL_DRIVER smtp This is the driver used to send mail. It will be covered in a dedicated article. MAIL_HOST smtp.mailtrap.io This is driver mail hostname. It will be covered in a dedicated article. MAIL_PORT 2525 This is the driver mail port. It will be covered in a dedicated article. MAIL_USERNAME null This is the driver mail username. It will be covered in a dedicated article. MAIL_PASSWORD null This is the driver mail password. It will be covered in a dedicated article. MAIL_ENCRYPTION null This is the driver mail encryption. It will be covered in a dedicated article. MAIL_FROM_ADDRESS noreply@localhost.local This is the mail address which the user will chown when he will receive mail from SeAT. MAIL_FROM_NAME SeAT Administrator This is the name which the user will chown when he will receive mail from SeAT. EVE_CLIENT_ID null This is the EVE Application Client ID you'll get when you created an application over https://developers.eveonline.com EVE_CLIENT_SECRET null This is the EVE Application Client Secret you'll get when you created an application over https://developers.eveonline.com EVE_CALLBACK_URL https://seat.local/auth/eve/callback This is the EVE Application Callback URL you filled when you created an application over https://developers.eveonline.com. You should have only to fix <code>seat.local</code> QUEUE_BALANCING_MODE false Determine the workers balancing mode used by the Jobs Manager. Value can be <code>false</code>, <code>auto</code> or <code>simple</code>. See official Laravel documentation for more details QUEUE_WORKERS 4 Determine the amount of worker which have to be spawn to process jobs over all queues. In <code>auto</code> and <code>simple</code> balancing, this value cannot be lower than <code>4</code> as it's correspond to the available queues. ESEYE_CACHE_DRIVER file Determine the driver used to cache eseye data. available values are file, redis ESEYE_CACHE_STORAGE_PATH eseye When using the file driver, this is the name of the folder in seat/storage that will store the cache files ESEYE_CACHE_CONNECTION cache When using the redis driver, this is the name of the redis connection. If using 'cache', it will reuse the existing redis cache configuration found in seat/config/cache.php. It must be a configured connection ESEYE_CACHE_LOCK_CONNECTION default When using the Redis driver, it will be the connection used to lock the cache"},{"location":"configuration/esi_configuration/","title":"ESI Configuration","text":""},{"location":"configuration/esi_configuration/#configuring-eve-online-esi-scopes","title":"Configuring Eve Online ESI-Scopes","text":""},{"location":"configuration/esi_configuration/#introduction","title":"Introduction","text":"<p>For normal operations within SeAT, authentication is provided by EVE Onlines' SSO service and API access with ESI and tokens supplied via SSO. Technical details behind the SSO implementation can be found here.</p> <p>Authenticating users using SSO effectively means that users may authenticate to SeAT using their existing EVE Online credentials. SeAT does not have access to the credentials itself as that is handled entirely by CCP. Only once authentication is successful from an EVE Online perspective does a user get asked if they want to allow your SeAT installation to have access with the configured set of scopes. Once the user agrees to these scopes, the users browser is redirect back to SeAT and will be logged in.</p> <p>If you have not configured this yet, the login page will present you with a warning about it:</p> <p></p>"},{"location":"configuration/esi_configuration/#configuration-summary","title":"Configuration Summary","text":"<p>A bit of setup work is needed in order to have your SeAT setup ready for SSO integration and ESI usage. The gist of it is:</p> <ul> <li>Step I: Register your application on the EVE Online Developers portal for both Authentication and API Access.</li> <li>Step II: Configure your <code>EVE_CLIENT_ID</code>, <code>EVE_CLIENT_SECRET</code> and <code>EVE_CALLBACK_URL</code> in the <code>.env</code> configuration file</li> </ul>"},{"location":"configuration/esi_configuration/#register-your-application","title":"Register your application","text":"<p>Browse to the EVE Online Developers portal and open the application management page. You might be asked to log in with your EVE account.</p> <p></p> <p>Create a new application.</p> <p></p> <p>Give your application a meaningful Name and a Description. Users will see this name when they review the access Third Party applications have to their account so keep that in mind when registering your application.</p> <p></p> <p>Next, specify the Callback URL and select the ESI Scopes you want (probably all of them).</p> <p>You can also expand scope categories to configure each scope individually.</p> <p></p> <p>Note on the Callback URL</p> <p>The Callback URL where the user should be redirected to once authentication was successful. In other words, once they have completed authentication using their EVE Online credentials, they need to be redirected back to your SeAT instance. In the example above, we can see it is <code>https://seat.local/auth/eve/callback</code>. You should replace the <code>seat.local</code> part with your domain!</p> <p>For example, assuming you are hosting SeAT at <code>https://this.is.seat/</code>, then the Callback URL will be <code>https://this.is.seat/auth/eve/callback</code>. If you have SeAT in a sub folder on your web server, remember to add the folder name before <code>/auth/eve/callback</code>.</p> <p>Create the application.</p> <p>With the new application created, you should be redirected to a page showing the Client ID and Client Secret configuration parameters of the application. Take note of these values.</p> <p></p>"},{"location":"configuration/esi_configuration/#set-config-parameters-in-env-file","title":"Set config parameters in <code>.env</code> file","text":"<p>We are almost done. The next thing to do is to add these configuration parameters to our SeAT installs <code>.env</code> file. Browse to your SeAT installation directory and edit the <code>.env</code> file (note this is a hidden file and wont show up when you just type <code>ls</code>. You ca use <code>ls -a</code> to also include hidden files).</p> <p>Look for the following section of the file and populate the values with those you got when you created an application on the developers site:</p> <pre><code>EVE_CLIENT_ID=null\nEVE_CLIENT_SECRET=null\nEVE_CALLBACK_URL=http://seat.test/auth/eve/callback\n</code></pre>"},{"location":"configuration/esi_configuration/#notes-for-docker-users","title":"Notes for Docker Users","text":"<p>Your <code>.env</code> file is located in <code>/opt/seat-docker</code>. Rebuild your app after setting the ESI Details in it using:</p> Docker (SeAT 4.x)Docker (SeAT 5.x - using Traefik)Docker (SeAT 5.x - using proxy) <pre><code>docker-compose down\ndocker-compose up -d\n</code></pre> <pre><code>docker compose down\ndocker compose -f docker-compose.yml -f docker-compose.mariadb.yml -f docker-compose.traefik.yml up -d\n</code></pre> <pre><code>docker compose down\ndocker compose -f docker-compose.yml -f docker-compose.mariadb.yml -f docker-compose.proxy.yml up -d\n</code></pre>"},{"location":"configuration/eve_administrative_contact/","title":"EVE Administrative Contact","text":""},{"location":"configuration/eve_administrative_contact/#eve-api-administrative-contact","title":"Eve API Administrative Contact","text":""},{"location":"configuration/eve_administrative_contact/#what","title":"What","text":"<p>Requests to the EVE API need to have an administrative contact email set before SeAT will queue jobs to process. CCP made the request in this Github issue. To address this, the email address is added to the User-Agent string that is used when making EVE API requests as can be seen eveseat/eveapi:Helpers/PhealSetup#L77.</p>"},{"location":"configuration/eve_administrative_contact/#why","title":"Why","text":"<p>The error <code>Failed to queue due to default config</code> is generated by eveseat/eveapi:Traits/JobManager#L47-L56 check. In order for this check to pass, you need to configure the administrative email address in the SeAT configuration.</p>"},{"location":"configuration/eve_administrative_contact/#how","title":"How","text":"<p>Adding the email address can be done in two ways. Wither via the command line or via the Web interface.</p>"},{"location":"configuration/eve_administrative_contact/#web-interface","title":"Web interface","text":"<p>The other method to change the admin email is via the web interface. You need to be logged in with a user that has the <code>superuser</code> role. Typically, if the email address is not set, you may notice the following warning on the home page:</p> <p></p> <p>To configure it, browse to Configuration -&gt; SeAT Settings from the side menu, and set the email in the Administrator Email field.</p> <p></p>"},{"location":"configuration/eve_administrative_contact/#command-line","title":"Command line","text":"<p>The command <code>php artisan seat:admin:email</code> will prompt you to add a valid email address for the administrative contact:</p> <p>Example:</p> <p></p>"},{"location":"configuration/sde_overload/","title":"SDE Overload","text":"<p>SeAT sources information about the SDE from a json file hosted here. It may happen that the SDE gets updated but the the json resource has not yet been updated. For this reason, its possible to specify the version to get based on what is available on www.fuzzwork.co.uk.</p>"},{"location":"configuration/sde_overload/#overriding-the-resources-json","title":"Overriding the resources json","text":"<p>Check the version of SDE dumps available on www.fuzzwork.co.uk. At the time of this writing, <code>frostline-1.0-116241</code> was the latest. Once you have the version string ready, open the <code>.env</code> configuration file and add a key as follows:</p> <pre><code>SDE_VERSION=frostline-1.0-116241\n</code></pre> <p>When running the SDE updater, specify the <code>--local</code> parameter to source the version string from the configuration file:</p> <pre><code>php artisan eve:update:sde --local\n</code></pre> <p>Info</p> <p>By default, SeAT automatically updates the SDE every month. You may want to login as an administrator and remove the schedule to update it monthly if you have overridden the default.</p>"},{"location":"configuration/email_setup/gmail/","title":"GMail","text":""},{"location":"configuration/email_setup/gmail/#email-setup-using-gmail","title":"Email Setup - Using GMail","text":""},{"location":"configuration/email_setup/gmail/#introduction","title":"Introduction","text":"<p>SeAT requires email to be setup to allow for things like notifications to be sent. This guide will attempt to describe how to go about setting up your email using GMail as an SMTP.</p>"},{"location":"configuration/email_setup/gmail/#the-config","title":"The config","text":"<p>As with anything Laravel, the config for your email setup will live in your installs <code>.env</code> file. To use GMail as an SMTP service, set the <code>MAIL_DRIVER</code> option in your <code>.env</code> configuration file to <code>smtp</code>. Next, specify the SMTP details:</p> <pre><code>// File: .env\n\nMAIL_DRIVER=smtp\nMAIL_HOST=smtp.gmail.com\nMAIL_PORT=587\nMAIL_USERNAME=username@gmail.com\nMAIL_PASSWORD=gmailpassword\nMAIL_ENCRYPTION=tls\nMAIL_FROM_ADDRESS=username@gmail.com\n</code></pre> <p>Done! To test, you can add some mail notification using the <code>Integrations</code> and <code>Notification groups</code>.</p>"},{"location":"configuration/email_setup/mailgun/","title":"Mailgun","text":""},{"location":"configuration/email_setup/mailgun/#email-setup-using-mailgun","title":"Email Setup - Using Mailgun","text":""},{"location":"configuration/email_setup/mailgun/#introduction","title":"Introduction","text":"<p>SeAT requires email to be setup to allow for things like notifications to be sent. This guide will attempt to describe how to go about setting up your email using the Mailgun service. Though Mailgun is a commercial service, you get to send 10k emails for free per month. It also provides epic stats for you to track emails with etc.</p>"},{"location":"configuration/email_setup/mailgun/#the-config","title":"The config","text":"<p>As with anything Laravel, the config for mailgun will live in your installs <code>.env</code> file. To use the Mailgun driver, first  set the <code>MAIL_DRIVER</code> option in your <code>.env</code> configuration file to <code>mailgun</code>. Next, we will add two options to specify details about our mailgun account.</p> <pre><code>// File: .env\n\nMAILGUN_DOMAIN=whateveritis\nMAILGUN_SECRET=anotherthing\n</code></pre> <p>To find out the values you need to populate, login to your mailgun account and browse to the domains section. Pick the applicable domain name. The screen you will see should looks something similar to this:</p> <p></p> <p>The big title (<code>sandbox1XXXXXXX</code> in my case) is the domain name, and the field titled <code>API Key</code> is the <code>MAILGUN_SECRET</code>.</p> <p>Done! To test, you can add some mail notification using the <code>Integrations</code> and <code>Notification groups</code>.</p>"},{"location":"developer_guides/core_package_breakdown/","title":"Core Package Breakdown","text":""},{"location":"developer_guides/core_package_breakdown/#developers-guides-core-package-breakdown","title":"Developers Guides - Core Package Breakdown","text":""},{"location":"developer_guides/core_package_breakdown/#understanding-the-core-seat-packages","title":"Understanding the core SeAT packages","text":"<p>This section aims to describe the functional differences between the various SeAT packages.</p>"},{"location":"developer_guides/core_package_breakdown/#eveseatapi","title":"eveseat/api","text":"<p>Namespace: Seat\\Api</p> <p>Source Code: link</p> <p>This repository contains all the SeAT Api Endpoints, as well as the routes and views for API key management.</p>"},{"location":"developer_guides/core_package_breakdown/#eveseateveapi","title":"eveseat/eveapi","text":"<p>Namespace: Seat\\Eveapi</p> <p>Source Code: link</p> <p>This repository is the heart of the API update logic. It is responsible for doing the actual update work, pulling the EVE API documents from ESI, parsing them and storing the resultant data in the database. Most of the data models live in this repository too.</p>"},{"location":"developer_guides/core_package_breakdown/#eveseatnotifications","title":"eveseat/notifications","text":"<p>Namespace: Seat\\Notifications</p> <p>Source Code: link</p> <p>This repository contains a set of scheduled jobs that perform notifications type tasks. A notification can be something as simple as an alert about a corporation member that has been inactive for a period of time.</p>"},{"location":"developer_guides/core_package_breakdown/#eveseatweb","title":"eveseat/web","text":"<p>Namespace: Seat\\Web</p> <p>Source Code: link</p> <p>This repository contains the web interface for SeAT. It contains by far the most complex service provider and will undoubtedly become the prime example/reference when developing packages for SeAT. This package is also the only one that has a permissions / ACL concept. Refer the to the permissions document for more information.</p>"},{"location":"developer_guides/core_package_breakdown/#eveseatseat","title":"eveseat/seat","text":"<p>Namespace: App</p> <p>Source Code: link</p> <p>This is the main SeAT repository. It does not really contain much logic. In fact, it should just be seen as the glue between all the core packages. This is the repository that is cloned when a new installation is done.</p> <p>The most important part of this repository is the service providers that are bootstrapped with the application. The providers array has the default Laravel providers as well as the SeAT providers at the end. These providers tell the application where to find routes, views, configs etc. For more detailed information about providers, refer to the Laravel 5.5 documentation. When you write your package though, you should make use of package discovery as described in the Laravel 5.5 documenation. This will make the installation of your package super simple without the need to edit any files.</p>"},{"location":"developer_guides/core_package_breakdown/#eveseatservices","title":"eveseat/services","text":"<p>Namespace: Seat\\Services</p> <p>Source Code: link</p> <p>This repository contains 'services'. A service is defined as any form of helper and or repository that other packages can depend on. The eveseat/web package (amongst others) make heavy use of the repository classes in this package.</p>"},{"location":"developer_guides/developer_installation/","title":"Developer Installation","text":""},{"location":"developer_guides/developer_installation/#developer-installation","title":"Developer Installation","text":"<p>This document describes how to set up a development environment for both core package and third party package development.  The easiest way to set up a development environment is to use docker. You can use the same image as in a production environment.</p> <p>For development, plugins and the seat core are treated the same. When working on the core, you install a core package like any other plugin. This is also how core packages are implemented: Internally they are also just a plugin, only that they  are considered the core and that other plugins build on top of them.</p> <p>The SeAT docker image is built in a way to prefer development installations of packages over plugins from <code>.env</code> and the core. While the docker image always downloads and installs the core packages, when it finds a local development install of a core package, it uses that over the latest version from packagist.</p>"},{"location":"developer_guides/developer_installation/#setup-process","title":"Setup Process","text":"<p>First, start with standard installation to get a working environment.</p> <p>The official docker-compose wrapper is shipped with a <code>packages</code> directory. It is mounted readonly, and you can store your development sources in it.</p> <p>To make things easier, we recommend you keep vendor path convention to split your sources across every single package you want to play with.</p>"},{"location":"developer_guides/developer_installation/#overrider","title":"Overrider","text":"<p>In the next step, we need to let laravel, the php framework used by seat, know that our plugin is there.</p> <p>The image has been designed to look for a file called <code>override.json</code> inside <code>packages</code> directory. When it is found, it will be merged together with standard <code>composer.json</code> file from <code>eveseat/seat</code> package.</p> <p>It's designed to override both <code>autoload</code> and <code>providers</code>. Here is a complete <code>override.json</code> structure:</p> <pre><code>{\n\"autoload\": {\n\"namespace_to_load\\\\\": \"packages/sources_path\"\n},\n\"providers\": [\n\"FQCN\\\\Provider\"\n]\n}\n</code></pre> <p>An override can have either autoload, providers or even both property. Do not forget to escape <code>\\</code> in order to get a valid json file.</p> <p>When your container will start, mapping from <code>autoload</code> property in your <code>override.json</code> file will be merged with <code>autoload-dev</code> property from official <code>composer.json</code>.</p> <p>SeAT 4.x</p> <ol> <li>If you need access the console of any container, access it via <code>docker exec seat-web sh</code> where <code>seat-web</code> is the name of the target container.</li> <li>You can execute <code>artisan</code> commands from outside of docker with <code>docker exec seat-web php artisan &lt;command&gt;</code></li> </ol> <p>SeAT 5.x</p> <ol> <li>If you need access the console of any container, access it via <code>docker exec front sh</code> where <code>front</code> is the name of the target container.</li> <li>You can execute <code>artisan</code> commands from outside of docker with <code>docker exec front php artisan &lt;command&gt;</code></li> </ol> <p>Please note that there is currently no way to install dependencies with the package override. </p> <p>When installing already existing packages (e.g. a core package), you can find all required autoloads and service providers in it's <code>composer.json</code> file.</p>"},{"location":"developer_guides/developer_installation/#teach-things-by-example","title":"Teach things by example","text":"<p>As an example, let's say I want to make a new feature in web core package, I'll spawn an <code>eveseat</code> directory at root <code>packages</code> directory, followed by a clone from <code>eveseat/web</code> git repository. Last but not least, I'll create an <code>override.json</code> file to inform SeAT there are developer things to load.</p> <ol> <li>Create vendor directory into <code>packages</code> directory <code>mkdir packages/eveseat</code></li> <li>Cloning core web package into <code>packages/eveseat/web</code> directory <code>git clone https://github.com/eveseat/web.git packages/eveseat/web</code></li> <li>Create an <code>override.json</code> to use custom web sources</li> </ol> <pre><code>cat &gt; packages/override.json &lt;&lt; EOL\n{\n  \"autoload\": {\n    \"Seat\\\\Web\\\\\": \"packages/eveseat/web/src/\"\n  }\n}\nEOL\n</code></pre> <p>Tips</p> <p>If you're working with Windows, prefer to store your files in wsl layer rather than Windows directory. Both work, however, you'll get better performances!</p>"},{"location":"developer_guides/development_tips/","title":"Development Tips","text":""},{"location":"developer_guides/development_tips/#development-tips","title":"Development Tips","text":"<p>This page contains general tips and tricks that may be useful during package development.</p>"},{"location":"developer_guides/development_tips/#best-practices","title":"Best practices","text":"<p>No doubt, there are no limits to what code you can write, how you structure it and how you name things. However, the last thing you want is to have conflicts with the SeAT core, or someone elses package! The following list contains some tips to help you avoid those conflicts and to help people better discover your packages:</p> <ul> <li>Prefix your github repository name with <code>seat</code> eg: <code>seat-teamspeak</code>.</li> <li>Tag your github repository with <code>seat</code>.</li> <li>Use a unique package namespace such as <code>Author\\Seat\\Package\\</code> eg: <code>Warlof\\Seat\\Teamspeak\\</code>.</li> <li>Prefix your database table names with something unique to your package. eg <code>warlof_teamspeak_users</code>.    Although you shouldn't make your prefix too long, as there is a 64 character table length limit.</li> <li>Do not modify core tables. This will break future updates for users of your package.</li> <li>Prefix your settings with both an author and package eg: <code>warlof.teamspeak.address</code>.</li> <li>Prefix redis records with both author and package eg: <code>warlof.teamspeak.channels</code>.</li> <li>In your <code>composer.json</code> file, set the <code>type</code> to <code>seat-plugin</code>.</li> <li>Avoid altering core tables, especially introducing relationship - this might break core migrations. Prefer to use observer if you need to maintain your data across core models.</li> <li>If you need an API or something the SeAT core doesn't provide, consider contributing it. The SeAT core is not set in stone.</li> <li>Scope your routes: For example all routes from the seat core start with <code>seatcore</code>like this: <code>seatcore::my.route.to.someting</code>. You should follow a similar format: <code>seat&lt;plugin name&gt;::&lt;route&gt;</code></li> <li>Use a schedule seeder for adding commands to the schedule. Compared to migrations, this has the advantage that accidentally deleted commands will be added back automatically on the next restart.</li> <li>For all your model, extend from <code>\\Seat\\Services\\Models\\ExtensibleModel</code> instead of the standard laravel <code>Model</code>. They are functionally equivalent, but <code>ExtensibleModel</code> allows injectable relations.</li> </ul>"},{"location":"developer_guides/development_tips/#model-observers","title":"Model Observers","text":"<p>Depending on what your package does, it may be interesting for you to know when data is created / deleted. Given that SeAT makes use of Laravel, you have the ability to subscribe to events that occur on any model within SeAT.</p> <p>For example, should a <code>User</code> model get deleted, the <code>deleted</code> event will get fired. Writing an observer class and subscribing to it with <code>\\Seat\\Web\\Models\\User::observer(\\My\\Namespace\\UserObserver::class)</code> will allow you to define a <code>deleted()</code> method inside of your observer class and perform extra logic with the <code>User</code> that got deleted.</p> <p>Examples of where this may be interesting could be if you need to have cleanup code for tables that your package includes.</p> <p>For more information, checkout the Laravel documentation on Eloquent Observers.</p>"},{"location":"developer_guides/development_tips/#useful-seat-specific-features","title":"Useful SeAT-Specific Features","text":""},{"location":"developer_guides/development_tips/#deferred-migrations","title":"Deferred Migrations","text":"<p>Sometimes you might want to run some business logic in a migration. For example, when adding a new column, you might want to fill that column with a computation that is part of your business logic. If you have all the logic inside your migration class, and you don't depend on any other application code, you are good. However, when your migration depends on application code, it is likely that you run into issues later down the line. Your business logic probably assumes that all your migrations have run. However, when calling business logic from migrations, this is not guaranteed.  Later migrations have not yet run, meaning you are likely to run into issues.</p> <p>Seat offers a solution to this: Deferred Migrations. These are functions that can be scheduled in a migration and that run after all other migrations have finished. In your migration, you can schedule a deferred migration like this:</p> <pre><code>\\Seat\\Services\\Facades\\DeferredMigration::schedule(function (){\n    // this closure runs after all migrations have finished. It is save to call business logic from here.\n});\n</code></pre>"},{"location":"developer_guides/development_tips/#injectable-relations","title":"Injectable Relations","text":"<p>Cross-package interaction is at the heart of SeAT. For example, plugins use the ESI data pulled by <code>eveapi</code>. However, there is one issue: While a plugin can always assume that <code>eveapi</code> is there, this is not possible the other way around. The seat core can run without any plugin. This implies that the plugin can have a relation pointing from a plugin model to a core model, but not the other way around.</p> <p>In SeAT, there is a system of injectable relations that helps with this. In short, to any model extending from <code>\\Seat\\Services\\Models\\ExtensibleModel</code>, you can attach relations similar to how you attach observers. </p> <p>First, you create a model extension class containing the relations you want to add to the base model. This extension class should extend from the base model.</p> <p>Second, you register the extension classes in your service provider's boot method like this: <pre><code>BaseModel::injectRelationsFrom(ModelExtension::class);\n</code></pre></p> <p>The relations defined in the model extension class should now be usable on the base model. </p> <p>Even though the model extension extends from the base class and behaves the same for the most part, you should always use the base class in your code, as otherwise observers aren't working properly.</p>"},{"location":"developer_guides/job_queue_flow/","title":"Job Queue Flow","text":""},{"location":"developer_guides/job_queue_flow/#job-queue-flow","title":"Job Queue Flow","text":"<p>When a job is queued, it's instance is serialized and push into the Redis database. Horizon, our jobs orchestrator is taking care of every new jobs falling in redis and push it to an available worker from the targeted queue.</p> <p>With SeAT 4, queues have been renamed and are scoped. This helps to identify load per \"topic\" and ensure better parallel processing of jobs.</p> <p>As shown bellow, queues <code>characters</code>, <code>corporations</code> and <code>public</code> are dedicated to ESI jobs.</p> <ul> <li>Characters queue is processing all jobs directly tied to a character entity (like info, assets, contracts, etc...)</li> <li>Corporations queue is processing all jobs directly tied to a corporation entity (like killmails, jobs, wallets, etc...)</li> <li>Public queue is processing all jobs related to universe (like stations, alliances, sovereignties, etc...)</li> </ul> <p>There is a dedicated queue to handle notifications tasks (like notifying a killmail on Discord). So, you will always get your notifications as fast as possible.</p> <p>The last two other queues (<code>high</code> and <code>default</code>) have a general purpose.</p> <ul> <li>The <code>high</code> queue is dedicated to jobs which have a critical level (like those related to security)</li> <li>The <code>default</code> queue is a bucket collecting all jobs without any other specified queue</li> </ul> <p>The default (and recommended) jobs handling configuration is using auto balancing. This ensures every single queue always have a minimum of workers (1 is the default value).</p> <p>Important</p> <p>There are no ranking in queues, so, the high one is not most important than other in the way jobs are processing. Queue name doesn't influe on their ability to process load. So, please use high queue for really important/critical tasks only.</p> <p></p> <p>An editable draw.io xml to import can be found here: seat_jobs_flow.drawio</p>"},{"location":"developer_guides/notifications_implementation/","title":"Notifications Implementation","text":""},{"location":"developer_guides/notifications_implementation/#developers-guides-notifications-implementation","title":"Developers Guides - Notifications Implementation","text":""},{"location":"developer_guides/notifications_implementation/#introduction","title":"Introduction","text":"<p>SeAT is shipped with a built-in notification system which is able to send message across the world to almost any platform.</p> <p>It is supporting e-mail, Slack and Discord out of the box.</p> <p>However, thanks to Laravel, if you need to support another platform - you simply need to implement the related driver. See official Laravel Notification Channels website to get more about this. </p> <p>Additionally, there is a system to mention certain users when a notification gets sent. Since we don't assume that many people need to implement this for a new platform, there is no written documentation. This is a good starting point to read the code: Config/notifications.mentions.php</p>"},{"location":"developer_guides/notifications_implementation/#configuration","title":"Configuration","text":"<p>All notifications must be declared inside <code>notifications.alerts.php</code>. You will want to create a file named like this in the <code>Config</code> directory of your plugin and then use <code>mergeConfigFrom</code> in your service provider to merge the seat core and plugin notification configuration. Every entry must follow this pattern:</p> <pre><code>'created_user' =&gt; [\n    'label' =&gt; 'notifications::alerts.created_user',\n    'handlers' =&gt; [\n        'mail' =&gt; \\Seat\\Notifications\\Notifications\\Seat\\Mail\\CreatedUser::class,\n        'slack' =&gt; \\Seat\\Notifications\\Notifications\\Seat\\Slack\\CreatedUser::class,\n    ],\n]\n</code></pre> <ul> <li>the entry key <code>created_user</code> must be unique overall system and will identify the very specific notification declaration. It will reference the notification definition composed of <code>label</code> and <code>handlers</code> keys.</li> <li>the <code>label</code> will reference a translation token - this is the value which will appear on user interface into notification settings</li> <li>the <code>handlers</code> key is containers a list of available formatters. There is a formatter per available platform - or so called - channel.</li> <li>the optional <code>visible</code> key hides the notification from the list of available notifications, but you can still use the seat notification infrastructure normally. Realistically, you don't need this for anything.</li> </ul> <p>You can also look at the seat core notifications.alerts.php file as an example.</p>"},{"location":"developer_guides/notifications_implementation/#formatters","title":"Formatters","text":"<p>Formatters are class which will define how message targeting a specific channel must be structured. In upper example, we have two formatters:</p> <ul> <li>\\Seat\\Notifications\\Notifications\\Seat\\Mail\\CreatedUser which is handling mail channel format</li> <li>\\Seat\\Notifications\\Notifications\\Seat\\Slack\\CreatedUser which is handling Slack channel format</li> </ul> <p>Formatter must extend a different abstract class depending on what kind of platform it supports:</p> <ul> <li>Discord: <code>Seat\\Notifications\\Notifications\\AbstractDiscordNotification</code></li> <li>Slack: <code>Seat\\Notifications\\Notifications\\AbstractSlackDiscordNotification</code></li> <li>Mail: <code>Seat\\Notifications\\Notifications\\AbstractMailNotification</code></li> </ul> <p>Every formatter is composed of the following method:</p> <ul> <li><code>populateMessage(Message $message, mixed $notifiable)</code> which will generate the structure message for the target platform. The type of <code>Message</code> differs slightly according to which platform you're on, e.g. on discord it is a <code>Seat\\Notifications\\Services\\Discord\\Messages\\DiscordMessage</code>, on slack it is a <code>Illuminate\\Notifications\\Messages\\SlackMessage</code>.</li> </ul>"},{"location":"developer_guides/notifications_implementation/#observers","title":"Observers","text":"<p>In SeAT, notifications are event based and sent by jobs queued in <code>notifications</code> queue. This prevents to lock system while sending the information.</p> <p>To send your notification, you will listen for system events (ie: a character notification created in the database) in order to dispatch the selected notification.</p>"},{"location":"developer_guides/notifications_implementation/#characters","title":"Characters","text":"<p>All characters related notifications are handled by \\Seat\\Notifications\\Observers\\CharacterNotificationObserver</p> <p>It is waiting for an Eve Online notification targeting a character to be registered and dispatch the related message to the requested platform - if asked for.</p> <p>SeAT is shipped with numerous notifications - but due to the number of existing ones and the fact that there are regularly news notifications created by CCP attached to added features, it might append that a notification isn't handled.</p> <p>You can track such cases using <code>debug</code> log level which will generate a log entry looking like this:</p> <p>Unsupported notification type.\\   type: TheNotificationTypeAsPerESIDefinition (see: https://esi.evetech.net/ui/#/Character/get_characters_character_id_notifications)\\   sender_type: character\\   notification: the YAML structure of the notification</p> <p>You'll find all standard notifications handler related to character into the following namespace: \\Seat\\Notifications\\Notifications\\Characters</p>"},{"location":"developer_guides/notifications_implementation/#corporations","title":"Corporations","text":"<p>Most of the corporations related notifications are handled by \\Seat\\Notifications\\Observers\\CharacterNotificationObserver</p> <p>It is waiting for an Eve Online notification targeting a corporation to be registered and dispatch the related message to the requested platform - if asked for.</p> <p>SeAT is shipped with numerous notifications - but due to the number of existing ones and the fact that there are regularly news notifications created by CCP attached to added features, it might append that a notification isn't handled.</p> <p>You can track such cases using <code>debug</code> log level which will generated a log entry looking like this :</p> <p>Unsupported notification type.\\   type: TheNotificationTypeAsPerESIDefinition (see: https://esi.evetech.net/ui/#/Character/get_characters_character_id_notifications)\\   sender_type: corporation\\   notification: the YAML structure of the notification</p> <p>Alternatively, notifications related to corporation member state are handled by \\Seat\\Notifications\\Observers\\CorporationMemberTrackingObserver</p> <p>You'll find all standard notifications handler related to corporation into the following namespace: \\Seat\\Notifications\\Notifications\\Corporations</p>"},{"location":"developer_guides/notifications_implementation/#killmails","title":"Killmails","text":"<p>All killmails related notifications are handled by \\Seat\\Notifications\\Observers\\KillmailNotificationObserver</p> <p>It is waiting for a killmail being registered and dispatch the related message to the requested platform - if asked for.</p>"},{"location":"developer_guides/notifications_implementation/#squads","title":"Squads","text":"<p>All squads related notifications are handled by \\Seat\\Notifications\\Observers\\SquadApplicationObserver and \\Seat\\Notifications\\Observers\\SquadMemberObserver</p> <p>It is waiting for squads members and applications to be registered and dispatch the related message to the requested platform - if asked for.</p> <p>You'll find all standard notifications handler related to Squads into the following namespace: \\Seat\\Notifications\\Notifications\\Seat</p>"},{"location":"developer_guides/notifications_implementation/#users","title":"Users","text":"<p>All users related notifications are handled by \\Seat\\Notifications\\Observers\\UserObserver</p> <p>It is waiting for a user to be registered and dispatch the related message to the requested platform - if asked for.</p> <p>You'll find all standard notifications handler related to character into the following namespace: \\Seat\\Notifications\\Notifications\\Seat</p>"},{"location":"developer_guides/notifications_implementation/#porting-plugins-from-seat-4-to-5","title":"Porting Plugins from Seat 4 to 5","text":"<p>All notifications continue to work without any changes, even though there have been major refactors. However, to profit of the new mentions system behind discord pings, you need to change a few things to update to the new notification structure:</p> <ul> <li>Start extending from the platform specific classes instead of <code>Seat\\Notifications\\Notifications\\AbstractNotification</code>. </li> <li>Discord: extend <code>Seat\\Notifications\\Notifications\\AbstractDiscordNotification</code></li> <li>Slack: extend <code>Seat\\Notifications\\Notifications\\AbstractSlackNotification</code></li> <li>Mail: extend <code>Seat\\Notifications\\Notifications\\AbstractMailNotification</code></li> <li>Remove the via method. It moved to the abstract notification class.</li> <li>Refactor your public <code>toX()</code> method to a protected <code>populateMessage(MessageType $message, $notifiable)</code>. Instead of creating a new message, use the parameter <code>$message</code>. The type <code>MessageType</code> must be adjusted depending on your platform:</li> <li>discord: <code>Seat\\Notifications\\Services\\Discord\\Messages\\DiscordMessage</code></li> <li>slack: <code>Illuminate\\Notifications\\Messages\\SlackMessage</code></li> <li>mail: <code>Illuminate\\Notifications\\Messages\\MailMessage</code></li> <li>Consider using the <code>Seat\\Notifications\\Traits\\NotificationDispatchTool</code> trait to dispatch notification. It helps to deduplicate the most common logic.</li> </ul> <p>The old notification structure will stop working in seat 6.</p>"},{"location":"developer_guides/package_development/","title":"Package Development","text":""},{"location":"developer_guides/package_development/#developers-guides-package-development","title":"Developers Guides - Package Development","text":""},{"location":"developer_guides/package_development/#introduction","title":"Introduction","text":"<p>So, you want to write a SeAT package? Hopefully this guide helps you along the way! This guide was written while writing the API package for SeAT here. I figured it would be best to try and capture the process to help in case I miss any important details.</p> <p>Be sure to also have a look at the Development Tips page!</p>"},{"location":"developer_guides/package_development/#background-notes","title":"Background notes","text":"<p>I think its important to keep in mind a few things about how SeAT is put together. The most important being a brief description of what each core package offers, and how you can integrate with them. For a breakdown on what the core packages provide, please refer the to [breakdown].</p> <p>SeAT 4 is written on Laravel 6, while SeAT 5 uses Laravel 10. A very good thing to do would be to actually read the documentation top-&gt;bottom and get an idea of what is possible with the framework. SeAT core packages make heavy use of many of the features, based directly of what has been interpreted by this very documentation.</p> <p>If you really want to start contributing packages, but just cant get your head around this whole Laravel thing, then I can suggest you have a look at this excellent free course material covering the basics of what you will encounter in the SeAT codebase. https://laracasts.com/series/laravel-6-from-scratch</p> <p>Other plugins and the SeAT core are also a good learning resource.</p>"},{"location":"developer_guides/package_development/#getting-started","title":"Getting started","text":"<p>The very first thing to do is prepare the empty git repository on say Github, as well as the composer package itself. Clone a clean repository, and run <code>composer init</code>, answering any questions. Once that is done, edit the resultant <code>composer.json</code> and prepare the <code>autoload</code> block. SeAT core follows the PSR-4 autoloading standard. I will suggest you do the same. For some more detailed composer info, refer to the docs here. For the API package, I am going to autoload Seat\\Api from the <code>src</code> directory using PSR-4.</p>"},{"location":"developer_guides/package_development/#service-provider","title":"Service provider","text":"<p>As mentioned in the package breakdowns, the eveseat/seat repository bootstraps packages via service providers or package discovery. This is actually a Laravel convention that SeAT just follows. To get our package ready, we need to create a service provider. For the API package, I create an <code>ApiServiceProvider</code> class in <code>src/</code> directory which extends <code>Seat\\Services\\AbstractSeatPlugin</code>. Our packages file structure now looks as follows:</p> <pre><code>\u251c\u2500\u2500 composer.json\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 ApiServiceProvider.php\n</code></pre> <p>Hint</p> <p>The <code>AbstractSeatPlugin</code> class is extending Laravel <code>ServiceProvider</code> class and ship you with useful methods that help to register your plugin in the stack (including version discovery, permissions registration, etc...). You must use it rather than the standard one, especially if you want permissions and get your packages in Settings &gt; SeAT Settings &gt; SeAT Module Versions pane.</p>"},{"location":"developer_guides/package_development/#package-structure","title":"Package structure","text":"<p>From here you pretty much free to do what you want. How you structure the package will obviously depend on what exactly your package provides. In principle, I prefer to follow the same package structure as Laravel does for web / console features. Since we are going to be providing web features with the API, we will quickly create a few folders in preparation for this. I know beforehand that we are going to need a model to store API tokens; middleware to authenticate API requests; routes and controllers for the actual api logic (preferably making use of the eveapi/services repository classes for data access) as well as a few web views for administrators to generate API tokens for applications. With that in mind, the initial structure looks as follows:</p> <pre><code>\u251c\u2500\u2500 composer.json\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 ApiServiceProvider.php\n    \u251c\u2500\u2500 Config\n    \u251c\u2500\u2500 Http\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 Controllers\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 Middleware\n    \u251c\u2500\u2500 Models\n    \u251c\u2500\u2500 database\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 migrations\n    \u2514\u2500\u2500 resources\n        \u2514\u2500\u2500 views\n</code></pre> <p>This will obviously change as we progress building the package.</p>"},{"location":"developer_guides/package_development/#routes-and-controllers","title":"Routes and controllers","text":"<p>To start testing the API, we need to add a route and controller to process some requests and responses. My <code>routes.php</code> file will have a global <code>Route::group()</code> to encapsulate the routes in the Seat\\Api namespace as well as prefix them with <code>api/</code>.</p> <pre><code>// File: routes.php\nRoute::group([ 'namespace' =&gt; 'Seat\\Api\\Http\\Controllers',\n    'prefix' =&gt; 'api'\n], function () {\n    // Logic here\n});\n</code></pre> <p>See the final product here for a more complete example.</p> <p>Next, I add some logic with a route to <code>/</code>, update the base frameworks <code>composer.json</code> to autoload the Seat\\Api namespace from the directory where my package lives, run <code>composer dump-autoload</code> and add the service provider to the eveseat/seat repositories <code>app.php</code> providers array. Lastly, I add a method to the service provider to load the routes and call it form the <code>boot()</code> method in the generated stub.</p> <p>See the complete service provider here</p> <pre><code>/**\n* Include the routes\n*/\npublic function add_routes()\n{\n    if (!$this-&gt;app-&gt;routesAreCached()) {\n        include __DIR__ . '/Http/routes.php';\n    }\n}\n</code></pre> <p>As a final test, I check that my route is accessible from a booted SeAT app. :)  </p>"},{"location":"developer_guides/package_development/#routes","title":"Routes","text":""},{"location":"developer_guides/package_development/#access-control","title":"Access Control","text":"<p>Obviously, some routes are not for everyone's eyes. SeAT comes with middleware that can be used to filter out requests that may not be authorized for your route. As can be seen in the example below (from here), we are filtering out requests to <code>api-admin</code> for only superusers.</p> <pre><code>Route::group([\n        'namespace'  =&gt; 'Admin',\n        'middleware' =&gt; ['auth', 'can:global.superuser'], // The ACL specification.\n        'prefix'     =&gt; 'api-admin'\n    ], function () {\n        Route::get('/', [\n            'as'   =&gt; 'seatcore::api-admin.list',\n            'uses' =&gt; 'ApiAdminController@listTokens']);\n    });\n</code></pre> <p>I suggest you have a look at the <code>eveseat/web</code> packages routes definitions for more examples on how the middleware is used. https://github.com/eveseat/web/tree/master/src/Http/Routes</p> <p>It is recommended that you scope the route name defined in <code>'as' =&gt; 'seatcore::api-admin.list'</code>. For example all routes from the seat core start with <code>seatcore</code> like this: <code>seatcore::my.route.to.someting</code>. You should follow a similar format: <code>seat&lt;plugin name&gt;::&lt;route&gt;</code></p>"},{"location":"developer_guides/package_development/#middleware","title":"Middleware","text":"<p>To auth our API requests, we are going to go with token based authentication for now. We want users to present us with a <code>X-Token</code> header (from a valid allowed src IP address) before they may proceed with their request. To do this, we will filter requests using middleware. Thankfully, again, Laravel comes with a command to stub us some empty middleware. Run <code>php artisan make:middleware ApiToken</code> and copy it to your projects <code>Middleware</code> folder. Next we should register the middleware in our service provider. I do this by adding a method and calling it in <code>boot()</code>.</p> <p>See the complete middleware here</p> <pre><code>/**\n * Include the middleware needed\n *\n * @param $router\n */\npublic function add_middleware($router)\n{\n    // Authenticate checks that the token is valid\n    // from an allowed IP address\n    $router-&gt;middleware('api.auth', ApiToken::class);\n}\n</code></pre>"},{"location":"developer_guides/package_development/#views","title":"Views","text":"<p>Although almost all of our interfacing with this package will be via the json api endpoints, we need to add a few routes that will give an administrator the ability to generate API tokens as well as view logs etc. This will be for an administrator, so we will re-use the ACL features provided by the <code>eveseat/web</code> package to ensure that only admins an access our api-admin routes. Views live in <code>resources/views</code> and are bootstrapped to the <code>api</code> namespace in the service provider. See the service provider here for an example.</p> <p>Note how we are re-using views that exist in the <code>web</code> namespace. All we have to do is extend one of the grids like here and start without our blade template.</p>"},{"location":"developer_guides/package_development/#sidebar-menu","title":"Sidebar menu","text":"<p>Integrating with the sidebar is also really easy. All you have to do is create a config file, bootstrap it in the service provider and viola. The config file itself has a set structure for the <code>web</code> package to interpret and can be seen here.</p> <pre><code>return [\n    'api' =&gt; [\n        'permission'    =&gt; 'global.superuser',\n        'name'          =&gt; 'Api Tokens',\n        'icon'          =&gt; 'fas fa-exchange',\n        'route_segment' =&gt; 'api-admin',\n        'entries'       =&gt; [\n            [   // Manage API Tokens\n                'name'  =&gt; 'Manage',\n                'icon'  =&gt; 'fas fa-key',\n                'route' =&gt; 'api-admin.list'\n            ]\n        ]\n    ]\n];\n</code></pre> <p>The format is generally an array, whereby the first key is the name of your package (<code>api</code> in this case). Thereafter you can specify the main entry, and any sub entries you want to add. The <code>route</code> key should refer to the named route. The sidebar loader will resolve the route itself for you. If you have any permissions requirements for your package, the <code>permission</code> key can be used together with a required SeAT permission to render the view.</p>"},{"location":"developer_guides/package_development/#character-submenus","title":"Character submenus","text":"<p>Integrating with the character sub menus is also really easy. Just like the sidebar, all you have to do is create a config file, bootstrap it in the service provider and viola. The namespace should be named <code>package.character.menu</code> in your service provider. A sample config file can be seen below:</p> <pre><code>// file: package.character.menu.php\nreturn [\n    [\n        'name'           =&gt; 'Research',\n        'permission'     =&gt; 'character.research',\n        'highlight_view' =&gt; 'research',\n        'route'          =&gt; 'character.view.research'\n    ]\n];\n</code></pre>"},{"location":"developer_guides/package_development/#corporation-submenus","title":"Corporation submenus","text":"<p>Integrating with the corporation sub menus is also really easy. Just like the sidebar and character menus, all you have to do is create a config file, bootstrap it in the service provider and viola. The namespace should be named <code>package.corporation.menu</code> in your service provider. A sample config file can be seen below:</p> <pre><code>// file: package.corporation.menu.php\nreturn [\n    [\n        'name'           =&gt; 'Research',\n        'permission'     =&gt; 'corporation.research',\n        'highlight_view' =&gt; 'research',\n        'route'          =&gt; 'corporation.view.research'\n    ]\n];\n</code></pre>"},{"location":"developer_guides/package_development/#bootstrapping-menu-items","title":"Bootstrapping menu items","text":"<p>In the above items, we refer to the files needing to be bootstrapped via the service provider. All this really means is that we have to tell the Laravel application where to find configuration information for a namespace. So, if we wanted to add a sidebar item, we would add the following line to the <code>register()</code> method of the service provider:</p> <pre><code>// Include this packages menu items\n$this-&gt;mergeConfigFrom(__DIR__ . '/Config/package.sidebar.php', 'package.sidebar');\n</code></pre> <p>The first argument is the file with the sidebar definitions, the second is the namespace.</p>"},{"location":"developer_guides/package_development/#permissions","title":"Permissions","text":"<p>You are able to register and use your own permissions for use within SeAT. This is relatively simple and done by creating a config file in the location <code>Config/Permissions/package.permissions.php</code>. It should return an array of the following format:</p> <pre><code>[\n    'sheet' =&gt; [\n        'label'       =&gt; 'Grant access to Character Sheet',\n        'description' =&gt; 'The Character Sheet contains basic information....',\n        'division'    =&gt; 'financial',\n    ],\n    'intel' =&gt; [\n        'label'       =&gt; 'web::permissions.character_intel_label',\n        'description' =&gt; 'web::permissions.character_intel_description',\n        'division'    =&gt; 'military',\n    ],\n    'planetary' =&gt; [\n        'label'       =&gt; 'web::permissions.character_planetary_label',\n        'description' =&gt; 'web::permissions.character_planetary_description',\n        'division'    =&gt; 'industrial',\n    ],\n];\n</code></pre> property mandatory purpose label yes The displayed name of your permission. It must be a translation token. description The displayed permission description. It should help user to determine what the permission is doing. It must be a translation token. division It will show a \"category\" icon to help user figures what will be impacted by the permission. Value can be one of <code>military</code>, <code>assets</code>, <code>financial</code>, <code>industrial</code>. gate If you need to manage your permission with a custom policy, you can provide a policy FQCN. <p>The definition key (<code>sheet</code>, <code>intel</code>, <code>planetary</code> in the upper sample) will be used as permission unique identifier by the system. This is the one stored in the database, together with scope.</p> <p></p> <p>Info</p> <p>By default, if no gate are provided, those shipped in core will be used according to this pattern :</p> <ul> <li>character scope: CharacterPolicy, this will require an instance of CharacterInfo to be used in your checks</li> <li>corporation scope: CorporationPolicy, this will require an instance of CorporationInfo to be used in your checks</li> <li>anything else: GlobalPolicy</li> </ul> <p>You'll find policy sample at this location.</p> <p>In SeAT 4, a permission is made of a scope and an ability. The ability is defined by the permissions configuration file and the scope is defined on registration.</p> <p>This config file is then loaded from your app service provider as below:</p> <pre><code> $this-&gt;registerPermissions(__DIR__ . '/Config/Permissions/package.permissions.php', 'package');\n</code></pre>"},{"location":"developer_guides/package_development/#database","title":"Database","text":"<p>For our API package, we have a database requirement. We need to store api tokens and the ip address that is allowed to use them. We are also going to store an access log (based on the config setting). We create migrations and models just like you would for a base Laravel 6 application. The only thing to remember is that your migrations for your package must be published (and specified in your service provider).</p> <p>Registering these migrations looks like the following:</p> <pre><code>$this-&gt;loadMigrationsFrom(__DIR__ . '/database/migrations/');\n</code></pre>"},{"location":"developer_guides/package_development/#jobs-schedules","title":"Jobs &amp; Schedules","text":"<p>Many packages need to run certain actions in a regular interval. For example, a mining tax plugin might want to calculate taxes once a day. This can be done with the job queue and the schedule system.</p> <p>First, create your job containing the logic you want to run on a schedule. You can refer to the laravel docs for this.</p> <p>Next, create an artisan command that launches your job. Again, you can refer to the laravel docs for this.</p> <p>In a last step, we create a database seeder that adds your command to the schedule. In your <code>database/seeders/</code> directory, create a class that extends from <code>\\Seat\\Services\\Seeding\\AbstractScheduleSeeder</code>. The required <code>getSchedules()</code> function should return an array describing the command you wish to schedule, according to the following format: <pre><code>public function getSchedules(): array\n{\n    return [\n        [   \n            'command' =&gt; 'horizon:snapshot', // your artisan command\n            'expression' =&gt; '*/5 * * * *', // this is a cron expression describing how often your command should be run\n            'allow_overlap' =&gt; false,\n            'allow_maintenance' =&gt; false,\n            'ping_before' =&gt; null,\n            'ping_after' =&gt; null,\n        ],\n        [   \n            'command' =&gt; 'other:command',\n            'expression' =&gt; '*/5 * * * *',\n            'allow_overlap' =&gt; false,\n            'allow_maintenance' =&gt; false,\n            'ping_before' =&gt; null,\n            'ping_after' =&gt; null,\n        ],\n    ];\n}\n</code></pre></p> <p>You can let the <code>getDeprecatedSchedules()</code> function return an empty array for now.</p> <p>Lastly, register your seeder in your service provider's <code>register()</code> method using <pre><code>$this-&gt;registerDatabaseSeeders(MyScheduleSeeder::class);\n</code></pre></p> <p>When you restart the stack, the seeder should add the command to the schedule. For testing, it might also be useful to run the seeder manually using  <code>` php artisan db:seed --class=Seat\\\\Services\\\\Database\\\\Seeders\\\\PluginDatabaseSeeder</code></p>"},{"location":"developer_guides/package_development/#releasing-the-plugin","title":"Releasing the plugin","text":"<p>The usual setup is to host the code on github and distribute the code via packagist.  When you submit your plugin on packagist, it will be installable like the other plugins by adding <code>&lt;vendor&gt;/&lt;package&gt;</code> to the appropriate section of your <code>.env</code> file.</p>"},{"location":"developer_guides/seat_api/","title":"SeAT API","text":""},{"location":"developer_guides/seat_api/#introduction","title":"Introduction","text":"<p>SeAT has a REST API. Endpoints are protected by an access token that is limited by IP address. For every IP address that wants to make API requests to SeAT, a unique token is required. API Tokens have no concept of ACL's. The API should primarily be used for integrations with other systems.</p>"},{"location":"developer_guides/seat_api/#definitions","title":"Definitions","text":"<p>Currently, all API endpoints live at <code>&lt;seat url&gt;/api/&lt;version&gt;</code> where <code>&lt;seat url&gt;</code> is the full url to your SeAT instance and <code>&lt;version&gt;</code> is the API version you wish to interact with.</p> <p>Since SeAT 3.0, API documentation is generated from source code annotations and presented via a Swagger UI. As a result, endpoint documentation is now directly available on your instance at the following address <code>&lt;seat url&gt;/api/documentation</code>. A link to the documentation is also provided on the API key management page available to users with the Superuser role.</p> <p>Swagger JSON</p> <p>If you get an error when viewing the API documentation that complains about a file called <code>api-docs.json</code>, make sure that you ran the <code>php artisan l5-swagger:generate</code> command as part of the installation and upgrade routines.</p>"},{"location":"developer_guides/seat_api/#authentication","title":"Authentication","text":"<p>Authentication to the SeAT API is done via a <code>X-Token</code> header. A token may be obtained by browsing to the API settings page in the SeAT WebUI and generating one. A sample request using <code>curl</code> with an authentication token can be seen below:</p> <pre><code>$ curl -X GET -H \"X-Token:123456\" -H \"Accept: application/json\" http://localhost:8000/api/v1/key\n*   Trying ::1...\n* Connected to localhost (::1) port 8000 (#0)\n&gt; GET /api/v1/key HTTP/1.1\n&gt; Host: localhost:8000\n&gt; User-Agent: curl/7.43.0\n&gt; Accept: application/json\n&gt; X-Token:123456\n&gt;\n&lt; HTTP/1.1 200 OK\n&lt; Host: localhost:8000\n&lt; Connection: close\n&lt; Cache-Control: no-cache\n&lt; Date: Sat, 28 Nov 2015 22:27:12 GMT\n&lt; Content-Type: application/json\n</code></pre>"},{"location":"developer_guides/seat_api/#content-type","title":"Content-Type","text":"<p>Make sure you specify the Accepted content-type header as <code>application/json</code>. When using <code>cURL</code>, you can specify it with <code>-H</code></p> <p>Example:</p> <pre><code>$ curl -X POST https://seat.testsite.local/api/v1/key -H \"Accept: application/json\" -H \"X-Token: L3SxgdX4XUw6pVWVSCftgsh16eAbBF3D\" -d \"key_id=123&amp;v_code=123\"\n{\"v_code\":[\"The v code must be 64 characters.\"]}\n</code></pre> <p>If you don't do this, the API will respond with a redirect and not give you the expected content.</p>"},{"location":"developer_guides/seat_api/#errors","title":"Errors","text":"<p>All SeAT API responses will include the appropriate HTTP response codes. You should check this for error handling purposes. Some sample response codes could be:</p> Code Status Description 200 OK The request was successful. 404 Not Found The requested endpoint could not be found. 422 Unprocessable Entity Typically, input validation has failed. The response json should contain the errors. 500 Internal Server Error Something bad has happened. Check the server and Laravel log files for more details."},{"location":"developer_guides/updating_plugins/","title":"Updating Plugins","text":""},{"location":"developer_guides/updating_plugins/#updating-plugins","title":"Updating Plugins","text":"<p>This page aims to help with porting a SeAT plugin to a newer version of seat.</p>"},{"location":"developer_guides/updating_plugins/#from-seat-4","title":"From SeAT 4","text":"<p>SeAT 5 mainly upgrades the php and laravel version as well as all dependencies to their newest version. However, there are a few other breaking changes that can't be ignored.</p> <ul> <li>PHP 8.2: SeAT now runs on php 8.2, enabling new features like enums and better type hinting, but also breaking a few things.</li> <li>Route Prefixing: All routes from the seat core start with <code>seatcore::</code>. For example, <code>notifications.integrations.list</code> turns into <code>seatcore::notifications.integrations.list</code>. If your plugin uses routes pointing to the seat core, you will have to update them.</li> <li>Models: With SeAT 5, the <code>services</code> packages starts to ship a <code>ExtensibleModel</code> class. Plugins can inject relation into these models, fo example from an eveapi model to a plugin model.    It is recommended that all models start extending from <code>\\Seat\\Services\\Models\\ExtensibleModel</code>. It is enough to just switch from <code>MyClass extend Model</code> to <code>MyClass extends ExtensibleModel</code></li> <li>Notifications: All notifications from SeAT 4 continue to work, but by updating them you can enable more features like discord pings. See the notifications guide for more details.</li> <li>The <code>Seat\\Eveapi\\Jobs\\Middleware\\WithoutOverlapping</code> job middleware backport is now provided by laravel and got removed from the SeAT core. Use <code>Illuminate\\Queue\\Middleware\\WithoutOverlapping</code> instead. Just swapping the import should be enough, as they are compatible.</li> <li>Some, but not all ways of exporting data from DataTables are broken. Just check whether they work and fix if required.</li> <li>There are a few minor breaking changes between Laravel 6 and 10:</li> <li><code>MyJob::dispatchNow()</code> got replaced with <code>MyJob::dispatchSync()</code></li> <li>For a full list, head over to the laravel documentation.</li> </ul>"},{"location":"developer_guides/updating_plugins/#from-seat-3","title":"From SeAT 3","text":"<p>If you're upgrading a SeAT 3.x plugin, the cheat sheet bellow will probably helps you.</p> SeAT 3.x SeAT 4.x Purpose <code>auth()-&gt;user()</code> <code>auth()-&gt;user()</code> Retrieve the currently authenticated user. <code>auth()-&gt;user()-&gt;group-&gt;main_character</code> <code>auth()-&gt;user()-&gt;main_character</code> Retrieve the main character from the currently authenticated user. <code>auth()-&gt;user()-&gt;group-&gt;main_character-&gt;name</code> <code>auth()-&gt;user()-&gt;name</code> Retrieve the main character name from the currently authenticated user. <code>auth()-&gt;user()-&gt;group-&gt;characters</code> <code>auth()-&gt;user()-&gt;characters</code> Retrieve all characters from the currently authenticated user. <code>auth()-&gt;user()-&gt;refresh_token</code> <code>CharacterInfo()-&gt;refresh_token</code> Retrieve the refresh token attached to a character. <code>auth()-&gt;user()-&gt;group-&gt;refresh_tokens</code> <code>auth()-&gt;user()-&gt;refresh_tokens</code> Retrieve all refresh tokens attached to authenticated user. <p>Also, if you need it, a table called <code>mig_groups</code> is available in database containing a list of all converted group into standalone user. This table will stay here until next SeAT major update.</p> Field Purpose <code>group_id</code> The unique ID from SeAT 3 user group <code>old_user_id</code> The unique ID from SeAT 3 user (match to Character ID) <code>new_user_id</code> The unique ID from SeAT 4 user <code>main_character_id</code> The SeAT 3 registered main character ID - or random from the User Group if none were set"},{"location":"installation/docker_installation/","title":"Docker Installation (5.x)","text":""},{"location":"installation/docker_installation/#docker","title":"Docker","text":"<p>Docker is ideally the installation route you want to go. Docker enables us to run SeAT on any platform capable of running docker itself (which includes Windows!). Additionally, upgrades and service maintenance are really low effort as you don't have to care about any dependencies. All of it is maintained within a docker stack, DockerHub and the GitHub Container Registry.</p> <p>Windows owner recommendation</p> <p>If you plan on running Docker on Windows, for the best performance it is suggested that you run Docker using the Windows Subsystem for Linux 2 (WSL2) backend, available starting in Windows 10/Windows Server 20H1 (build 2004) releases.</p> <p>Windows owner special installation path</p> <p>If you are using Docker on Windows, you will need to use the Manual Deployment option below.</p> <p>Tip</p> <p>Before starting the installation process, be sure you read this complete document first. It will help you understand all the steps from an installation process.</p> <p>If you feel like docker might not be your cup of tea, checkout some of the other getting started guides that are available.</p> <p>Eve Application and ESI</p> <p>SeAT uses CCP's ESI service in order to retrieve EVE Online-related information. Before you can make any authenticated calls to ESI, you have to register a third-party EVE application on the developers portal. This is an absolute must for SeAT to be of any use. The configuration of this step is covered in a later stage of the documentation.</p>"},{"location":"installation/docker_installation/#internal-container-setup-overview","title":"Internal Container Setup Overview","text":"<p>The setup for SeAT's docker installation orchestrated using docker-compose. With docker-compose, we can use <code>YAML</code> files to define the entire stack complete with all the dependencies required to run SeAT. A pre-built and recommended compose file (which is also used by the bootstrapping script) is hosted in the seat-docker repository here.</p> <p>The official SeAT repository for Docker is shipped with a total of 4 <code>YAML</code> files, allowing you both flexibility and understandability of the overall stack. A high-level overview of its contents is:</p> <ul> <li>A main <code>docker-compose.yml</code> file in which are listed SeAT services (<code>front</code> to serve web ui, <code>worker</code> to process jobs, <code>scheduler</code> to manage repetitive tasks and <code>cache</code> to store jobs queue)</li> <li>A database <code>docker-compose.mariadb.yml</code> file in which is listed a <code>mariadb</code> service - this way, you can replace mariadb by another supported database engine</li> <li>A Traefik <code>docker-compose.traefik.yml</code> file in which is listed a <code>traefik</code> service - this way you can simply and safely server your SeAT frontend to the rest of the world</li> <li>An alternative to Traefik <code>docker-compose.proxy.yml</code> file in which is adapted <code>front</code> SeAT container to be server behind a reverse proxy of your choice</li> <li>A volume called <code>mariadb-data</code> and <code>seat-storage</code> is defined. These are the most important volumes as they contain all SeAT data. You should configure a backup solution for them!</li> <li>The environment is configured using a top-level <code>.env</code> file.</li> <li>Only one port is exposed by default. This is <code>tcp/8080</code>. It can be connected to in order to access the SeAT web interface.</li> <li>When using the stack with Traefik (which is the easier and recommended approach), ports <code>tcp/80</code> and <code>tcp/443</code> are exposed and <code>tcp/8080</code> remain unbound.</li> <li>All containers are configured to restart on failure, so if your server reboots or a container dies for whatever reason it should automatically start up again.</li> </ul> <p>The table bellow is listed overall consumed Docker image, including SeAT custom one - together with their source repository.</p> Image Name Image Repository <code>mariadb:10.11</code> https://hub.docker.com/_/mariadb/ <code>redis:5-alpine</code> https://hub.docker.com/_/redis/ <code>traefik:2.10</code> https://hub.docker.com/_/traefik <code>ghcr.io/eveseat/seat:5</code> https://github.com/eveseat/seat-docker/pkgs/container/seat"},{"location":"installation/docker_installation/#seat-docker-installation","title":"SeAT Docker Installation","text":"<p>Depending on whether you already have <code>docker</code> and <code>docker compose</code> already installed, you may choose how to start the installation. If you already have the required tooling installed and running their latest versions, all you need to do is download the latest SeAT Docker template archive to get started.</p>"},{"location":"installation/docker_installation/#automated-setup-script","title":"Automated Setup Script","text":"<p>If you do not have the required software installed yet, consider running the bootstrap script that will check for <code>docker</code> and <code>docker compose</code>, install it and start the SeAT stack up for you. The script can be run with:</p> <pre><code>bash &lt;(curl -fsSL https://raw.githubusercontent.com/eveseat/seat-docker/master/bootstrap.sh)\n</code></pre> <p>Once the script is finished, you can skip to the monitoring the stack section of this guide.</p> <p>If you don't want to run this script, follow along in the next section of this guide.</p>"},{"location":"installation/docker_installation/#manual-deployment","title":"Manual Deployment","text":""},{"location":"installation/docker_installation/#docker-download","title":"Docker Download","text":"<p>If you do not have <code>docker</code>, install it now.</p> LinuxWindows <p>Under Linux, you can achieve this action by using the following command as <code>root</code>:</p> <pre><code>sh &lt;(curl -fsSL get.docker.com)\n</code></pre> <p>Under Windows, you can achieve this action by downloading and installing Docker Desktop.</p>"},{"location":"installation/docker_installation/#docker-compose-download","title":"Docker-compose Download","text":"<p>If you do not have <code>docker compose</code>, install it now with the following command as <code>root</code> (Docker Compose is included with Docker Desktop on Windows):</p> <pre><code># Downloads and install docker compose from Docker repository\nsudo apt-get update\nsudo apt-get install docker-compose-plugin\n</code></pre>"},{"location":"installation/docker_installation/#docker-compose-working-directory","title":"Docker compose working directory","text":"<p>With <code>docker</code> and <code>docker compose</code> ready, create yourself a directory in <code>/opt</code> with <code>mkdir -p /opt/seat-docker</code> and <code>cd</code> to it. Remember this directory as you will need to come back to it often.</p> <p>On Windows, create the <code>C:\\seat-docker</code> directory with <code>mkdir C:\\seat-docker</code> and <code>cd</code> to it.</p>"},{"location":"installation/docker_installation/#seat-docker-composeyml-and-env-file","title":"SeAT docker-compose.yml and .env File","text":"<p>Then, download the SeAT Docker template archive with:</p> LinuxWindows <pre><code>curl -fsSL https://github.com/eveseat/seat-docker/archive/refs/heads/master.zip -o seat-docker.zip\n</code></pre> <pre><code>Invoke-WebRequest -Uri https://github.com/eveseat/seat-docker/archive/refs/heads/master.zip -OutFile seat-docker.zip\n</code></pre> <p>Next, decompress the template archive:</p> LinuxWindows <pre><code>unzip seat-docker.zip -d /opt/seat-docker -j\n</code></pre> <pre><code>Expand-Archive -Path c:\\seat-docker\\seat-docker.zip -DestinationPath c:\\seat-docker\n</code></pre> <p>Next, we will rename the file .env.example to .env in the root directory of seat-docker</p> LinuxWindows <pre><code>mv /opt/seat-docker/.env.example /opt/seat-docker/.env\n</code></pre> <pre><code>Rename-Item -Path \"c:\\seat-docker\\.env.example\" -NewName \".env\"\n</code></pre> <p>Next, we will generate a unique application key - this is used internally for encryption:</p> LinuxWindows <pre><code>sed -i -- 's/APP_KEY=insecure/APP_KEY='$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c32 ; echo '')'/g' .env\n</code></pre> <pre><code>$appkey = (-join ((65..90) + (97..122) | Get-Random -Count 32 | % {[char]$_})); (Get-Content .env -Raw) -replace \"APP_KEY=insecure\", \"APP_KEY=$appkey\" | Set-Content .env\n</code></pre>"},{"location":"installation/docker_installation/#seat-docker-configuration","title":"SeAT docker configuration","text":"<p>Open up the <code>.env</code> file in a text editor and fill in a few of the configuration items needed.</p> <ul> <li><code>PROXY_BACKEND_HTTP_PORT</code> adapt to any integer of your convenience between 1 and 65535 in case you plan to serve SeAT behind a reverse proxy.</li> <li><code>TRAEFIK_ACME_EMAIL</code> adapt with your own e-mail address in case you plan to serve SeAT behind Traefik.</li> <li><code>SEAT_DOMAIN</code> should be set to the domain your installation lives on and on which SeAT UI will be served.  </li> <li><code>DB_PASSWORD</code> must be adapt with a strong password of your own - it will be used as SeAT credential for its database.</li> </ul> <p>Warning</p> <p>The <code>DB_PASSWORD</code> value have to and must be changed only once - before any start of the overall stack. As soon as the database container is created, SeAT user account is initialized with the <code>DB_PASSWORD</code> value. Changing it after the initial startup will prevent the stack to boot.</p> <p>Also, at the initial startup, the root password from the database container will be shown in logs. You should consider taking a note of it - otherwise you will no longer have a way to recovery of a critical outage (ie: misconfiguration, etc...)</p> <p>Finally, in case you plan to serve SeAT using Traefik, create an ACME configuration file with:</p> <pre><code>mkdir acme\ntouch acme/acme.json\nchmod 600 acme/acme.json\n</code></pre> <p>Info</p> <p>SeAT docker template is shipped with Traefik to hide your container behind a proxy and securing traffic up to it. In case you want to manage traffic proxying and certification on your own, you must use <code>docker-compose.proxy.yml</code> file on startup.</p> <p>Warning</p> <p>The location of the <code>docker-compose.yml</code> and <code>.env</code> files are important. You need to <code>cd</code> back to the directory where these are stored in order to be able to execute commands for this stack at a later stage.</p> <p>Also, be sure you provide a valid e-mail address as it will be used to register your account against Let's Encrypt in case you plan to serve SeAT with Traefik. For those unfamiliar with this, it's CA that provides valid certificates for free.</p>"},{"location":"installation/docker_installation/#esi-configuration","title":"ESI Configuration","text":"<p>As mentioned at the start of the guide, it is necessary for you to configure ESI. For instructions on how to do this, please refer to the ESI Setup Guide.</p> <p>With the configuration files ready, start up the stack with:</p> Using TraefikUsing proxy <pre><code>docker compose -f docker-compose.yml -f docker-compose.mariadb.yml -f docker-compose.traefik.yml up\n</code></pre> <pre><code>docker compose -f docker-compose.yml -f docker-compose.mariadb.yml -f docker-compose.proxy.yml up\n</code></pre>"},{"location":"installation/docker_installation/#monitoring-the-stack","title":"Monitoring the Stack","text":"<p>Knowing what is going on inside your containers is crucial to understanding how everything is running as well as useful when debugging any problems that may occur. While the containers are starting up or have been running for a while, you can always <code>cd</code> to the directory where your <code>docker-compose.yml</code> file lives and run the <code>logs</code> command to see the output of all the containers in the stack. For example:</p> <pre><code>cd /opt/seat-docker\ndocker compose logs --tail 10 -f\n</code></pre> <p>These commands will <code>cd</code> to the directory containing the stacks <code>docker-compose.yml</code> file and run the <code>logs</code> command, showing the last 10 log entries and then printing new ones as they arrive. If you leave away the <code>--tail 10</code>part, you can view all logs since the container startup.</p>"},{"location":"installation/docker_installation/#configuration-changes","title":"Configuration Changes","text":"<p>All the relevant configuration lives inside the <code>.env</code> file, next to your <code>docker-compose.yml</code> file. Modify their values by opening it in a text editor, making the appropriate changes, and saving it again. Once that is done, restart the container environment:</p> Using TraefikUsing proxy <pre><code>docker compose -f docker-compose.yml -f docker-compose.mariadb.yml -f docker-compose.traefik.yml up -d\n</code></pre> <pre><code>docker compose -f docker-compose.yml -f docker-compose.mariadb.yml -f docker-compose.proxy.yml up -d\n</code></pre> <p>Success</p> <p>You made it! Use a browser and browse to the domain / subdomain of your server to access SeAT!</p>"},{"location":"installation/manual_installation/","title":"Manual Installation (5.x)","text":""},{"location":"installation/manual_installation/#manual-installation","title":"Manual Installation","text":"<p>This guide attempts to explain how to manually install SeAT onto an Ubuntu Server. A small amount of Linux experience is preferred when it comes to this guide, although it is not entirely mandatory.</p> <p>Info</p> <p>This guide has been written targetting Ubuntu. However, you can use it to deploy SeAT on any linux distribution. Just be sure you adapt commands to targetted distribution (mostly those related to the package manager).</p> <p>Hint</p> <p>Before starting to do anything, be sure you read the complete workflow once. It will help you to understand all steps from the installation process.</p> <p>Eve Application and ESI</p> <p>SeAT consumes CCP's ESI service in order to retrieve EVE Online related information. Before you can make any authenticated calls to ESI, you have to register a third party EVE application on the developers portal. This is an absolute must for SeAT to be of any use. The configuration of this step is covered in a later stage of the documentation.</p>"},{"location":"installation/manual_installation/#getting-started","title":"Getting started","text":"<p>We are going to assume you have root access to a fresh Ubuntu Server. Typically access is gained via SSH. All of the below commands are to be entered in the SSH terminal session for the installation &amp; configuration of SeAT. If the server you want to install SeAT on is being used for other things too (such as hosting MySQL databases and or websites), then please keep that in mind while following this guide.</p> <p>Packages are installed using the <code>aptitude</code> package manager as the <code>root</code> user.</p>"},{"location":"installation/manual_installation/#os-installation","title":"OS Installation","text":""},{"location":"installation/manual_installation/#operating-system","title":"Operating System","text":"<p>Before we get to installing SeAT, lets ensure that your operating system is up to date. We can do that with basics :</p> <ul> <li><code>apt-get update</code> to refresh the repositories cache.</li> <li><code>apt-get full-upgrade</code> to update any installed packages.</li> <li><code>reboot</code> in order to ensure any updated software is the current running version.</li> <li><code>apt-get autoremove</code> (after the reboot) to cleanup any unneeded packages.</li> </ul>"},{"location":"installation/manual_installation/#database","title":"Database","text":"<p>SeAT relies heavily on a database to function. Everything it learns is stored here, along with things such as user accounts for your users. It comes without saying that database security is a very important aspect too. So, ensure that you choose very strong passwords for your installation where required.</p> <p>SeAT officially supports just MariaDB. Using MySQL or PostreSQL might appear to work on the surface, however it is likely that you will run into issues due to differences between the databases later down the line, and almost no testing with them is done during development.</p> <p>We need to ensure that we have the latest MariaDB installed. To help with this, MariaDB provides an official repository to get the latest versions.</p> <p>To download and install the repo, you need <code>curl</code>. Install it with:</p> <pre><code>apt-get install curl\n</code></pre> <p>Let's add this repository with:</p> <pre><code>curl -sS https://downloads.mariadb.com/MariaDB/mariadb_repo_setup | bash\n</code></pre> <p>With the repository now setup, lets install the database server:</p> <p>Warning<p>During the installation, you may be asked to set a password for the <code>root</code> MariaDB user account. Make sure you set a long, strong password and remember it. It will be needed for the next step.</p> </p> <pre><code>apt-get install mariadb-server\n</code></pre> <p>Before we can configure the database, we have to start it:</p> <pre><code>systemctl enable mariadb.service\n</code></pre> <p>Next, we are going to secure the database server by removing anonymous access and setting a <code>root</code> password (if you have not been prompted for it yet).</p> <p>Note</p> <p>The database <code>root</code> password should not be confused with the operating systems <code>root</code> passwords. They are both completely different. They should also not have the same password.</p> <p>To secure the database, run:</p> <pre><code>mariadb-secure-installation\n</code></pre> <p>This will ask you a series of questions where you should generally just answer yes to. If you already set a <code>root</code> password in the previous step then you dont have to set it again, otherwise, make sure you choose a long, strong password for the <code>root</code> account. An example run is shown below:</p> <pre><code>[...]\nEnter current password for root (enter for none):  IF ONE WAS SET, IGNORE THIS\nOK, successfully used password, moving on...\n\n[...]\nSet root password? [Y/n] y\nNew password:             SET A STRONG PASSWORD HERE\nRe-enter new password:    SET A STRONG PASSWORD HERE\nPassword updated successfully!\nReloading privilege tables..\n ... Success!\n\n[...]\nRemove anonymous users? [Y/n] y\n ... Success!\n\n[...]\nDisallow root login remotely? [Y/n] y\n ... Success!\n\n[...]\nRemove test database and access to it? [Y/n] y\n\n[...]\nReload privilege tables now? [Y/n] y\n ... Success!\n\n[...]\n</code></pre> <p>That concludes the installation of the database server and securing it.</p> <p>Next, we need to create an actual user and database for SeAT to use on the newly installed server. To do this we use the <code>mariadb</code> command line client and enter a few commands as the <code>root</code> user to create the database and the user that will be accessing the server. Let get to it.</p> <p>Fire up the <code>mariadb</code> client as root by running:</p> <pre><code>mariadb -uroot -p\n</code></pre> <p>This will prompt you for a password. Use the password you configured for the <code>root</code> account when we ran <code>mysql_secure_installation</code>. This will most probably be the last time you need to use this password :)</p> <p>If the password was correct, you should see a prompt similar to the one below:</p> <pre><code>root@ubuntu:~# mysql -uroot -p\nEnter password:\nWelcome to the MariaDB monitor.  Commands end with ; or \\g.\nYour MariaDB connection id is 16\nCopyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nMariaDB [(none)]&gt;\n</code></pre> <p>Create a new database for SeAT to use with:</p> <pre><code>create database seat;\n</code></pre> <p>The output should be similar to the below:</p> <pre><code>MariaDB [(none)]&gt; create database seat;\nQuery OK, 1 row affected (0.00 sec)\n</code></pre> <p>Next, we  need to create the user that SeAT itself will use to connect and use the new <code>seat</code> database:</p> <pre><code>GRANT ALL ON seat.* to seat@localhost IDENTIFIED BY 's_p3rs3c3r3tp455w0rd';\n</code></pre> <p>Of course, you need to replace <code>s_p3rs3c3r3tp455w0rd</code> with your own unique and strong password. Successfully running this should present you with output similar to the below:</p> <pre><code>MariaDB [(none)]&gt; GRANT ALL ON seat.* to seat@localhost IDENTIFIED BY 's_p3rs3c3r3tp455w0rd';\nQuery OK, 0 rows affected (0.00 sec)\n</code></pre> <p>In the example above, we have effectively declared that SeAT will be using the database as <code>seat:s_p3rs3c3r3tp455w0rd@localhost/seat</code>.</p> <p>Finally, we will flush the database server privileges:</p> <pre><code>FLUSH PRIVILEGES;\n</code></pre> <p>That concludes the database server setup. You can exit the prompt with <code>exit</code>;</p> <p>Note</p> <p>Remember the password for the <code>seat</code> database user as we will need it later to configure SeAT.</p>"},{"location":"installation/manual_installation/#php","title":"PHP","text":"<p>Since SeAT is written primarily in PHP, we will need to install PHP packages. Ubuntu based systems can make use of the ondrej PPA which is a very popular repository used for specific PHP versions.</p> <p>Depending on the version of Ubuntu you are using, a release specific repository URL should be used for the PPA. Select the tab applicable to your Ubuntu version and run the commands within.</p> Jammy 22.04Focal 20.04Bionic 18.04 <pre><code>echo \"deb http://ppa.launchpad.net/ondrej/php/ubuntu jammy main\" &gt;&gt; /etc/apt/sources.list.d/php.list\necho \"deb-src http://ppa.launchpad.net/ondrej/php/ubuntu jammy main\" &gt;&gt; /etc/apt/sources.list.d/php.list\n</code></pre> <pre><code>echo \"deb http://ppa.launchpad.net/ondrej/php/ubuntu focal main\" &gt;&gt; /etc/apt/sources.list.d/php.list\necho \"deb-src http://ppa.launchpad.net/ondrej/php/ubuntu focal main\" &gt;&gt; /etc/apt/sources.list.d/php.list\n</code></pre> <pre><code>echo \"deb http://ppa.launchpad.net/ondrej/php/ubuntu bionic main\" &gt;&gt; /etc/apt/sources.list.d/php.list\necho \"deb-src http://ppa.launchpad.net/ondrej/php/ubuntu bionic main\" &gt;&gt; /etc/apt/sources.list.d/php.list\n</code></pre> <p>Next, we will have to download the new repositories GPG signing key and add it into our keychain</p> <pre><code>apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 4F4EA0AAE5267A6C\n</code></pre> <p>With the new repository configured, update the package lists with:</p> <pre><code>apt-get update\n</code></pre> <p>Finally, install the required PHP packages with:</p> <pre><code>apt-get install libpng-dev libfreetype6-dev libjpeg-dev\napt-get install openssl zip php8.2-bz2 php8.2-cli php8.2-curl php8.2-dom php8.2-gd php8.2-gmp php8.2-intl php8.2-mbstring php8.2-mysql php8.2-opcache php8.2-redis php8.2-zip\n</code></pre>"},{"location":"installation/manual_installation/#redis","title":"Redis","text":"<p>SeAT makes use of Redis as a cache and message broker for the Queue back end. Installing it is really easy. Do it with:</p> <pre><code>apt-get install redis-server\n</code></pre> <p>Hint</p> <p>By default, redis is making backup from its database - so it ensure integrity in case of failure. However, in certain condition, like power outage, this backup might be unprocessable and avoid redis to run.</p> <p>Since we don't store anything critical in it, you may want to disable this. To do so, edit the configuration file using <code>nano /etc/redis/redis.conf</code> and search line <code>appendonly no</code>, change it for <code>appendonly yes</code></p> <p>If you are on a small server, You may also want to limit the part of memory used by redis (by default, it will consume all available memory). To do so, into the redis configuration file, search line <code># maxmemory &lt;bytes&gt;</code> and change it for <code>maxmemory xGB</code> where <code>x</code> is the memory limit you want to set.</p> <p>You might also need to start redis: <pre><code>systemctl enable redis-server.service\n</code></pre></p>"},{"location":"installation/manual_installation/#seat-installation","title":"SeAT Installation","text":""},{"location":"installation/manual_installation/#prerequisites","title":"Prerequisites","text":"<p>Excellent progress! All of the operating system level requirements are now met and we are almost ready to install SeAT itself. The only thing that is outstanding is the package manager called <code>composer</code> as well as the <code>git</code> client. The combination of <code>composer</code> and <code>git</code> will let us download the SeAT source code from Github and install it locally.</p>"},{"location":"installation/manual_installation/#git","title":"Git","text":"<p>Install <code>git</code> with:</p> <pre><code>apt-get install git\n</code></pre>"},{"location":"installation/manual_installation/#composer","title":"Composer","text":"<p>Next, install <code>composer</code> with:</p> <pre><code>curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer &amp;&amp; hash -r\n</code></pre> <p>Thats it. Lets install SeAT! By default, we suggest you run SeAT from within <code>/var/www/seat</code>. As part of the installation, the <code>seat</code> directory will be created for us, but we will need to create <code>/var/www</code> for now as we have not yet configured the web server.</p> <p>Create the <code>www</code> directory with:</p> <pre><code>mkdir -p /var/www\n</code></pre> <p>Next, <code>cd</code> to the new <code>/var/www</code> directory with:</p> <pre><code>cd /var/www\n</code></pre>"},{"location":"installation/manual_installation/#seat-download","title":"SeAT Download","text":"<p>With all of the prerequisites installed as well as our <code>www</code> directory ready we can finally download SeAT. Do that with:</p> <pre><code>composer create-project eveseat/seat:5.0 --no-dev --no-interaction\n</code></pre> <p>Once the download is done, you should have seen output such as:</p> <pre><code>Writing lock file\nGenerating optimized autoload files\n&gt; Illuminate\\Foundation\\ComposerScripts::postAutoloadDump\n&gt; @php artisan package:discover\nDiscovered Package: darkaonline/l5-swagger\nDiscovered Package: eveseat/api\nDiscovered Package: eveseat/console\nDiscovered Package: eveseat/eveapi\nDiscovered Package: eveseat/notifications\nDiscovered Package: eveseat/services\nDiscovered Package: eveseat/web\nPackage manifest generated successfully.\n&gt; @php artisan key:generate\nApplication key [base64:CmhqYNkaIcHo8nYC8LiEWa3U5/+BiTLih5dZftxlV2k=] set successfully.\n</code></pre>"},{"location":"installation/manual_installation/#permissions","title":"Permissions","text":"<p>You may have noticed a warning about <code>composer</code> running as <code>root</code>. For now this can be safely ignored. Post the installation of the SeAT source code, we need to fix up the permissions of the downloaded files. Do that with:</p> <pre><code>chown -R www-data:www-data /var/www/seat\nchmod -R guo+w /var/www/seat/storage/\n</code></pre> <p>This will ensure that the web server, cron jobs and workers have access to the source code as well as logs.</p>"},{"location":"installation/manual_installation/#seat-setup","title":"SeAT Setup","text":"<p>With SeAT downloaded, we need to configure it. There are a number of configuration tasks needed. These include editing the applications <code>.env</code> file as well as running some commands that setup and seed the database. A configuration value reference can be found here.</p>"},{"location":"installation/manual_installation/#env-setup","title":".env setup","text":"<p>The first task would be to configure the applications database connection. Open the file located at <code>/var/www/seat/.env</code> with something like <code>vi</code> or <code>nano</code> and update the database options with your values. Typically, only the password would really need to be updated. If you are making use of an existing database somewhere else over the network, update the applicable fields such as <code>DB_HOST</code> accordingly.</p> <pre><code>DB_CONNECTION=mysql\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=seat\nDB_USERNAME=seat\nDB_PASSWORD=s_p3rs3c3r3tp455w0rd # &lt;-- this is the value you probably need to edit.\nDB_DEBUG=false\n</code></pre>"},{"location":"installation/manual_installation/#database-migrations-and-seeds","title":"Database Migrations and Seeds","text":"<p>Next we need to publish the database migrations and web assets (such as JavaScript scripts and CSS Style sheets), run those migrations and finally seed the SeAT job schedule.</p> <p>Publish the assets and database migrations with:</p> <pre><code>sudo -H -u www-data bash -c 'php /var/www/seat/artisan vendor:publish --force --all'\n</code></pre> <p>Run the database migrations with:</p> <pre><code>sudo -H -u www-data bash -c 'php /var/www/seat/artisan migrate'\n</code></pre> <p>Seed the SeAT schedule with:</p> <pre><code>sudo -H -u www-data bash -c 'php /var/www/seat/artisan db:seed --class=Seat\\\\Services\\\\Database\\\\Seeders\\\\PluginDatabaseSeeder'\n</code></pre>"},{"location":"installation/manual_installation/#eve-sde-update","title":"EVE Sde Update","text":"<p>SeAT makes use of a number of tables from the EVE Static Data Exports. MariaDB conversions of this data is available at https://www.fuzzwork.co.uk/dump/ and used in SeAT.</p> <p>To update to the latest SDE within SeAT, run:</p> <pre><code>sudo -H -u www-data bash -c 'php /var/www/seat/artisan eve:update:sde'\n</code></pre>"},{"location":"installation/manual_installation/#supervisor","title":"Supervisor","text":"<p>The jobs ecosystem within SeAT requires a process supervisor to ensure that the job runner stays alive. The job runner itself is implemented using Laravel Horizon and is monitored using supervisord.</p> <p>To configure the Horizon process monitor, first install <code>supervisor</code>:</p> <pre><code>apt-get install supervisor\n</code></pre> <p>Next, we will create a dedicated configuration file which will ask supervisor to keep an eye on Horizon. This file will live in <code>/etc/supervisor/conf.d/seat.conf</code>. Create this file with its recommended configuration with:</p> <pre><code>cat &gt; /etc/supervisor/conf.d/seat.conf &lt;&lt; EOL\n[program:seat]\ncommand=/usr/bin/php /var/www/seat/artisan horizon\nprocess_name = %(program_name)s-80%(process_num)02d\nstdout_logfile = /var/log/seat-80%(process_num)02d.log\nstdout_logfile_maxbytes=100MB\nstdout_logfile_backups=10\nnumprocs=1\ndirectory=/var/www/seat\nstopwaitsecs=600\nuser=www-data\nEOL\n</code></pre> <p>Finally, reload supervisor to apply the new configuration with the following command:</p> <pre><code>systemctl enable supervisor.service\n</code></pre>"},{"location":"installation/manual_installation/#crontab","title":"Crontab","text":"<p>A crontab entry is needed for SeAT. While simple in implementation, this crontab entry simply helps the application invoke a job checker very minute. The actual schedule is stored within SeAT itself and managed entirely via the Web Interface.</p> <p>To configure the crontab entry required for SeAT, run the following commands:</p> <pre><code>echo '* * * * * php /var/www/seat/artisan schedule:run &gt;&gt; /dev/null 2&gt;&amp;1' &gt; /tmp/seat-crontab.tmp\n</code></pre> <p>Next, add this crontab for the <code>www-data</code> user with:</p> <pre><code>crontab -u www-data /tmp/seat-crontab.tmp\n</code></pre> <p>If you want to confirm that the crontab successfully installed, you can check it with <code>crontab -u www-data -l</code>.</p>"},{"location":"installation/manual_installation/#web-server","title":"Web Server","text":"<p>Almost there!<p>You almost made it to the end! Just one more step.</p> </p> <p>The SeAT web interface requires a web server to serve the HTML goodies it has. We highly recommend you to use <code>nginx</code> and will be covered in this document. You don't have to use it, so if you prefer something else, feel free.</p>"},{"location":"installation/manual_installation/#nginx-install","title":"Nginx Install","text":"<p>Together with an <code>nginx</code> installation we also need to install <code>php-fpm</code> to handle the PHP execution for us. Let's install <code>nginx</code> and <code>php-fpm</code> with:</p> <pre><code>apt-get install nginx php8.2-fpm\n</code></pre>"},{"location":"installation/manual_installation/#nginx-configuration","title":"Nginx Configuration","text":"<p>With the webserver installed, we need to configure <code>nginx</code> to serve SeAT. For that, a configuration file needs to be created that will tell <code>nginx</code> where to find <code>php-fpm</code> as well as where the assets are for SeAT.</p> <p>The configuration file will live at <code>/etc/nginx/sites-available/seat</code>. It can be created with the following command:</p> <pre><code>cat &gt; /etc/nginx/sites-available/seat &lt;&lt; EOL\nserver {\n    listen 80;\n    listen [::]:80;\n    # If you are hosting this instance on a domain, set that\n    # name here.\n    #server_name  seat.yourdomain.com;\n    # SeAT public directory. This is the only directory that\n    # should be exposed by the webserver. If one has to expose\n    # the parent directory then things like the .env file will\n    # be available for anyone to download.\n    root /var/www/seat/public;\n    index index.php;\n    location / {\n       try_files \\$uri \\$uri/ /index.php?\\$query_string;\n    }\n    # PHP-FPM configuration.\n    location ~ \\.php\\$ {\n       try_files \\$uri /index.php =404;\n       fastcgi_pass unix:/run/php/php8.2-fpm.sock;\n       fastcgi_param SCRIPT_FILENAME \\$document_root\\$fastcgi_script_name;\n       include fastcgi_params;\n    }\n    # Even though .htaccess rules mean nothing in the nginx\n    # world, prevent those from being downloaded anyways.\n    location ~ /\\.ht {\n       deny all;\n    }\n    # In case someone messes up, prevent .env files from\n    # being downloaded as well.\n    location ~ /\\.env {\n       deny all;\n    }\n}\nEOL\n</code></pre> <p>Warning</p> <p>The code block above should not be copied directly into a file. It is a script and should be pasted directly into the linux terminal. It will create the nginx config for you. If you create the file yourself with the above content then the file will not be valid and you will receive errors from nginx.</p> <p>The configuration file as is at <code>/etc/nginx/sites-available/seat</code> itself won't be loaded by <code>nginx</code> yet. Storing configuration files in a <code>*sites-available*</code> directory is simply a convention used to allow administrators to quickly add &amp; remove sites if needed. To apply the changes made by the new configuration file it needs to be symlinked to a <code>*sites-enabled*</code> directory.</p> <p>Let's symlink to the new configuration and drop the default one as a hardening exercise at the same time:</p> <pre><code>ln -s /etc/nginx/sites-available/seat /etc/nginx/sites-enabled/seat\nrm /etc/nginx/sites-enabled/default\n</code></pre> <p>Finally, reload <code>nginx</code> and <code>php-fpm</code> for the new changes to take affect:</p> <pre><code>systemctl restart nginx.service\nsystemctl restart php8.2-fpm.service\n</code></pre>"},{"location":"installation/manual_installation/#esi-configuration","title":"ESI Configuration","text":"<p>As mentioned at the start of the guide, it is necessary for you to configure ESI. For instructions how to do this, please refer to the ESI Setup Guide.</p> <p>Info</p> <p>You may want to serve your SeAT installation over SSL (using HTTPS) - which is a recommanded behavior. There are many way to do it, you can have a look on Let's Encrypt which provide you valid certificates for free. Put an eye to their Certbot Documentation.</p> <p>Success</p> <p>You made it! Use a browser and browse to the IP address / hostname of your server to access SeAT!</p>"},{"location":"installation/requirements/","title":"Requirements","text":""},{"location":"installation/requirements/#requirements","title":"Requirements","text":""},{"location":"installation/requirements/#hardware-requirements","title":"Hardware Requirements","text":"<p>As far as hardware goes, there isn't really a hard and fast rule on what is needed. The more resources you make available, the faster API updates will occur. However, there are some minimum recommended specifications.</p> <p>Info</p> <p>Required CPU cores are indicative and may changes depending on your processor. They have been based on a one tier deployment (app, workers and database are hosted on the same server).</p> <p>To improve accuracy regarding CPU requirements, we provide a Coremark value. Since Cloud providers like Azure and Google Cloud are providing their instance benchmark using this test, it should give you a more meaningful idea of what we are talking about.</p> <p>Warning</p> <p>If you intend to process a large amount of data, plan your storage accordingly. The SeAT database can grow incredibly quickly depending on the amount of tokens you process.</p> <p>Due to high I/O traffic generated by SeAT, we recommand NVMe storage usage for best performances.</p>"},{"location":"installation/requirements/#up-to-25-characters","title":"Up to 25 characters","text":"Type Requirement CPU 2 virtual cores (Coremark 20 000+) Memory 2GB of RAM with a swap file Core Storage Space 1GB (tend to be stable) ESI Cache Storage Space 2GB (tend to grow with characters) Database Storage Space 5GB (tend to grow with characters and history)"},{"location":"installation/requirements/#up-to-500-characters","title":"Up to 500 characters","text":"Type Requirement CPU 2 virtual cores (Coremark 20 000+) Memory 4GB of RAM Core Storage Space 1GB (tend to be stable) ESI Cache Storage Space 5GB (tend to grow with characters) Database Storage Space 10GB (tend to grow with characters and history)"},{"location":"installation/requirements/#up-to-1-000-characters","title":"Up to 1 000 characters","text":"Type Requirement CPU 4 virtual cores (Coremark 40 000+) Memory 8GB of RAM Core Storage Space 1GB (tend to be stable) ESI Cache Storage Space 10GB (tend to grow with characters) Database Storage Space 20GB (tend to grow with characters and history)"},{"location":"installation/requirements/#more-than-1-000-characters","title":"More than 1 000 characters","text":"<p>If you plan to run SeAT for more than 1 000 characters, you will have to fine tune your installation and carefully monitoring it. At time this documentation is wrote, a standard character is queuing around 50 jobs per wave. Since all jobs are not doing the same thing, it's difficult to provide you accurate figures.</p> <p>A single worker is consuming around 200 MB of memory. Most jobs are requiring less than 5% of CPU - however, a few of them need more than 20% of it. The more jobs you'll get, the more workers you'll need to process queue in less than 60 minutes.</p> <p>Warning</p> <p>With such installation, you shouldn't share SeAT server resources with other services. Also, you should consider deploying database on another server.</p>"},{"location":"installation/requirements/#software-requirements","title":"Software Requirements","text":""},{"location":"installation/requirements/#docker-environment","title":"Docker Environment","text":"<p>For Docker based installations, all you need is <code>docker</code>. If you already have it installed, check your current version with <code>docker version</code>.</p> Type Requirement Version Check Docker Docker: ^24.0 <code>docker -v</code> <p>Info</p> <p>If you plan to deploy SeAT on a Windows host, you will need Docker for Windows</p> <p>Warning</p> <p>Do not install Docker directly from your distributions repositories. These are usually out of date. Instead, rather follow the steps provided on dockers official documentation</p> <p>When considering a VPS provider, make sure you choose one that does not make use of OpenVZ or similar operating-system level virtualization technologies. These virtualization technologies limit you in terms of kernel access as they purely containerize an existing Linux installation.</p> <p>For a successful docker installation, choose a provider that uses para-virtualized technologies such as KVM, VMWare or XEN allowing you full control to the instance (and therefor the kernel itself). Examples of such providers are Digital Ocean, Linode and Vultr.</p>"},{"location":"installation/requirements/#bare-metal-environment","title":"Bare metal Environment","text":"<p>Info</p> <p>We consider \"bare metal\", any environment on which SeAT has been deployed manually (instead using containers).</p> <p>If you plan to deploy SeAT on a Windows host, you will have to use Docker</p> <p>Software version requirements are based on a minimum requirement.</p> Type Requirement State Check Operating System Linux (any distribution is suitable, however, Ubuntu tends to get more up-to-date packages on official repositories). Usually, running <code>cat /etc/issue</code> should give you a good idea. Architecture 64-bit only <code>uname -p</code> PHP PHP: ^8.3 including mysql, gd, bz2, intl, pcntl, gmp, openssl, zip, opcache and redis extensions <code>php -v</code> and <code>php -i</code> Database MariaDB: ^10.2.7 <code>mysql -V</code> Caching Service Redis <code>redis-server -v</code> Service Supervisor Supervisor : 3 <code>supervisord -v</code> Web Server NGinX or Apache <code>nginx -v</code> or <code>httpd -v</code> <p>Tip</p> <p>In case you want to deploy SeAT with Apache as web server, plan to configure it with Fast CGI using php-fpm instead embedded php process. Doing it so will make you benefit of significant improved performances.</p>"},{"location":"installation/old_versions/docker_installation_seat_4/","title":"Docker Installation (4.x)","text":""},{"location":"installation/old_versions/docker_installation_seat_4/#docker","title":"Docker","text":"<p>Docker is ideally the installation route you want to go. Docker enables us to run SeAT on any platform capable of running docker itself (which includes Windows!). Additionally, upgrades and service maintenance are really low effort as you don't have to care about any dependencies. All of it is maintained within a docker stack and dockerhub.</p> <p>Info</p> <p>If you plan on running Docker on Windows, for the best performance it is suggested that you run Docker using the Windows Subsystem for Linux 2 (WSL2) backend, available starting in Windows 10/Windows Server 20H1 (build 2004) releases.</p> <p>Hint</p> <p>Before starting the installation process, be sure you read this complete document first. It will help you understand all of the steps from an installation process.</p> <p>If you feel like docker might not be your cup of tea, checkout some of the other getting started guides that are available.</p> <p>Warning</p> <p>If you are using Docker on Windows, you will need to use the Manual Deployment option below.</p> <p>Eve Application and ESI</p> <p>SeAT used CCP's ESI service in order to retrieve EVE Online-related information. Before you can make any authenticated calls to ESI, you have to register a third-party EVE application on the developers portal. This is an absolute must for SeAT to be of any use. The configuration of this step is covered in a later stage of the documentation.</p>"},{"location":"installation/old_versions/docker_installation_seat_4/#internal-container-setup-overview","title":"Internal Container Setup Overview","text":"<p>The setup for SeAT's docker installation orchestrated using docker-compose. With docker-compose, we can use a single <code>docker-compose.yml</code> file to define the entire stack complete with all of the dependencies required to run SeAT. A pre-built and recommended compose file (which is also used by the bootstrapping script) is hosted in the seat-docker repository here.</p> <p>The previously mentioned compose file is really simple. A high-level overview of its contents is:</p> <ul> <li>A single docker network called <code>seat-network</code> is defined. All containers are connected to this network and is used as the primary means for inter-container communications.</li> <li>A single volume called <code>mariadb-data</code> is defined. This is the most important volume as it contains all of the database data. This is the one volume that you should configure a backup solution for!</li> <li>Six services (or containers) are used within the SeAT docker stack. Three services use basic images pulled directly from Dockerhub and three others use a custom-built image, also hosted on DockerHub. The container images used are:</li> </ul> Image Name Image Repository <code>mariadb:10</code> https://hub.docker.com/_/mariadb/ <code>redis:5-alpine</code> https://hub.docker.com/_/redis/ <code>traefik:2.2</code> https://hub.docker.com/_/traefik <code>eveseat/seat</code> https://hub.docker.com/r/eveseat/seat <ul> <li>The environment is configured using a top-level <code>.env</code> file (not to be confused with the SeAT specific <code>.env</code> file.</li> <li>Only two ports are exposed by default. Those are <code>tcp/80</code> and <code>tcp/443</code>. These can be connected to in order to access the SeAT web interface.</li> <li>All containers are configured to restart on failure, so if your server reboots or a container dies for whatever reason it should automatically start up again.</li> </ul>"},{"location":"installation/old_versions/docker_installation_seat_4/#seat-docker-installation","title":"SeAT Docker Installation","text":"<p>Depending on whether you already have <code>docker</code> and <code>docker-compose</code> already installed, you may choose how to start the installation. If you already have the required tooling installed and running their latest versions, all you need to do is download the latest <code>docker-compose.yml</code> and <code>.env</code> files to get started.</p>"},{"location":"installation/old_versions/docker_installation_seat_4/#automated-setup-script","title":"Automated Setup Script","text":"<p>If you do not have the required software installed yet, consider running the bootstrap script that will check for <code>docker</code> and <code>docker-compose</code>, install it and start the SeAT stack up for you. The script can be run with:</p> <pre><code>bash &lt;(curl -fsSL https://git.io/get-seat)\n</code></pre> <p>Once the script is finished, you can skip to the monitoring the stack section of this guide.</p> <p>If you don't want to run this script, follow along in the next section of this guide.</p>"},{"location":"installation/old_versions/docker_installation_seat_4/#manual-deployment","title":"Manual Deployment","text":""},{"location":"installation/old_versions/docker_installation_seat_4/#docker-download","title":"Docker Download","text":"<p>If you do not have <code>docker</code>, install it now with the following command as <code>root</code>:</p> <pre><code>sh &lt;(curl -fsSL get.docker.com)\n</code></pre> <p>If you are on Windows, download and install Docker Desktop.</p>"},{"location":"installation/old_versions/docker_installation_seat_4/#docker-compose-download","title":"Docker-compose Download","text":"<p>If you do not have <code>docker-compose</code>, install it now with the following command as <code>root</code> (Docker Compose is included with Docker Desktop on Windows):</p> <pre><code># Downloads docker-compose\ncurl -L https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose\n\n# Makes docker-compose executable\nchmod +x /usr/local/bin/docker-compose\n</code></pre>"},{"location":"installation/old_versions/docker_installation_seat_4/#docker-compose-working-directory","title":"Docker compose working directory","text":"<p>With <code>docker</code> and <code>docker-compose</code> ready, create yourself a directory in <code>/opt</code> with <code>mkdir -p /opt/seat-docker</code> and <code>cd</code> to it. Remember this directory as you will need to come back to it often.</p> <p>On Windows, create the <code>C:\\seat-docker</code> directory with <code>mkdir C:\\seat-docker</code> and <code>cd</code> to it.</p>"},{"location":"installation/old_versions/docker_installation_seat_4/#seat-docker-composeyml-and-env-file","title":"SeAT docker-compose.yml and .env File","text":"<p>Then, download the <code>docker-compose.yml</code> file with:</p> LinuxWindows <pre><code>curl -fsSL https://raw.githubusercontent.com/eveseat/seat-docker/4.x/docker-compose.yml -o docker-compose.yml\n</code></pre> <pre><code>Invoke-WebRequest -Uri https://raw.githubusercontent.com/eveseat/seat-docker/4.x/docker-compose.yml -OutFile docker-compose.yml\n</code></pre> <p>Next, download the docker <code>.env</code> file with:</p> LinuxWindows <pre><code>curl -fsSL https://raw.githubusercontent.com/eveseat/seat-docker/4.x/.env -o .env\n</code></pre> <pre><code>Invoke-WebRequest -Uri https://raw.githubusercontent.com/eveseat/seat-docker/4.x/.env -OutFile .env\n</code></pre> <p>Next, we will generate a unique application key - this is used internally for encryption:</p> LinuxWindows <pre><code>sed -i -- 's/APP_KEY=insecure/APP_KEY='$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c32 ; echo '')'/g' .env\n</code></pre> <pre><code>$appkey = (-join ((65..90) + (97..122) | Get-Random -Count 32 | % {[char]$_})); (Get-Content .env -Raw) -replace \"APP_KEY=insecure\", \"APP_KEY=$appkey\" | Set-Content .env\n</code></pre>"},{"location":"installation/old_versions/docker_installation_seat_4/#seat-docker-configuration","title":"SeAT docker configuration","text":"<p>Open up the <code>.env</code> file in a text editor and fill in a few of the configuration items needed.</p> <p><code>TRAEFIK_DOMAIN</code> should be set to the base domain your installation lives on. <code>SEAT_SUBDOMAIN</code> sould be the subdomain for the SeAT web UI. eg: seat.domain.local</p> <p>For TLS configuration, you need to set the <code>TRAEFIK_ACME_EMAIL</code> value, and then in the <code>docker-compose.yml</code> file uncomment the labels that relating to <code>certResolver</code>. They typically look like this: <code>traefik.http.routers.api.tls.certResolver=primary</code>. Finally, create an ACME configuration file with:</p> <pre><code>mkdir acme\ntouch acme/acme.json\nchmod 600 acme/acme.json\n</code></pre> <p>Info</p> <p>SeAT docker template is shipped with Traefik to hide your container behind a proxy and securing traffic up to it. In case you want to manage traffic proxying and certification on your own, you can disable traefik container from the stack by adding <code>#</code> [front of lines] from the <code>docker-compose.yml</code> file.</p> <p>Warning</p> <p>The location of the <code>docker-compose.yml</code> and <code>.env</code> files are important. You need to <code>cd</code> back to the directory where these are stored in order to be able to execute commands for this stack at a later stage.</p> <p>Also, be sure you provide a valid e-mail address as it will be used to register your account against Let's Encrypt. For those unfamiliar with this, it's CA that provides valid certificates for free.</p>"},{"location":"installation/old_versions/docker_installation_seat_4/#esi-configuration","title":"ESI Configuration","text":"<p>As mentioned at the start of the guide, it is necessary for you to configure ESI. For instructions on how to do this, please refer to the ESI Setup Guide.</p> <p>With the configuration files ready, start up the stack with:</p> <pre><code>docker-compose up -d\n</code></pre>"},{"location":"installation/old_versions/docker_installation_seat_4/#monitoring-the-stack","title":"Monitoring the Stack","text":"<p>Knowing what is going on inside of your containers is crucial to understanding how everything is running as well as useful when debugging any problems that may occur. While the containers are starting up or have been running for a while, you can always <code>cd</code> to the directory where your <code>docker-compose.yml</code> file lives and run the <code>logs</code> command to see the output of all of the containers in the stack. For example:</p> <pre><code>cd /opt/seat-docker\ndocker-compose logs --tail 10 -f\n</code></pre> <p>These commands will <code>cd</code> to the directory containing the stacks <code>docker-compose.yml</code> file and run the <code>logs</code> command, showing the last 10 log entries and then printing new ones as they arrive.</p>"},{"location":"installation/old_versions/docker_installation_seat_4/#configuration-changes","title":"Configuration Changes","text":"<p>All of the relevant configuration lives inside the <code>.env</code> file, next to your <code>docker-compose.yml</code> file. Modify their values by opening it in a text editor, making the appropriate changes, and saving it again. Once that is done, run <code>docker-compose up -d</code> again to restart the container environment.</p> <p>Success</p> <p>You made it! Use a browser and browse to the domain / subdomain of your server to access SeAT!</p>"},{"location":"installation/old_versions/manual_installation_seat_4/","title":"Manual Installation (4.x)","text":""},{"location":"installation/old_versions/manual_installation_seat_4/#manual-installation","title":"Manual Installation","text":"<p>This guide attempts to explain how to manually install SeAT onto an Ubuntu Server. A small amount of Linux experience is preferred when it comes to this guide, although it is not entirely mandatory.</p> <p>Info</p> <p>This guide has been written targetting Ubuntu. However, you can use it to deploy SeAT on any linux distribution. Just be sure you adapt commands to targetted distribution (mostly those related to the package manager).</p> <p>Hint</p> <p>Before starting to do anything, be sure you read the complete workflow once. It will help you to understand all steps from the installation process.</p> <p>Eve Application and ESI</p> <p>SeAT consumes CCP's ESI service in order to retrieve EVE Online related information. Before you can make any authenticated calls to ESI, you have to register a third party EVE application on the developers portal. This is an absolute must for SeAT to be of any use. The configuration of this step is covered in a later stage of the documentation.</p>"},{"location":"installation/old_versions/manual_installation_seat_4/#getting-started","title":"Getting started","text":"<p>We are going to assume you have root access to a fresh Ubuntu Server. Typically access is gained via SSH. All of the below commands are to be entered in the SSH terminal session for the installation &amp; configuration of SeAT. If the server you want to install SeAT on is being used for other things too (such as hosting MySQL databases and or websites), then please keep that in mind while following this guide.</p> <p>Packages are installed using the <code>aptitude</code> package manager as the <code>root</code> user.</p>"},{"location":"installation/old_versions/manual_installation_seat_4/#os-installation","title":"OS Installation","text":""},{"location":"installation/old_versions/manual_installation_seat_4/#operating-system","title":"Operating System","text":"<p>Before we get to installing SeAT, lets ensure that your operating system is up to date. We can do that with basics :</p> <ul> <li><code>apt-get update</code> to refresh the repositories cache.</li> <li><code>apt-get full-upgrade</code> to update any installed packages.</li> <li><code>reboot</code> in order to ensure any updated software is the current running version.</li> <li><code>apt-get autoremove</code> (after the reboot) to cleanup any unneeded packages.</li> </ul>"},{"location":"installation/old_versions/manual_installation_seat_4/#database","title":"Database","text":"<p>SeAT relies heavily on a database to function. Everything it learns is stored here, along with things such as user accounts for your users. It comes without saying that database security is a very important aspect too. So, ensure that you choose very strong passwords for your installation where required.</p> <p>This document describes using MariaDB, but you can use MySQL as well. Just double check the requirements.</p> <p>We need to ensure that we have the latest MariaDB installed. To help with this, MariaDB provides an official repository to get the latest versions. Let's add this repository with:</p> <pre><code>curl -sS https://downloads.mariadb.com/MariaDB/mariadb_repo_setup | bash\n</code></pre> <p>With the repository now setup, lets install the database server:</p> <p>Warning<p>During the installation, you may be asked to set a password for the <code>root</code> MariaDB user account. Make sure you set a long, strong password and remember it. It will be needed for the next step.</p> </p> <pre><code>apt-get install mariadb-server\n</code></pre> <p>Next, we are going to secure the database server by removing anonymous access and setting a <code>root</code> password (if you have not been prompted for it yet).</p> <p>Note</p> <p>The database <code>root</code> password should not be confused with the operating systems <code>root</code> passwords. They are both completely different. They should also not have the same password.</p> <p>To secure the database, run:</p> <pre><code>mysql_secure_installation\n</code></pre> <p>This will ask you a series of questions where you should generally just answer yes to. If you already set a <code>root</code> password in the previous step then you dont have to set it again, otherwise, make sure you choose a long, strong password for the <code>root</code> account. An example run is shown below:</p> <pre><code>[...]\nEnter current password for root (enter for none):  IF ONE WAS SET, IGNORE THIS\nOK, successfully used password, moving on...\n\n[...]\nSet root password? [Y/n] y\nNew password:             SET A STRONG PASSWORD HERE\nRe-enter new password:    SET A STRONG PASSWORD HERE\nPassword updated successfully!\nReloading privilege tables..\n ... Success!\n\n[...]\nRemove anonymous users? [Y/n] y\n ... Success!\n\n[...]\nDisallow root login remotely? [Y/n] y\n ... Success!\n\n[...]\nRemove test database and access to it? [Y/n] y\n\n[...]\nReload privilege tables now? [Y/n] y\n ... Success!\n\n[...]\n</code></pre> <p>That concludes the installation of the database server and securing it.</p> <p>Next, we need to create an actual user and database for SeAT to use on the newly installed server. To do this we use the <code>mysql</code> command line client and enter a few commands as the <code>root</code> user to create the database and the user that will be accessing the server. Let get to it.</p> <p>Fire up the <code>mysql</code> client as root by running:</p> <pre><code>mysql -uroot -p\n</code></pre> <p>This will prompt you for a password. Use the password you configured for the <code>root</code> account when we ran <code>mysql_secure_installation</code>. This will most probably be the last time you need to use this password :)</p> <p>If the password was correct, you should see a prompt similar to the one below:</p> <pre><code>root@ubuntu:~# mysql -uroot -p\nEnter password:\nWelcome to the MariaDB monitor.  Commands end with ; or \\g.\nYour MariaDB connection id is 16\nCopyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nMariaDB [(none)]&gt;\n</code></pre> <p>Create a new database for SeAT to use with:</p> <pre><code>create database seat;\n</code></pre> <p>The output should be similar to the below:</p> <pre><code>MariaDB [(none)]&gt; create database seat;\nQuery OK, 1 row affected (0.00 sec)\n</code></pre> <p>Next, we  need to create the user that SeAT itself will use to connect and use the new <code>seat</code> database:</p> <pre><code>GRANT ALL ON seat.* to seat@localhost IDENTIFIED BY 's_p3rs3c3r3tp455w0rd';\n</code></pre> <p>Of course, you need to replace <code>s_p3rs3c3r3tp455w0rd</code> with your own unique and strong password. Successfully running this should present you with output similar to the below:</p> <pre><code>MariaDB [(none)]&gt; GRANT ALL ON seat.* to seat@localhost IDENTIFIED BY 's_p3rs3c3r3tp455w0rd';\nQuery OK, 0 rows affected (0.00 sec)\n</code></pre> <p>In the example above, we have effectively declared that SeAT will be using the database as <code>seat:s_p3rs3c3r3tp455w0rd@localhost/seat</code>.</p> <p>Finally, we will flush the database server privileges:</p> <pre><code>FLUSH PRIVILEGES;\n</code></pre> <p>That concludes the database server setup. You can exit the prompt with <code>exit</code>;</p> <p>Note</p> <p>Remember the password for the <code>seat</code> database user as we will need it later to configure SeAT.</p>"},{"location":"installation/old_versions/manual_installation_seat_4/#php","title":"PHP","text":"<p>Since SeAT is written primarily in PHP, we will need to install PHP packages. Ubuntu based systems can make use of the ondrej PPA which is a very popular repository used for specific PHP versions.</p> <p>Depending on the version of Ubuntu you are using, a release specific repository URL should be used for the PPA. Select the tab applicable to your Ubuntu version and run the commands within.</p> Bionic 18.04Focal 20.04 <pre><code>echo \"deb http://ppa.launchpad.net/ondrej/php/ubuntu bionic main\" &gt;&gt; /etc/apt/sources.list.d/php.list\necho \"deb-src http://ppa.launchpad.net/ondrej/php/ubuntu bionic main\" &gt;&gt; /etc/apt/sources.list.d/php.list\n</code></pre> <pre><code>echo \"deb http://ppa.launchpad.net/ondrej/php/ubuntu focal main\" &gt;&gt; /etc/apt/sources.list.d/php.list\necho \"deb-src http://ppa.launchpad.net/ondrej/php/ubuntu focal main\" &gt;&gt; /etc/apt/sources.list.d/php.list\n</code></pre> <p>Next, we will have to download the new repositories GPG signing key and add it into our keychain</p> <pre><code>apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 4F4EA0AAE5267A6C\n</code></pre> <p>With the new repository configured, update the package lists with:</p> <pre><code>apt-get update\n</code></pre> <p>Finally, install the required PHP packages with:</p> <pre><code>apt-get install libpng-dev libfreetype6-dev libjpeg-dev\napt-get install curl openssl zip php7.3-bz2 php7.3-cli php7.3-curl php7.3-dom php7.3-gd php7.3-gmp php7.3-intl php7.3-mbstring php7.3-mysql php7.3-opcache php7.3-redis php7.3-zip\n</code></pre>"},{"location":"installation/old_versions/manual_installation_seat_4/#redis","title":"Redis","text":"<p>SeAT makes use of Redis as a cache and message broker for the Queue back end. Installing it is really easy. Do it with:</p> <pre><code>apt-get install redis-server\n</code></pre> <p>Hint</p> <p>By default, redis is making backup from its database - so it ensure integrity in case of failure. However, in certain condition, like power outage, this backup might be unprocessable and avoid redis to run.</p> <p>Since we don't store anything critical in it, you may want to disable this. To do so, edit the configuration file using <code>nano /etc/redis/redis.conf</code> and search line <code>appendonly no</code>, change it for <code>appendonly yes</code></p> <p>If you are on a small server, You may also want to limit the part of memory used by redis (by default, it will consume all available memory). To do so, into the redis configuration file, search line <code># maxmemory &lt;bytes&gt;</code> and change it for <code>maxmemory xGB</code> where <code>x</code> is the memory limit you want to set.</p>"},{"location":"installation/old_versions/manual_installation_seat_4/#seat-installation","title":"SeAT Installation","text":""},{"location":"installation/old_versions/manual_installation_seat_4/#prerequisites","title":"Prerequisites","text":"<p>Excellent progress! All of the operating system level requirements are now met and we are almost ready to install SeAT itself. The only thing that is outstanding is the package manager called <code>composer</code> as well as the <code>git</code> client. The combination of <code>composer</code> and <code>git</code> will let us download the SeAT source code from Github and install it locally.</p>"},{"location":"installation/old_versions/manual_installation_seat_4/#git","title":"Git","text":"<p>Install <code>git</code> with:</p> <pre><code>apt-get install git\n</code></pre>"},{"location":"installation/old_versions/manual_installation_seat_4/#composer","title":"Composer","text":"<p>Next, install <code>composer</code> with:</p> <pre><code>curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer &amp;&amp; hash -r\n</code></pre> <p>Thats it. Lets install SeAT! By default, we suggest you run SeAT from within <code>/var/www/seat</code>. As part of the installation, the <code>seat</code> directory will be created for us, but we will need to create <code>/var/www</code> for now as we have not yet configured the web server.</p> <p>Create the <code>www</code> directory with:</p> <pre><code>mkdir -p /var/www\n</code></pre> <p>Next, <code>cd</code> to the new <code>/var/www</code> directory with:</p> <pre><code>cd /var/www\n</code></pre>"},{"location":"installation/old_versions/manual_installation_seat_4/#seat-download","title":"SeAT Download","text":"<p>With all of the prerequisites installed as well as our <code>www</code> directory ready we can finally download SeAT. Do that with:</p> <pre><code>composer create-project eveseat/seat --no-dev --no-interaction\n</code></pre> <p>Once the download is done, you should have seen output such as:</p> <pre><code>Writing lock file\nGenerating optimized autoload files\n&gt; Illuminate\\Foundation\\ComposerScripts::postAutoloadDump\n&gt; @php artisan package:discover\nDiscovered Package: darkaonline/l5-swagger\nDiscovered Package: eveseat/api\nDiscovered Package: eveseat/console\nDiscovered Package: eveseat/eveapi\nDiscovered Package: eveseat/notifications\nDiscovered Package: eveseat/services\nDiscovered Package: eveseat/web\nPackage manifest generated successfully.\n&gt; @php artisan key:generate\nApplication key [base64:CmhqYNkaIcHo8nYC8LiEWa3U5/+BiTLih5dZftxlV2k=] set successfully.\n</code></pre>"},{"location":"installation/old_versions/manual_installation_seat_4/#permissions","title":"Permissions","text":"<p>You may have noticed a warning about <code>composer</code> running as <code>root</code>. For now this can be safely ignored. Post the installation of the SeAT source code, we need to fix up the permissions of the downloaded files. Do that with:</p> <pre><code>chown -R www-data:www-data /var/www/seat\nchmod -R guo+w /var/www/seat/storage/\n</code></pre> <p>This will ensure that the web server, cron jobs and workers have access to the source code as well as logs.</p>"},{"location":"installation/old_versions/manual_installation_seat_4/#seat-setup","title":"SeAT Setup","text":"<p>With SeAT downloaded, we need to configure it. There are a number of configuration tasks needed. These include editing the applications <code>.env</code> file as well as running some commands that setup and seed the database. A configuration value reference can be found here.</p>"},{"location":"installation/old_versions/manual_installation_seat_4/#env-setup","title":".env setup","text":"<p>The first task would be to configure the applications database connection. Open the file located at <code>/var/www/seat/.env</code> with something like <code>vi</code> or <code>nano</code> and update the database options with your values. Typically, only the password would really need to be updated. If you are making use of an existing database somewhere else over the network, update the applicable fields such as <code>DB_HOST</code> accordingly.</p> <pre><code>DB_CONNECTION=mysql\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=seat\nDB_USERNAME=seat\nDB_PASSWORD=s_p3rs3c3r3tp455w0rd # &lt;-- this is the value you probably need to edit.\nDB_DEBUG=false\n</code></pre>"},{"location":"installation/old_versions/manual_installation_seat_4/#database-migrations-and-seeds","title":"Database Migrations and Seeds","text":"<p>Next we need to publish the database migrations and web assets (such as JavaScript scripts and CSS Style sheets), run those migrations and finally seed the SeAT job schedule.</p> <p>Publish the assets and database migrations with:</p> <pre><code>sudo -H -u www-data bash -c 'php /var/www/seat/artisan vendor:publish --force --all'\n</code></pre> <p>Run the database migrations with:</p> <pre><code>sudo -H -u www-data bash -c 'php /var/www/seat/artisan migrate'\n</code></pre> <p>Seed the SeAT schedule with:</p> <pre><code>sudo -H -u www-data bash -c 'php /var/www/seat/artisan db:seed --class=Seat\\\\Console\\\\database\\\\seeds\\\\ScheduleSeeder'\n</code></pre>"},{"location":"installation/old_versions/manual_installation_seat_4/#eve-sde-update","title":"EVE Sde Update","text":"<p>SeAT makes use of a number of tables from the EVE Static Data Exports. MySQL conversions of this data is available at https://www.fuzzwork.co.uk/dump/ and used in SeAT.</p> <p>To update to the latest SDE within SeAT, run:</p> <pre><code>sudo -H -u www-data bash -c 'php /var/www/seat/artisan eve:update:sde'\n</code></pre>"},{"location":"installation/old_versions/manual_installation_seat_4/#supervisor","title":"Supervisor","text":"<p>The jobs ecosystem within SeAT requires a process supervisor to ensure that the job runner stays alive. The job runner itself is implemented using Laravel Horizon and is monitored using supervisord.</p> <p>To configure the Horizon process monitor, first install <code>supervisor</code>:</p> <pre><code>apt-get install supervisor\n</code></pre> <p>Next, we will create a dedicated configuration file which will ask supervisor to keep an eye on Horizon. This file will live in <code>/etc/supervisor/conf.d/seat.conf</code>. Create this file with its recommended configuration with:</p> <pre><code>cat &gt; /etc/supervisor/conf.d/seat.conf &lt;&lt; EOL\n[program:seat]\ncommand=/usr/bin/php /var/www/seat/artisan horizon\nprocess_name = %(program_name)s-80%(process_num)02d\nstdout_logfile = /var/log/seat-80%(process_num)02d.log\nstdout_logfile_maxbytes=100MB\nstdout_logfile_backups=10\nnumprocs=1\ndirectory=/var/www/seat\nstopwaitsecs=600\nuser=www-data\nEOL\n</code></pre> <p>Finally, reload supervisor to apply the new configuration with the following command:</p> <pre><code>systemctl restart supervisor.service\n</code></pre>"},{"location":"installation/old_versions/manual_installation_seat_4/#crontab","title":"Crontab","text":"<p>A crontab entry is needed for SeAT. While simple in implementation, this crontab entry simply helps the application invoke a job checker very minute. The actual schedule is stored within SeAT itself and managed entirely via the Web Interface.</p> <p>To configure the crontab entry required for SeAT, run the following commands:</p> <pre><code>echo '* * * * * php /var/www/seat/artisan schedule:run &gt;&gt; /dev/null 2&gt;&amp;1' &gt; /tmp/seat-crontab.tmp\n</code></pre> <p>Next, add this crontab for the <code>www-data</code> user with:</p> <pre><code>crontab -u www-data /tmp/seat-crontab.tmp\n</code></pre> <p>If you want to confirm that the crontab successfully installed, you can check it with <code>crontab -u www-data -l</code>.</p>"},{"location":"installation/old_versions/manual_installation_seat_4/#web-server","title":"Web Server","text":"<p>Almost there!<p>You almost made it to the end! Just one more step.</p> </p> <p>The SeAT web interface requires a web server to serve the HTML goodies it has. We highly recommend you to use <code>nginx</code> and will be covered in this document. You don't have to use it, so if you prefer something else, feel free.</p>"},{"location":"installation/old_versions/manual_installation_seat_4/#nginx-install","title":"Nginx Install","text":"<p>Together with an <code>nginx</code> installation we also need to install <code>php-fpm</code> to handle the PHP execution for us. Let's install <code>nginx</code> and <code>php-fpm</code> with:</p> <pre><code>apt-get install nginx php7.3-fpm\n</code></pre>"},{"location":"installation/old_versions/manual_installation_seat_4/#nginx-configuration","title":"Nginx Configuration","text":"<p>With the webserver installed, we need to configure <code>nginx</code> to serve SeAT. For that, a configuration file needs to be created that will tell <code>nginx</code> where to find <code>php-fpm</code> as well as where the assets are for SeAT.</p> <p>The configuration file will live at <code>/etc/nginx/sites-available/seat</code>. It can be created with the following command:</p> <pre><code>cat &gt; /etc/nginx/sites-available/seat &lt;&lt; EOL\nserver {\n    listen 80;\n    listen [::]:80;\n    # If you are hosting this instance on a domain, set that\n    # name here.\n    #server_name  seat.yourdomain.com;\n    # SeAT public directory. This is the only directory that\n    # should be exposed by the webserver. If one has to expose\n    # the parent directory then things like the .env file will\n    # be available for anyone to download.\n    root /var/www/seat/public;\n    index index.php;\n    location / {\n       try_files \\$uri \\$uri/ /index.php?\\$query_string;\n    }\n    # PHP-FPM configuration.\n    location ~ \\.php\\$ {\n       try_files \\$uri /index.php =404;\n       fastcgi_pass unix:/run/php/php7.3-fpm.sock;\n       fastcgi_param SCRIPT_FILENAME \\$document_root\\$fastcgi_script_name;\n       include fastcgi_params;\n    }\n    # Even though .htaccess rules mean nothing in the nginx\n    # world, prevent those from being downloaded anyways.\n    location ~ /\\.ht {\n       deny all;\n    }\n    # In case someone messes up, prevent .env files from\n    # being downloaded as well.\n    location ~ /\\.env {\n       deny all;\n    }\n}\nEOL\n</code></pre> <p>Warning</p> <p>The code block above should not be copied directly into a file. It is a script and should be pasted directly into the linux terminal. It will create the nginx config for you. If you create the file yourself with the above content then the file will not be valid and you will receive errors from nginx.</p> <p>The configuration file as is at <code>/etc/nginx/sites-available/seat</code> itself won't be loaded by <code>nginx</code> yet. Storing configuration files in a <code>*sites-available*</code> directory is simply a convention used to allow administrators to quickly add &amp; remove sites if needed. To apply the changes made by the new configuration file it needs to be symlinked to a <code>*sites-enabled*</code> directory.</p> <p>Let's symlink to the new configuration and drop the default one as a hardening exercise at the same time:</p> <pre><code>ln -s /etc/nginx/sites-available/seat /etc/nginx/sites-enabled/seat\nrm /etc/nginx/sites-enabled/default\n</code></pre> <p>Finally, reload <code>nginx</code> and <code>php-fpm</code> for the new changes to take affect:</p> <pre><code>systemctl restart nginx.service\nsystemctl restart php7.3-fpm.service\n</code></pre>"},{"location":"installation/old_versions/manual_installation_seat_4/#esi-configuration","title":"ESI Configuration","text":"<p>As mentioned at the start of the guide, it is necessary for you to configure ESI. For instructions how to do this, please refer to the ESI Setup Guide.</p> <p>Info</p> <p>You may want to serve your SeAT installation over SSL (using HTTPS) - which is a recommanded behavior. There are many way to do it, you can have a look on Let's Encrypt which provide you valid certificates for free. Put an eye to their Certbot Documentation.</p> <p>Success</p> <p>You made it! Use a browser and browse to the IP address / hostname of your server to access SeAT!</p>"},{"location":"upgrading/from_seat_1_0/","title":"From SeAT 1.0","text":""},{"location":"upgrading/from_seat_1_0/#seat-10-to-20","title":"SeAT 1.0 to 2.0","text":"<p>The upgrade path from SeAT 1.x to SeAT 2.0 requires some manual work. This is mainly due to the number of fundamental changes that were made in the SeAT 2.x release.</p>"},{"location":"upgrading/from_seat_1_0/#notes-on-the-upgrade","title":"Notes on the upgrade","text":"<p>The way SeAT is structured has not changed much since its version 1x days. The biggest change is a Laravel framework upgrade to version 5.3. This introduced a new base layout for the application which is why the manual upgrade is needed.</p> <p>The upgrade process has a large amount of database migrations that need to run so grab a coffee depending on how big your database is!</p>"},{"location":"upgrading/from_seat_1_0/#requirements","title":"Requirements","text":"<ul> <li>SeAT 2.0 requires PHP 7.0. At the time of writing this document, PHP 7.1 is not supported due to bug in PhealNG (the component SeAT uses to talk to the EVE API).</li> <li>MySQL 5.7 is recommended but not required.</li> <li>A database backup is an absolute must. Everything in SeAT can be recovered is some way or form except for your database. Make 100% sure you backed this up before proceeding with the upgrade!</li> <li>Take note of where SeAT is installed. This is usually in <code>/var/www/seat</code>.</li> </ul>"},{"location":"upgrading/from_seat_1_0/#upgrade-procedure","title":"Upgrade procedure","text":""},{"location":"upgrading/from_seat_1_0/#preparation","title":"Preparation","text":"<p>If users are using your SeAT instance, or the workers are churning away in the background, then you may risk losing some information (although unlikely). Its therefore recommended that you start by putting SeAT into maintenance mode before starting the upgrade. Do this by running the following command in your SeAT path.</p> <pre><code>$ cd /var/www/seat\n$ php artisan down\n</code></pre> <p>You should see the message Application is now in maintenance mode..</p>"},{"location":"upgrading/from_seat_1_0/#backups","title":"Backups","text":"<ul> <li>Make a backup of your SeAT database and store it somewhere safe! Do not skip this step!</li> <li>In your SeAT directory, make a copy of the <code>.env</code> file. This file contains all of your SeAT configuration. These values are needed to reconnect to the database once SeAT 2.0 is installed.</li> </ul>"},{"location":"upgrading/from_seat_1_0/#php-7","title":"Php 7","text":"<p>Install PHP7 if you don't have it already. You can check your PHP version by running <code>php -v</code>:</p> <pre><code>$ php -v\nPHP 7.0.14 (cli) (built: Dec  7 2016 10:25:25) ( NTS )\nCopyright (c) 1997-2016 The PHP Group\nZend Engine v3.0.0, Copyright (c) 1998-2016 Zend Technologies\n</code></pre>"},{"location":"upgrading/from_seat_1_0/#get-the-new-code","title":"Get the new code","text":"<p>SeAT 2.0 can be installed in exactly the same place as where you had your v1.x installation. If you reuse this path then no webserver re-configuration will be needed. We will move the old installation out of the way, and install SeAT 2.0. To do this, run the following commands:</p> <ul> <li>First, move the old installation out of the way:</li> </ul> <pre><code>$ cd /var/www\n$ mv seat seat.old\n</code></pre> <p>You can double check that this was successful by running <code>ls</code> and ensuring that there is a folder named <code>seat.old</code> now.</p> <ul> <li>Next, get the new SeAT code by running <code>composer create-project eveseat/seat seat --no-dev</code>:</li> </ul> <pre><code>$ cd /var/www\n$ composer create-project eveseat/seat seat --no-dev\nInstalling eveseat/seat (2.0.0)\n- Installing eveseat/seat (2.0.0)\nLoading from cache\n\nCreated project in seat\n&gt; php -r \"file_exists('.env') || copy('.env.example', '.env');\"\nLoading composer repositories with package information\nUpdating dependencies\n\n[ ... snip ... ]\n</code></pre>"},{"location":"upgrading/from_seat_1_0/#publish-the-assets","title":"Publish the assets","text":"<p>Next, we need to publish the new SeAT 2.0 CSS &amp; Javascript and database migrations. This can be done with <code>php artisan vendor:publish --force</code>.</p>"},{"location":"upgrading/from_seat_1_0/#reconfigure-env-file","title":"Reconfigure <code>.env</code> file","text":"<p>With the new code ready to use, the next thing that is required is to reconnect the database. Remember that <code>.env</code> file you backed up earlier? Refer to it for the values needed in the newly installed env file that can be found at <code>/var/www/seat/.env</code>.</p> <p>Important keys to populate with the correct values are:</p> <pre><code>DB_HOST=\nDB_PORT=\nDB_DATABASE=\nDB_USERNAME=\nDB_PASSWORD=\n</code></pre> <p>SeAT 2.0 introduced new configuration items in the <code>.env</code> that you can review. There is also the option to configure Supervisor &amp; SeAT integration, which can be done by following the admin guide titled SeAT &amp; Supervisor Integration.</p>"},{"location":"upgrading/from_seat_1_0/#run-migrations","title":"Run migrations","text":"<p>With the database reconnected, its time to run the migrations for SeAT 2.0. This is the part that may take some time, depending on how big your database is.</p> <p>To run the migrations, make sure you are still in your seat path (<code>/var/www/seat</code>) and run <code>php artisan migrate</code>:</p> <pre><code>$ cd /var/www/seat\n$ php artisan migrate\n</code></pre> <p>You will see a bunch of messages and eventually your shell prompt again, indicating that it has completed. If you receive errors here, double check that you have entered the correct database settings in the <code>.env</code> file previously mentioned.</p>"},{"location":"upgrading/from_seat_1_0/#database-seeders","title":"Database seeders","text":"<p>With the database migration complete, its time to seed it with some of the static data SeAT needs. Do this with the following commands:</p> <pre><code>php artisan db:seed --class=Seat\\\\Notifications\\\\database\\\\seeds\\\\ScheduleSeeder\nphp artisan db:seed --class=Seat\\\\Services\\\\database\\\\seeds\\\\NotificationTypesSeeder\nphp artisan db:seed --class=Seat\\\\Services\\\\database\\\\seeds\\\\ScheduleSeeder\n</code></pre>"},{"location":"upgrading/from_seat_1_0/#update-worker-jobs","title":"Update worker jobs","text":"<p>The Laravel 5.3 upgrade in SeAT changed the way worker jobs are started. You can edit the command used to start a worker in your <code>seat.conf</code> file in supervisor. Normally, this file will be somewhere like in <code>/etc/supervisor/conf.d/</code>.</p> <p>The only line you really need to edit is the one that starts with <code>command</code>, replacing it with:</p> <pre><code>command=/usr/bin/php /var/www/seat/artisan queue:work --queue=high,medium,low,default --tries 1 --timeout=86100\n</code></pre> <p>A full block for SeAT 2.0 should therefore be:</p> <pre><code>[program:seat]\ncommand=/usr/bin/php /var/www/seat/artisan queue:work --queue=high,medium,low,default --tries 1 --timeout=86100\nprocess_name = %(program_name)s-80%(process_num)02d\nstdout_logfile = /var/log/seat-80%(process_num)02d.log\nstdout_logfile_maxbytes=100MB\nstdout_logfile_backups=10\nnumprocs=4\ndirectory=/var/www/seat\nstopwaitsecs=600\nuser=www-data\n</code></pre> <p>Note</p> <p>Keep in mind the <code>user</code> value and the path to <code>artisan</code> should be correct. Update them to the correct values of you made changes to the defaults. The <code>user</code> value differs many times based on Linux distribution too!</p>"},{"location":"upgrading/from_seat_1_0/#finishing-off","title":"Finishing off","text":"<p>With all of that done, bring your application back up with <code>php artisan up</code> and start the supervisor workers again. Watch the logs for any errors in case things have not gone as expected. If you need any help, feel free to join the Slack channel details in the Contact page on the left.</p>"},{"location":"upgrading/from_seat_2_0/","title":"From SeAT 2.0","text":""},{"location":"upgrading/from_seat_2_0/#seat-20-to-30","title":"SeAT 2.0 to 3.0","text":"<p>The upgrade path from SeAT 2.x to SeAT 3.0 requires some manual work. This is mainly due to the number of fundamental database changes that were made in SeAT 3.x.</p>"},{"location":"upgrading/from_seat_2_0/#notes-on-the-upgrade","title":"Notes on the upgrade","text":"<p>Most of the database has been revamped to match ESI models. Therefore, we can't offer you a simple update as we do for minor patches. However, once migrated, updates can be done as per usual.</p> <p>The process described bellow handles data conversion between the SeAT 2.x structure and SeAT 3.x one.</p>"},{"location":"upgrading/from_seat_2_0/#requirements","title":"Requirements","text":"<ul> <li>Check SeAT 3.0 Requirements</li> <li>A database backup is an absolute must. Everything in SeAT can be recovered is some way or   form except for your database. Make 100% sure you backed this up before proceeding with the upgrade!</li> <li>Enough storage space to contains SeAT 2, SeAT 3, a backup of SeAT 2 database and a backup of SeAT 3 database.</li> <li>Take note of where SeAT 2 is installed. This is usually in <code>/var/www/seat</code>.</li> </ul>"},{"location":"upgrading/from_seat_2_0/#upgrade-procedure","title":"Upgrade procedure","text":""},{"location":"upgrading/from_seat_2_0/#preparation","title":"Preparation","text":"<p>If users are using your SeAT instance, or the workers are churning away in the background, then you may risk losing some information (although unlikely). Its therefore recommended that you start by putting SeAT into maintenance mode before starting the upgrade. Do this by running the following command in your SeAT path. </p> <pre><code>php artisan down\n</code></pre> <p>If you are running this migration after CCP killed the XML API then there is probably no risk of the updaters doing anything useful anyways :D</p>"},{"location":"upgrading/from_seat_2_0/#backups","title":"Backups","text":"<ul> <li>Make a backup of your SeAT database and store it somewhere safe! Do not skip this step!</li> <li>In your SeAT directory, make a copy of the <code>.env</code> file. This file contains all of your SeAT configuration. These values may be useful in case of failure.</li> </ul>"},{"location":"upgrading/from_seat_2_0/#installing-seat-30","title":"Installing SeAT 3.0","text":"<p>Rename the current SeAT directory from <code>/var/www/seat</code> to <code>/var/www/seat2</code>. You don't have to update any config since we will only use the command line for the process. <code>mv /var/www/seat /var/www/seat2</code></p> <p>Follow standard installation instructions for SeAT 3.0.</p> <p>Warning</p> <p>You need to keep the current SeAT 2.0 installed in order to migrate data to a newly installed 3.0 instance. It doesn't have to be reachable from internet though since we will only use the command line for the process.</p>"},{"location":"upgrading/from_seat_2_0/#installing-the-migrator-package-on-seat-20","title":"Installing the migrator package on SeAT 2.0","text":"<ul> <li>Move to your SeAT 2.0 installation directory (should be <code>/var/www/seat2</code> - unless you changed it)</li> <li>Add the package called <code>seat-migrator</code> using <code>composer require warlof/seat-migrator</code></li> <li>Edit the <code>app.php</code> file inside the <code>config</code> folder by appending <code>Warlof\\Seat\\Migrator\\MigratorServiceProvider::class,</code> to the end of <code>providers</code> array.</li> <li>Once done, publish the package files using <code>php artisan vendor:publish --force</code></li> <li>Run migration scripts with <code>php artisan migrate</code></li> <li>Finally, run <code>php artisan seat:migrator:upgrade</code> and follow the wizard</li> </ul> <p>At the end of the process, you will have most of your data transferred into the specified SeAT 3.0 database. Next, you can remove the seat2 directory with <code>rm -R /var/www/seat2</code> and the old database.</p> <p>Enjoy SeAT 3.0</p> <p>Note</p> <p>In case of any troubles, the migrator package did a backup before starting the migration process. The output is specified in the prompt while it is being done, but you will also find it in <code>/var/www/seat2/storage/backup</code>.</p>"},{"location":"upgrading/general/","title":"General","text":""},{"location":"upgrading/general/#general-upgrades","title":"General Upgrades","text":"<p>As with anything, it is a very good idea to have backups ready before attempting any upgrades. In the case of SeAT, the most important component needs to be backed up is the SeAT database. Should something go wrong, then you can simply re-install SeAT, restore the database, and you should be good to go.</p>"},{"location":"upgrading/general/#docker-installation","title":"Docker installation","text":"<p>As expected, updates for SeAT are deployed via images on the GitHub Container Registry. Every package version release will automatically start the build process to generate a new docker image. This means updates are super simple in the docker world. To update your instance, simply run:</p> SeAT 4.xSeAT 5.x - TraefikSeAT 5.x - Proxy <pre><code># Update to the latest dockerhub images\ndocker-compose pull\n\n# Take the stack down\ndocker-compose down\n\n# Bring the stack back up\ndocker-compose up -d\n\n# Cleanup any dangling images\ndocker image prune -f\n</code></pre> <pre><code># Update to the latest dockerhub images\ndocker compose -f docker-compose.yml -f docker-compose.mariadb.yml -f docker-compose.traefik.yml pull\n\n# Take the stack down\ndocker compose -f docker-compose.yml -f docker-compose.mariadb.yml -f docker-compose.traefik.yml down\n\n# Bring the stack back up\ndocker compose -f docker-compose.yml -f docker-compose.mariadb.yml -f docker-compose.traefik.yml up -d\n\n# Cleanup any dangling images\ndocker image prune -f\n</code></pre> <pre><code># Update to the latest dockerhub images\ndocker compose -f docker-compose.yml -f docker-compose.mariadb.yml -f docker-compose.proxy.yml pull\n\n# Take the stack down\ndocker compose -f docker-compose.yml -f docker-compose.mariadb.yml -f docker-compose.proxy.yml down\n\n# Bring the stack back up\ndocker compose -f docker-compose.yml -f docker-compose.mariadb.yml -f docker-compose.proxy.yml up -d\n\n# Cleanup any dangling images\ndocker image prune -f\n</code></pre> <p>Better safe then sorry</p> <p>Always perform a database backup of your database before doing an update. Always.</p>"},{"location":"upgrading/general/#blade-installation","title":"Blade installation","text":"<ul> <li>Ensure that you are in the path where you installed. By default this should be <code>/var/www/seat</code>.</li> <li>Cut jobs processing.</li> </ul> <pre><code>supervisorctl stop all\n</code></pre> <ul> <li>Put your application into maintenance mode. This will ensure that no request from the outside will hit your applications logic, and also help you perform an upgrade uninterrupted. Do this with:</li> </ul> <pre><code>php artisan down\n</code></pre> <ul> <li>Its a good thing to update <code>composer</code> itself. This is not a hard requirement, but definitely recommended. Do this with:</li> </ul> <pre><code>composer self-update\n</code></pre> <ul> <li>The next thing to do is get the latest SeAT packages. The below example adds the <code>--no-dev</code> argument as these packages are generally not needed in production. Upgrade the packages with:</li> </ul> <pre><code>composer update --no-dev\n</code></pre> <ul> <li>With the packages upgraded, we can now publish any new migrations/assets/configs. This can be done with:</li> </ul> <pre><code>php artisan vendor:publish --force --all\n</code></pre> <ul> <li>Once the needed files are published, run any new/outstanding migrations with:</li> </ul> <pre><code>php artisan migrate\n</code></pre> <ul> <li>With the migrations done, run the seeders to update any static data:</li> </ul> SeAT 4.xSeAT 5.x <pre><code>php artisan db:seed --class=Seat\\\\Console\\\\database\\\\seeds\\\\ScheduleSeeder\n</code></pre> <pre><code>php artisan db:seed --class=Seat\\\\Services\\\\Database\\\\Seeders\\\\PluginDatabaseSeeder\n</code></pre> <ul> <li>Finally, we can simply bring our application back out of maintenance mode with:</li> </ul> <pre><code>php artisan up\n</code></pre> <ul> <li>Prune job queue, this will prevent already queued jobs to use old codebase</li> </ul> <pre><code>php artisan cache:clear\n</code></pre> <ul> <li>Renew cached configuration and routes</li> </ul> <pre><code>php artisan config:cache\nphp artisan route:cache\n</code></pre> <ul> <li>Restart the supervisor workers to ensure they also pickup the latest code:</li> </ul> <pre><code>supervisorctl start all\n</code></pre> <p>Better safe then sorry</p> <p>Always perform a database backup of your database before doing an update. Always.</p> <p>You can use <code>mysqldump -uroot -p seat &gt; backup.sql</code> (change root and seat according to your configuration)</p>"},{"location":"upgrading/from_seat_3_0/bare_metal/","title":"SeAT 3.0 to 4.0 (Bare metal)","text":"<p>The upgrade path from SeAT 3.0 to SeAT 4.0 requires some manual work. This is primarily due to large amounts of refactoring that made it into SeAT 4.</p> <p>Info</p> <p>Major changes have been made to the way packages workg together, especially the eveapi, web and services packages.</p> <p>The way jobs are queued and queues themselves have also changed, mostly to reduce resource usage and to improve fluency.</p> <p>Before starting the upgrade, pay check the plugins you may be using and ensure that they are compatible with SeAT 4. If you are unsure, join us on Slack so that we can tru and assist or redirect you to proper person.</p> <p>Warning</p> <p>Before you do anything, read and understand this entire upgrade guide.</p> <p>Those instructions are valid for bare metal deployment only (non-docker installation). Please refer to docker instructions for a Docker installation.</p> <p>Remember to do a complete backup of your current database making a copy off the server where SeAT runs together with the <code>.env</code> file. Both of these are the only things required to rebuilt your instance in case of failure.</p>"},{"location":"upgrading/from_seat_3_0/bare_metal/#requirements","title":"Requirements","text":"<ul> <li>Check SeAT 4.0 requirements</li> <li>A database backup is an absolute must. Everything in SeAT can be recovered in some way or form except for your database.</li> <li>Enough storage space to have SeAT 3, SeAT 4 and a backup of your SeAT 3 database.</li> <li>Ensure all your SeAT 3 packages are up-to-date (check this in Settings &gt; SeAT Settings)</li> </ul>"},{"location":"upgrading/from_seat_3_0/bare_metal/#upgrade-procedure","title":"Upgrade Procedure","text":""},{"location":"upgrading/from_seat_3_0/bare_metal/#preparation","title":"Preparation","text":"<p>If users are using your SeAT instance, or the workers are churning away in the background, then you may risk losing some information (although unlikely) - or cause crash during database conversion. Please start to turning SeAT in maintenance mode, cutting jobs and clearing caches before starting the upgrade.</p> <p>Turn workers down, use the command</p> <pre><code>service supervisor stop\n</code></pre> <p>Put SeAT in maintenance mode</p> <pre><code>sudo -H -u www-data bash -c 'php /var/www/seat/artisan down'\n</code></pre> <p>Clear cache</p> <pre><code>sudo -H -u www-data bash -c 'php /var/www/seat/artisan seat:cache:clear'\n</code></pre>"},{"location":"upgrading/from_seat_3_0/bare_metal/#backups","title":"Backups","text":"<ul> <li>Make a backup of your SeAT database and store it somewhere safe! Do no skip this step!</li> <li>In your SeAT directory, make a copy of the <code>.env</code> file. This file contains all your SeAT configuration, including tokens watermark required to update your registered users content. These values might be useful in case of failure.</li> </ul>"},{"location":"upgrading/from_seat_3_0/bare_metal/#installing-seat-40","title":"Installing SeAT 4.0","text":"<p>Rename the current SeAT directory from <code>/var/www/seat</code> to <code>/var/www/seat3</code>. You don't have to update any config since we will only use the command line for the process.</p> <pre><code>mv /var/www/seat /var/www/seat3\n</code></pre>"},{"location":"upgrading/from_seat_3_0/bare_metal/#php","title":"PHP","text":"<p>If it's not already the case, you'll have to deploy at least PHP 7.3 on the server. The provided command bellow will help you in this task and add newly required PHP extensions in the meantime.</p> <pre><code>apt-get update\napt-get install libpng-dev libfreetype6-dev libjpeg-dev\napt-get install curl openssl zip php7.3-bz2 php7.3-cli php7.3-curl php7.3-dom php7.3-gd php7.3-gmp php7.3-intl php7.3-mbstring php7.3-mysql php7.3-opcache php7.3-redis php7.3-zip\n</code></pre> <p>Remember to update your NGinX configuration to use the new CGI version. To do so, open configuration file located at <code>/etc/nginx/sites-available/seat</code> and replace</p> <pre><code>       fastcgi_pass unix:/run/php/php7.1-fpm.sock;\n</code></pre> <p>with</p> <pre><code>       fastcgi_pass unix:/run/php/php7.3-fpm.sock;\n</code></pre>"},{"location":"upgrading/from_seat_3_0/bare_metal/#seat","title":"SeAT","text":"<p>Once packages have been updated, we will deploy the new SeAT's version using composer.</p> <pre><code>composer create-project eveseat/seat /var/www/seat \"4.0.*\" --no-dev --no-interaction\n</code></pre> <p>Once the download is done, you should have seen output such as:</p> <pre><code>Writing lock file\nGenerating optimized autoload files\n&gt; Illuminate\\Foundation\\ComposerScripts::postAutoloadDump\n&gt; @php artisan package:discover\nDiscovered Package: darkaonline/l5-swagger\nDiscovered Package: eveseat/api\nDiscovered Package: eveseat/console\nDiscovered Package: eveseat/eveapi\nDiscovered Package: eveseat/notifications\nDiscovered Package: eveseat/services\nDiscovered Package: eveseat/web\nPackage manifest generated successfully.\n&gt; @php artisan key:generate\nApplication key [base64:CmhqYNkaIcHo8nYC8LiEWa3U5/+BiTLih5dZftxlV2k=] set successfully.\n</code></pre> <p>Finally, fix directories permissions using the two commands bellow:</p> <pre><code>chown -R www-data:www-data /var/www/seat\nchmod -R guo+w /var/www/seat/storage/\n</code></pre>"},{"location":"upgrading/from_seat_3_0/bare_metal/#setup","title":"Setup","text":"<p>Now sources have been deployed, we have to update <code>.env</code> configuration file. Use information from backup located at <code>/var/www/seat3/.env</code> to update the newly generated file located at <code>/var/www/seat/.env</code>.</p> <p>Info</p> <p>In case you had third party packages installed, it's time to deploy them back. We invite you to report to their own documentation regarding any specific guideline.</p> <p>Warning</p> <p>Please pay special attention to APP_KEY, DB_HOST, DB_PORT, DB_DATABASE, DB_USERNAME, DB_PASSWORD, EVE_CLIENT_ID, EVE_CLIENT_SECRET and EVE_CALLBACK_URL parameters.</p>"},{"location":"upgrading/from_seat_3_0/bare_metal/#database","title":"Database","text":"<p>We will convert database to work with new SeAT version. To do so, we're using common commands disclosed bellow:</p> <pre><code>sudo -H -u www-data bash -c 'php /var/www/seat/artisan vendor:publish --force --all'\nsudo -H -u www-data bash -c 'php /var/www/seat/artisan migrate'\nsudo -H -u www-data bash -c 'php /var/www/seat/artisan db:seed --class=Seat\\\\Console\\\\database\\\\seeds\\\\ScheduleSeeder'\nsudo -H -u www-data bash -c 'php /var/www/seat/artisan eve:update:sde --force'\n</code></pre>"},{"location":"upgrading/from_seat_3_0/bare_metal/#complete","title":"Complete","text":"<p>Finally, restore workers states and put SeAT online using initial commands in reverse order.</p> <p>Put SeAT online</p> <pre><code>sudo -H -u www-data bash -c 'php /var/www/seat/artisan up'\n</code></pre> <p>Convert user tokens format from previous version</p> <pre><code>sudo -H -u www-data bash -c 'php /var/www/seat/artisan seat:token:upgrade'\n</code></pre> <p>Turn workers up</p> <pre><code>service supervisor start\n</code></pre>"},{"location":"upgrading/from_seat_3_0/bare_metal/#access","title":"Access","text":"<p>SeAT 4.0 is coming with a complete revamp of permissions system. As a result, your previous roles haven't been converted. However, they've been keep - so you can configure them with the new system.</p> <p>You will have to use built-in admin account for your first connexion.</p> <p>Info</p> <p>Super administrator is now an user flag and have to be defined at user level instead of Access Permissions. You'll get more information regarding the new system on Admin Login and Authorizations pages.</p>"},{"location":"upgrading/from_seat_3_0/docker/","title":"SeAT 3.0 to 4.0 (Docker)","text":"<p>The upgrade path from SeAT 3.0 to SeAT 4.0 requires some manual work. This is primarily due to large amounts of refactoring that made it into SeAT 4.</p> <p>Info</p> <p>Major changes have been made to the way packages workg together, especially the eveapi, web and services packages.</p> <p>The way jobs are queued and queues themselves have also changed, mostly to reduce resource usage and to improve fluency.</p> <p>Before starting the upgrade, pay check the plugins you may be using and ensure that they are compatible with SeAT 4. If you are unsure, join us on Slack so that we can tru and assist or redirect you to proper person.</p> <p>Warning</p> <p>Before you do anything, read and understand this entire upgrade guide.</p> <p>Those instructions are valid for Docker deployment only. Please refer to bare metal instructions for a non-docker installation.</p> <p>Remember to do make a complete backup of your current database making a copy off the server where SeAT runs together with the <code>.env</code> file. Both of these are the only things required to rebuilt your instance in case of failure.</p>"},{"location":"upgrading/from_seat_3_0/docker/#requirements","title":"Requirements","text":"<ul> <li>Check SeAT 4.0 requirements</li> <li>A database backup is an absolute must. Everything in SeAT can be recovered in some way or form except for your database.</li> <li>Enough storage space to have SeAT 3, SeAT 4 and a backup of your SeAT 3 database.</li> <li>Ensure all your SeAT 3 packages are up-to-date (check this in Settings &gt; SeAT Settings)</li> </ul>"},{"location":"upgrading/from_seat_3_0/docker/#docker-upgrade-procedure","title":"Docker Upgrade Procedure","text":"<p>If you are currently using a docker installation for SeAT 3, you are in for a treat because upgrading is super easy. All we are going to do is bring the v4 stack up, connect your database and watch as the Docker entrypoint takes care of the rest.</p> <p>This guide is going to step through some quick preparation steps, then perform the upgrade and finally, check that everything worked out as expected. Let's dive in.</p>"},{"location":"upgrading/from_seat_3_0/docker/#tldr-upgrades","title":"tl;dr upgrades","text":"<p>We highly reccomend that you read the details of this upgrade guide to get familiar with what has changed. But, if this is your nth upgrade, maybe you just want to get the summary of everything, so here it is:</p> <ul> <li>Make a backup of your database.</li> <li><code>cd</code> to your install dir (which is probably <code>/opt/seat-docker</code>) and bring the stack down with <code>docker-compose down</code></li> <li>Make a copy of your <code>.env</code> and <code>docker-compose.yml</code> files.</li> <li>Download the new <code>docker-compose.yml</code> file with <code>curl -L https://raw.githubusercontent.com/eveseat/seat-docker/4.x/docker-compose.yml -o docker-compose.yml</code>.</li> <li>Down the new <code>.env</code> file with <code>curl -L https://raw.githubusercontent.com/eveseat/seat-docker/4.x/.env -o .env</code>.</li> <li>Upgrade your <code>docker-compose</code> installation. It should be version <code>1.26</code> and up.</li> <li>Configure the new <code>.env</code> file. Important configs include the <code>TRAEFIK_</code> variables, the <code>SEAT_SUBDOMAIN</code> variable. Copy over existing values from your old <code>.env</code> file for the <code>EVE_CLIENT_</code> variables, the <code>APP_KEY</code> varaible and finally the <code>DB_</code> variables.</li> <li>Bring the stack back up with <code>docker-compose up -d</code> and watch the migration process.</li> <li>Finally, once the migration process is complete, update the EVE SDE to populate the tables with static data with: <code>docker-compose exec seat-web php artisan eve:update:sde --force -n</code></li> </ul> <p>\ud83c\udf89</p>"},{"location":"upgrading/from_seat_3_0/docker/#docker-changes-since-seat-3","title":"Docker changes since SeAT 3","text":"<p>A number of changes have been made how the docker-compose stack is glued together.</p> <p>First, the docker repository for SeAT 4 has a new home here, and a new image here.</p> <p>In SeAT 3, services such as web, workers and cron were all using seperate images. For SeAT 4, we have consilidated all of that into a single image, with a service-aware entrypoint. The code for all of this lives in a new dedicated repository instead of being \"hidden\" away in the script repo here. All of these changes also mean that we now have the ability to properly tag the docker images instead of relying on the <code>latest</code> tag like we did in SeAT 3. Finally.</p> <p>Next, the default <code>nginx</code> web server has been replaced with Traefik. For the majority of users this means little to no change to what you were used to. However, if you were fronting your instance with another reverse proxy, it is important to be aware of this change. The base image used for the SeAT docker image uses apache2 to serve the web UI, and Traefik reverse proxies to this, exposing it to the world. Advanced users can rip this out, expose the apache server directly and continue using the setup you have. The options are limitless.</p>"},{"location":"upgrading/from_seat_3_0/docker/#preperation","title":"Preperation","text":"<p>Before you upgrade, you need to backup.</p>"},{"location":"upgrading/from_seat_3_0/docker/#backup-your-database","title":"Backup your database","text":"<p>The single most important thing you need is a backup of your SeAT 3 database. Without a backup you will not be able to recover in case of a disaster. So, head on over to the docker db backup section and do that right now.</p>"},{"location":"upgrading/from_seat_3_0/docker/#backup-your-env-file","title":"Backup your env file","text":"<p>The <code>.env</code> file is the one that has your SeAT installations' configuration. It contains things like your SSO Client ID and Secret (aka: credentials). By default, SeAT docker installations live in <code>/opt/seat-docker</code> meaning your <code>.env</code> file will be at <code>/opt/seat-docker/.env</code>. Make a copy of this file and store it somewhere safe.</p>"},{"location":"upgrading/from_seat_3_0/docker/#upgrade-docker-compose","title":"Upgrade docker-compose","text":"<p>The <code>docker-compose</code> binary should be upgraded so that we can make use of <code>${VARIABLES}</code> inside <code>.env</code> files.</p> <p>If you installed <code>docker-compose</code> using your OS' package manager, upgrade the tool using that. Otherwise, a <code>curl</code> invocation to download the latest version should also work.</p> <pre><code>curl -L https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\n</code></pre>"},{"location":"upgrading/from_seat_3_0/docker/#stop-seat-3","title":"Stop SeAT 3","text":"<p>First, we need to stop the SeAT 3 stack. Assuming you have the default <code>/opt/seat-docker</code> location for your installation, cd to it first and then run:</p> <pre><code>docker-compose down\n</code></pre> <p>The output should be similar to this:</p> <pre><code>root@seat:/opt/seat-docker# docker-compose down\nStopping seat-nginx   ... done\nStopping seat-cron    ... done\nStopping seat-worker  ... done\nStopping seat-app     ... done\nStopping seat-mariadb ... done\nStopping seat-redis   ... done\nRemoving seat-nginx   ... done\nRemoving seat-cron    ... done\nRemoving seat-worker  ... done\nRemoving seat-app     ... done\nRemoving seat-mariadb ... done\nRemoving seat-redis   ... done\nRemoving network seat-docker_seat-network\n</code></pre>"},{"location":"upgrading/from_seat_3_0/docker/#upgrading-to-seat-4","title":"Upgrading to SeAT 4","text":""},{"location":"upgrading/from_seat_3_0/docker/#get-the-new-docker-compose-file","title":"Get the new docker-compose file","text":"<p>Warning</p> <p>If you have made customisations to how you deployed SeAT with docker-compose, then you should probably not be replacing the compose file like we are about to do. Instead, have a look at the new one here and adapt.</p> <p>Next, we will download the new SeAT 4 docker-compose file. Do that with:</p> <pre><code>mv docker-compose.yml docker-compose.yml.back\ncurl -L https://raw.githubusercontent.com/eveseat/seat-docker/4.x/docker-compose.yml -o docker-compose.yml\n</code></pre> <p>With this we have created a copy of the older docker-compose file (just in case), and downloaded the new one.</p>"},{"location":"upgrading/from_seat_3_0/docker/#get-the-new-env-file","title":"Get the new .env file","text":"<p>The next step is to get a fresh copy of the new <code>.env</code> file to use together with the new docker-compose setup. There have been a number of changes to this file (primarily as a result of the web server swap out) which we will describe in the next section.</p> <p>Get it with:</p> <pre><code>mv .env .env.back\ncurl -L https://raw.githubusercontent.com/eveseat/seat-docker/4.x/.env -o .env\n</code></pre>"},{"location":"upgrading/from_seat_3_0/docker/#configure-the-new-env-file","title":"Configure the new .env file","text":"<p>Info</p> <p>This is admitedly the hardest part of the migtation, so pay close attention. Take it slowly and think about what you are doing here.</p> <p>There are four main settings categories that need to be updated in the new <code>.env</code> file. Those are:</p> <ul> <li>Traefik (webserver)</li> <li>EVE Online SSO Config</li> <li>The application key</li> <li>Database credentials</li> </ul> <p>All of these categories will be described below in detail. For all of them, you have to open the newly downloaded <code>.env</code> file in a text editor and update the values. To be sure you are editing the correct file, check its header. It should say:</p> <pre><code># SeAT Docker Compose Configuration\n\n# Web server configuration.\n# SeAT running in a docker-compose setup ships with Traefik\n# as the default web server. You only need to configure the\n# parent domain and port where the web server will listen.\n# In most cases, just configuring the domain will be all\n# you need to do.\n</code></pre>"},{"location":"upgrading/from_seat_3_0/docker/#traefik","title":"Traefik","text":"<p>As mentioned earlier. The web server has been swapped out in favour of Traefik. As a result, you need to set a few configuration options to get the web UI to work. If you have a setup where you have configured something like <code>nginx</code> outside of your Docker installation, we highly reccomend you just remove that and switch over to Traefik. Of anything, it's handling of TLS with Let's Encrypt is quite literally a one-time setup and forget thing.</p> <p>Inside the <code>.env</code> file, Traefik specific configuration options are prefixed with <code>TRAEFIK_</code>. They are:</p> <pre><code>TRAEFIK_DOMAIN=seat.local\nTRAEFIK_HTTPS_PORT=443\nTRAEFIK_HTTP_PORT=80\nTRAEFIK_ACME_EMAIL=you@domain.com\n</code></pre> <p>These fields need to be updated as follows:</p> <ul> <li><code>TRAEFIK_DOMAIN</code>: This is the base domain where your SeAT installation lives. For example, if your SeAT 3 installation lives at seat.domain.com, you enter domain.com here.</li> <li><code>TRAEFIK_HTTPS_PORT</code>: This is the external port that will be open to the world. SeAT 4 in docker with Traefik will only listen on TLS as well. Since its configured to be <code>443</code>, it will most likely clash with your external web server. We reccomend that you just disable your external web server and use Traefik. TLS configuration with it is a breeze!</li> <li><code>TRAEFIK_HTTPS_PORT</code>: This is the non-TLS port that Let's Encrypt (as part of the ACME protocol) will connect to during certificate renewals. SeAT will not be available here.</li> <li><code>TRAEFIK_ACME_EMAIL</code>: The email address used for Let's Encrypt certificate renewals.</li> </ul> <p>A <code>SEAT_SUBDOMAIN</code> value is also present, which sets the subdomain where the SeAT web UI lives. This value needs to match what your SeAT 3 installation used, especially so that the existing SSO application you have configured on the EVE SSO portal matches the configured callback url.</p> <p>By default, most folks will only configure the domain, subdomain and email and be done. Of course, if you have custom configurations and needs, feel free to adapt.</p>"},{"location":"upgrading/from_seat_3_0/docker/#traefik-tls","title":"Traefik - TLS","text":"<p>Traefik should handle all of the relevant configuration to get your site to listen with a valid TLS certificate. The secrets for the TLS configuration in Traefik relies on an <code>acme.json</code> file which you should mount into the Traefik container from the outside so that it persists restart.</p> <p>Prepare the json file from within <code>/opt/seat-docker</code> with:</p> <pre><code>mkdir acme\ntouch acme/acme.json\nchmod 600 acme/acme.json\n</code></pre> <p>Next, make sure you have the <code>TRAEFIK_ACME_EMAIL</code> variable set, and finally, uncomment the labels that will make use of the Let's Encrypt cert resolver in the <code>docker-compose.yml</code> file. By default, they will look like this, whereby you need to remove the <code>#</code> in front.</p> <p>(Note: the line below in <code>docker-compose.yml</code> is located in two places, only remove the <code>#</code> from seat-web)</p> <pre><code>#- \"traefik.http.routers.seat-web.tls.certResolver=primary\"\n</code></pre>"},{"location":"upgrading/from_seat_3_0/docker/#eve-online-sso","title":"EVE Online SSO","text":"<p>Since SeAT's authentication relies on EVE's SSO, you need to configure the relevant client id and secret. You can find your old values in the backup you have made of the <code>.env</code> file. The values you need to set are:</p> <ul> <li><code>EVE_CLIENT_ID</code></li> <li><code>EVE_CLIENT_SECRET</code></li> </ul> <p>For the callback URL, ensure that you have correctly configured the <code>SEAT_SUBDOMAIN</code> value in the previous step.</p>"},{"location":"upgrading/from_seat_3_0/docker/#the-seat-application-key","title":"The SeAT Application Key","text":"<p>By default, the <code>APP_KEY</code> value for a fresh <code>.env</code> file will be <code>insecure</code>. This is a purposefully incorrectly formatted value. You can simply set this to the value you have for the same variable in your backup <code>.env</code> file.</p>"},{"location":"upgrading/from_seat_3_0/docker/#database-details","title":"Database details","text":"<p>This is one of the more important steps. The database configuration needs to match what your SeAT 3 installation used because the database data lives in a docker volume. When the stack will start up for the first time again, the SeAT 4 container will have access to the SeAT 3 database volume, and run migrations there. So, you need to copy the database credentials from the old <code>.env</code> file to the new one.</p> <p>The variable names have remained unchanged, but for referece they are:</p> <pre><code>DB_DATABASE=seat\nDB_USERNAME=seat\nDB_HOST=mariadb\nDB_PASSWORD=i_should_be_changed\n</code></pre>"},{"location":"upgrading/from_seat_3_0/docker/#bringing-seat-4-up","title":"Bringing SeAT 4 up","text":"<p>The only thing that is left to do is to start the stack up again. The first time we are goin to start SeAT 4 we wont use the <code>-d</code> flag. This is just so that you can see what's happening during the upgrade procedure. So, start SeAT with:</p> <pre><code>docker-compose up\n</code></pre> <p>You should see something like this happen when you run the above command:</p> <pre><code>root@seat:/opt/seat-docker# docker-compose up\nCreating network \"seat-docker_seat-network\" with the default driver\nPulling mariadb (mariadb:10)...\n10: Pulling from library/mariadb\n3ff22d22a855: Already exists\ne7cb79d19722: Already exists\n323d0d660b6a: Already exists\n\n...\n</code></pre> <p>After a while, migrations should start running:</p> <pre><code>...\n\nseat-web_1     | starting web service\nseat-web_1     | Starting first run routines\nseat-web_1     | Migrating: 2018_06_05_110000_drop_assets_from_outposts\nseat-web_1     | Migrated:  2018_06_05_110000_drop_assets_from_outposts (0.02 seconds)\nseat-web_1     | Migrating: 2019_02_09_110731_drop_type_from_notification_groups\nseat-web_1     | Migrated:  2019_02_09_110731_drop_type_from_notification_groups (0.01 seconds)\nseat-web_1     | Migrating: 2019_05_11_164831_add_permission_role_filter\n\n...\n</code></pre> <p>Warning</p> <p>Do not interrupt the database migration phase. It will leave your database in a potentially corrupt state, meaning you are going to have to do some extra pluming to get a backup restored. Not a train smash, but not worth it.</p> <p>Be patient, there are many, many database changes that need to apply.</p> <p>Eventually, when everything is done you should start seeing the following output:</p> <pre><code>seat-worker_1  | [2020-08-19 21:11:45][2] Processing: Seat\\Eveapi\\Jobs\\Status\\Status\nseat-worker_1  | [2020-08-19 21:11:45][1] Processing: Seat\\Eveapi\\Jobs\\Status\\Esi\nseat-worker_1  | [2020-08-19 21:11:46][2] Processed:  Seat\\Eveapi\\Jobs\\Status\\Status\nseat-worker_1  | [2020-08-19 21:11:46][1] Processed:  Seat\\Eveapi\\Jobs\\Status\\Esi\n</code></pre> <p>This is a good sign, and means everything is now ready!</p>"},{"location":"upgrading/from_seat_3_0/docker/#check-your-installation","title":"Check your installation","text":"<p>The first obvious step will be to check that you can access the web UI. If not, something is probably weird with the web server configuration and needs some tweaking.</p> <p>If everything seems to be working fine, you can hit <code>crtl + c</code> which will bring the stack down gracefully.</p> <pre><code>^CGracefully stopping... (press Ctrl+C again to force)\nStopping seat-docker_seat-cron_1   ...\nStopping seat-docker_seat-worker_1 ...\nStopping seat-docker_seat-web_1    ...\nStopping seat-docker_traefik_1     ... done\nStopping seat-docker_redis_1       ...\n</code></pre> <p>Then, bring it back up with the <code>-d</code> flag.</p> <pre><code>docker-compose up -d\n</code></pre>"},{"location":"upgrading/from_seat_3_0/docker/#convert-user-tokens","title":"Convert User Tokens","text":"<p>SeAT 4.x is using the new CCP Token format (v2). In order to use registered tokens from your previous installation, you'll have to run the following command:</p> <pre><code>docker-compose exec seat-web php artisan seat:token:upgrade\n</code></pre>"},{"location":"upgrading/from_seat_3_0/docker/#update-eve-sde","title":"Update EVE SDE","text":"<p>This is the final step, for real. You need to update the EVE SDE. With your stack up and running (after executing <code>docker-compose up -d</code>), you can now force an SDE update with:</p> <pre><code>docker-compose exec seat-web php artisan eve:update:sde --force -n\n</code></pre> <p>Congrats, and welcome to SeAT 4!</p> <p>Info</p> <p>Super administrator is now an user flag and have to be defined at user level instead of Access Permissions. You'll get more information regarding the new system on Admin Login and Authorizations pages.</p>"},{"location":"upgrading/from_seat_4_0/bare_metal/","title":"SeAT 4.x to 5.0 (Bare metal)","text":"<p>The upgrade path from SeAT 4.0 to SeAT 5.0 requires a tiny amount of manual work.</p> <p>Warning</p> <p>Before you do anything, read and understand this entire upgrade guide.</p> <p>Those instructions are valid for bare metal deployment only (non-docker installation). Please refer to docker instructions for a Docker installation.</p> <p>Remember to do a complete backup of your current database making a copy off the server where SeAT runs together with the <code>.env</code> file. Both of these are the only things required to rebuilt your instance in case of failure.</p> <p>Info</p> <p>Before starting the upgrade, pay check the plugins you may be using and ensure that they are compatible with SeAT 5. If you are unsure, join us on Discord so that we can assist or redirect you to the proper person.</p>"},{"location":"upgrading/from_seat_4_0/bare_metal/#requirements","title":"Requirements","text":"<ul> <li>Check [SeAT 5.0 requirements]</li> <li>A database backup is an absolute must. Everything in SeAT can be recovered in some way or form except for your database.</li> <li>Enough storage space to have SeAT 5, SeAT 4 and a backup of your SeAT 4 database.</li> <li>Ensure all your SeAT 4 packages are up-to-date (check this in Settings &gt; SeAT Settings)</li> </ul>"},{"location":"upgrading/from_seat_4_0/bare_metal/#upgrade-procedure","title":"Upgrade Procedure","text":""},{"location":"upgrading/from_seat_4_0/bare_metal/#preparation","title":"Preparation","text":"<p>If users are using your SeAT instance, or the workers are churning away in the background, then you may risk losing some information (although unlikely) - or cause crash during database conversion. Please start to turning SeAT in maintenance mode, cutting jobs and clearing caches before starting the upgrade.</p> <p>Turn workers down, use the command</p> <pre><code>systemctl stop supervisor.service\n</code></pre> <p>Put SeAT in maintenance mode</p> <pre><code>sudo -H -u www-data bash -c 'php /var/www/seat/artisan down'\n</code></pre> <p>Clear cache</p> <pre><code>sudo -H -u www-data bash -c 'php /var/www/seat/artisan seat:cache:clear'\n</code></pre>"},{"location":"upgrading/from_seat_4_0/bare_metal/#backups","title":"Backups","text":"<ul> <li>Make a backup of your SeAT database and store it somewhere safe! Do no skip this step!</li> <li>In your SeAT directory, make a copy of the <code>.env</code> file.   This file contains all your SeAT configuration, including the keys to the ESI tokens required to update your registered users content.   These values might be useful in case of failure.</li> </ul>"},{"location":"upgrading/from_seat_4_0/bare_metal/#installing-seat-50","title":"Installing SeAT 5.0","text":"<p>Rename the current SeAT directory from <code>/var/www/seat</code> to <code>/var/www/seat4</code>. You don't have to update any config since we will only use the command line for the process.</p> <pre><code>mv /var/www/seat /var/www/seat4\n</code></pre>"},{"location":"upgrading/from_seat_4_0/bare_metal/#php","title":"PHP","text":"<p>SeAT 5 needs PHP 8.2 on the server. The provided command bellow will help you in this task and add newly required PHP extensions in the meantime.</p> <pre><code>apt-get update\napt-get install libpng-dev libfreetype6-dev libjpeg-dev\napt-get install openssl zip php8.2-fpm php8.2-bz2 php8.2-cli php8.2-curl php8.2-dom php8.2-gd php8.2-gmp php8.2-intl php8.2-mbstring php8.2-mysql php8.2-opcache php8.2-redis php8.2-zip\n</code></pre> <p>Remember to update your NGinX configuration to use the new CGI version. To do so, open configuration file located at <code>/etc/nginx/sites-available/seat</code> and replace</p> <pre><code>fastcgi_pass unix:/run/php/php7.3-fpm.sock;\n</code></pre> <p>with</p> <pre><code>fastcgi_pass unix:/run/php/php8.2-fpm.sock;\n</code></pre> <p>Restart nginx to load the changes:</p> <pre><code>systemctl restart nginx.service\n</code></pre>"},{"location":"upgrading/from_seat_4_0/bare_metal/#seat","title":"SeAT","text":"<p>Once packages have been updated, we will deploy the new SeAT's version using composer.</p> <pre><code>composer create-project eveseat/seat /var/www/seat \"5.0\" --no-dev --no-interaction\n</code></pre> <p>Once the download is done, you should have seen output such as:</p> <pre><code>76 packages you are using are looking for funding.\nUse the `composer fund` command to find out more!\n&gt; @php artisan vendor:publish --tag=laravel-assets --ansi --force\n\nINFO  Publishing [laravel-assets] assets.  Copying directory [vendor/laravel/horizon/public] to [public/vendor/horizon]  DONE\n  Copying directory [vendor/opcodesio/log-viewer/public] to [public/vendor/log-viewer]  DONE\n\nNo security vulnerability advisories found.\n&gt; @php artisan key:generate --ansi\n\nINFO  Application key set successfully.  </code></pre> <p>Finally, fix directories permissions using the two commands bellow:</p> <pre><code>chown -R www-data:www-data /var/www/seat\nchmod -R guo+w /var/www/seat/storage/\n</code></pre>"},{"location":"upgrading/from_seat_4_0/bare_metal/#setup","title":"Setup","text":"<p>Now sources have been deployed, we have to update <code>.env</code> configuration file. Use information from backup located at <code>/var/www/seat4/.env</code> to update the newly generated file located at<code>/var/www/seat/.env</code>.</p> <p>Info</p> <p>In case you had third party packages installed, it's time to deploy them back. We invite you to report to their own documentation regarding any specific guideline.</p> <p>Warning</p> <p>Please pay special attention to APP_KEY, APP_URL, DB_HOST, DB_PORT, DB_DATABASE, DB_USERNAME, DB_PASSWORD, EVE_CLIENT_ID, EVE_CLIENT_SECRET and EVE_CALLBACK_URL parameters.</p>"},{"location":"upgrading/from_seat_4_0/bare_metal/#database","title":"Database","text":"<p>We will convert database to work with new SeAT version. To do so, we're using common commands disclosed bellow:</p> <pre><code>sudo -H -u www-data bash -c 'php /var/www/seat/artisan vendor:publish --force --all'\nsudo -H -u www-data bash -c 'php /var/www/seat/artisan migrate'\nsudo -H -u www-data bash -c 'php /var/www/seat/artisan db:seed --class=Seat\\\\Services\\\\Database\\\\Seeders\\\\PluginDatabaseSeeder'\nsudo -H -u www-data bash -c 'php /var/www/seat/artisan eve:update:sde --force'\n</code></pre>"},{"location":"upgrading/from_seat_4_0/bare_metal/#complete","title":"Complete","text":"<p>Finally, restore workers states and put SeAT online using initial commands in reverse order.</p> <p>Put SeAT online</p> <pre><code>sudo -H -u www-data bash -c 'php /var/www/seat/artisan up'\n</code></pre> <p>Turn workers up</p> <pre><code>systemctl start supervisor.service\n</code></pre>"},{"location":"upgrading/from_seat_4_0/docker/","title":"SeAT 4.x to 5.0 (Docker)","text":"<p>The upgrade path from SeAT 4.0 to SeAT 5.0 requires a tiny amount of manual work.</p> <p>Info</p> <p>Before starting the upgrade, pay check the plugins you may be using and ensure that they are compatible with SeAT 5.  A compatibility table can be found on the Community Packages page. If you are unsure, join us on Discord so that we can tru and assist or redirect you to proper person.</p> <p>Users of recursivetree/seat-info need to follow separate instructions after the migrating the core to seat 5.</p> <p>Warning</p> <p>Before you do anything, read and understand this entire upgrade guide.</p> <p>Those instructions are valid for Docker deployment only. Please refer to bare metal instructions for a non-docker installation.</p> <p>Remember to do make a complete backup of your current database making a copy off the server where SeAT runs together with the <code>.env</code> file. Both of these are the only things required to rebuilt your instance in case of failure.</p>"},{"location":"upgrading/from_seat_4_0/docker/#requirements","title":"Requirements","text":"<ul> <li>A database backup is an absolute must. Everything in SeAT can be recovered in some way or form except for your database.</li> <li>Enough storage space to have SeAT 4, SeAT 5 and a backup of your SeAT 4 database.</li> <li>Ensure all your SeAT 4 packages are up-to-date (check this in Settings &gt; SeAT Settings)</li> </ul>"},{"location":"upgrading/from_seat_4_0/docker/#docker-upgrade-procedure","title":"Docker Upgrade Procedure","text":"<p>If you are currently using a docker installation for SeAT 4, upgrading is easy as never before. You need to make a few changes to your docker stack configuration, restart the stack, and you're good to go.</p> <p>This guide is going to step through some quick preparation steps, then perform the upgrade and finally, check that everything worked out as expected. Let's dive in.</p>"},{"location":"upgrading/from_seat_4_0/docker/#tldr-upgrades","title":"tl;dr upgrades","text":"<p>We highly recommend that you read the details of this upgrade guide to get familiar with what has changed. But, if this is your nth upgrade, maybe you just want to get the summary of everything, so here it is:</p> <ul> <li>Make a backup of your database.</li> <li><code>cd</code> to your install dir (which is probably <code>/opt/seat-docker</code>) and bring the stack down with    <pre><code>docker compose down\n</code></pre></li> <li>Make a copy of your <code>.env</code> file using    <pre><code>cp .env .env.seat4.bak\n</code></pre></li> <li>Make a copy of your current compose file using    <pre><code>cp docker-compose.yml docker-compose.yml.seat4.bak\n</code></pre></li> <li>Download the new <code>docker-compose.yml</code> file with    <pre><code>curl -L https://raw.githubusercontent.com/eveseat/seat-docker/master/docker-compose.yml -o docker-compose.yml`\n</code></pre></li> <li>Download the new database override <code>docker-compose.mariadb.yml</code> file with    <pre><code>curl -L https://raw.githubusercontent.com/eveseat/seat-docker/master/docker-compose.mariadb.yml -o docker-compose.mariadb.yml\n</code></pre></li> <li>Download the new traefik override <code>docker-compose.traefik.yml</code> file with    <pre><code>curl -L https://raw.githubusercontent.com/eveseat/seat-docker/master/docker-compose.traefik.yml -o docker-compose.traefik.yml\n</code></pre></li> <li>Download the new proxy override <code>docker-compose.proxy.yml</code> file with    <pre><code>curl -L https://raw.githubusercontent.com/eveseat/seat-docker/master/docker-compose.proxy.yml -o docker-compose.proxy.yml\n</code></pre></li> <li>If you are using a custom stylesheet, open your <code>docker-compose.override.yml</code> file and replace the container name <code>seat-web</code> with <code>front</code>.</li> <li>Download the new <code>.env</code> file template using    <pre><code>curl -L https://raw.githubusercontent.com/eveseat/seat-docker/master/.env.example -o .env\n</code></pre></li> <li>Update the new <code>.env</code> file using your backup <code>.env.seat4.bak</code> </li> </ul> <p>The table bellow is provided as a variable mapping between SeAT 4.x and SeAT 5.x. You can use it as a reference.</p> SeAT 4.x SeAT 5.x <code>TRAEFIK_DOMAIN=seat.local</code> <code>SEAT_DOMAIN=seat.seat.local</code> <code>SEAT_SUBDOMAIN=seat</code> <code>SEAT_DOMAIN=seat.seat.local</code> <code>REDIS_HOST=redis</code> <code>REDIS_HOST=cache</code> <code>PROXY_BACKEND_HTTP_PORT=8080</code> <code>LOG_LEVEL=error</code> <p>Info</p> <p>With SeAT 5.x, there is non longer default database and proxy. You can mix services are your needs. However, we continue to provide a few default layout usable out of the box as an option.</p> Using TraefikUsing reverse proxy <p>In case you want to use Traefik front of SeAT ui container, you'll need to setup the following environment variable: <code>TRAEFIK_ACME_EMAIL</code>. You'll then use the following command to boot the stack <code>docker compose -f docker-compose.yml -f docker-compose.mariadb.yml -f docker-compose.traefik.yml up</code></p> <p>In case you want to use a custom reverse proxy front of SeAT ui container, you'll need to setup the new environment variable <code>PROXY_BACKEND_HTTP_PORT</code>. You'll then use the following command to boot the stack <code>docker compose -f docker-compose.yml -f docker-compose.mariadb.yml -f docker-compose.proxy.yml up</code></p> <p>Since we didn't startup the stack using daemon mode - the overall migration and process is run at front. This will allow you to detect any issue without having a container running in panic mode. When SeAT will be ready to serve your requests and have successfully been upgrade, you'll see the following output :</p> <pre><code>2023-06-02 09:49:33          ****////////////                                                   \n2023-06-02 09:49:33      ***                 ///                                                   \n2023-06-02 09:49:33   ***                      //                                                 \n2023-06-02 09:49:33   **     **  //   ///        //                                                \n2023-06-02 09:49:33  **      ***  ///             //      ////////@@@@@@@@@@@@@@@(/////@@@//////////\n2023-06-02 09:49:33            **/   ///   /////////     *///&amp;@@@@@@@&amp;/////#@@@@%//%///#@@@@@(///@ \n2023-06-02 09:49:33  **     *** //////// /                @///////@@///@@@///@@@///@@///@@@@@(///@ \n2023-06-02 09:49:33  **      ***   ///   //       //      @@@@@////@/////////@@//////////@@@@(///@ \n2023-06-02 09:49:33   **         ///  //   /     //      *////////@@@///////@@///@@@@@@///@@@(///@ \n2023-06-02 09:49:33    ***         //// ///    ///                                              \n2023-06-02 09:49:33       ***                ///                                              \n2023-06-02 09:49:33          ****////////////\n2023-06-02 09:49:33 \n2023-06-02 09:49:33 \n2023-06-02 09:49:33 SeAT is now ready to serve requests\n2023-06-02 09:49:33 \n2023-06-02 09:49:33 Open your browser and go to 'https://seat.domain.tld'\n2023-06-02 09:49:33 Run 'docker compose exec front php artisan seat:admin:login' to get a temporary link in order to sign-in as built-in admin user account (or use bellow one)\n2023-06-02 09:49:33 \n2023-06-02 09:49:33 SeAT Admin Login URL Generator\n2023-06-02 09:49:33 Checking if 'admin' is a super user\n2023-06-02 09:49:33 Generating authentication token\n2023-06-02 09:49:33 \n2023-06-02 09:49:33 Your authentication URL is valid for 60 seconds.\n2023-06-02 09:49:33 https://seat.domain.tld/auth/login/admin/aDvMAcd7GQPXFfhS3aIH9dh4opwcvASB\n2023-06-02 09:49:33 \n2023-06-02 09:49:33 \n2023-06-02 09:49:33 AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 172.19.0.4. Set the 'ServerName' directive globally to suppress this message\n2023-06-02 09:49:33 AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 172.19.0.4. Set the 'ServerName' directive globally to suppress this message\n2023-06-02 09:49:33 [Fri Jun 02 07:49:33.524019 2023] [mpm_prefork:notice] [pid 1] AH00163: Apache/2.4.56 (Debian) PHP/8.2.6 configured -- resuming normal operations\n2023-06-02 09:49:33 [Fri Jun 02 07:49:33.524084 2023] [core:notice] [pid 1] AH00094: Command line: 'apache2 -D FOREGROUND'\n</code></pre> <p>Try to authenticate yourself and verify everything is working well. If you don't find any issue, you can now restart the stack in daemon mode \ud83c\udf89.</p> <p>Use Ctrl+C in order to kill the stack and restart it in background:</p> Using TraefikUsing reverse proxy <pre><code>docker compose -f docker-compose.yml -f docker-compose.mariadb.yml -f docker-compose.traefik.yml up\n</code></pre> <pre><code>docker compose -f docker-compose.yml -f docker-compose.mariadb.yml -f docker-compose.proxy.yml up\n</code></pre>"},{"location":"upgrading/from_seat_4_0/docker/#docker-changes-since-seat-4","title":"Docker changes since SeAT 4","text":"<p>There have been a few minor changes to the <code>docker-compose.yml</code> file. Most notably, the containers have been renamed to disclose their purpose easier, we have moved from Dockerhub to GitHub Container Registry, and the stack now has a persistent storage volume.</p> <p>If you customized your docker stack deployment, it is recommended that you take a look at the new <code>docker-compose.yml</code> file yourselves to see what exactly changed. Last but not least, try to avoid tuning standard files as must as possible and use override syntax instead with a <code>docker-compose.override.yml</code> file (see official documentation).</p>"},{"location":"upgrading/from_seat_4_0/docker/#preperation","title":"Preperation","text":"<p>Before you upgrade, you need to backup.</p>"},{"location":"upgrading/from_seat_4_0/docker/#backup-your-database","title":"Backup your database","text":"<p>The single most important thing you need is a backup of your SeAT 4 database. Without a backup you will not be able to recover in case of a disaster. So, head on over to the docker db backup section and do that right now.</p>"},{"location":"upgrading/from_seat_4_0/docker/#backup-your-env-file","title":"Backup your env file","text":"<p>The <code>.env</code> file is the one that has your SeAT installations' configuration. It contains things like your SSO Client ID and Secret (aka: credentials). By default, SeAT docker installations live in <code>/opt/seat-docker</code> meaning your <code>.env</code> file will be at <code>/opt/seat-docker/.env</code>. Make a copy of this file and store it somewhere safe.</p>"},{"location":"upgrading/from_seat_4_0/docker/#stop-seat-4","title":"Stop SeAT 4","text":"<p>First, we need to stop the SeAT 4 stack. Assuming you have the default <code>/opt/seat-docker</code> location for your installation, cd to it first and then run:</p> <pre><code>docker compose down\n</code></pre> <p>The output should be similar to this:</p> <pre><code>root@seat:/opt/seat-docker# docker compose down\nStopping seat-web   ... done\nStopping seat-cron    ... done\nStopping seat-worker  ... done\nRemoving seat-traefik     ... done\nStopping seat-mariadb ... done\nStopping seat-redis   ... done\nRemoving seat-web   ... done\nRemoving seat-cron    ... done\nRemoving seat-worker  ... done\nRemoving seat-traefik     ... done\nRemoving seat-mariadb ... done\nRemoving seat-redis   ... done\nRemoving network seat-docker_seat-network\n</code></pre>"},{"location":"upgrading/from_seat_4_0/docker/#upgrading-to-seat-5","title":"Upgrading to SeAT 5","text":""},{"location":"upgrading/from_seat_4_0/docker/#get-the-new-docker-compose-files","title":"Get the new docker-compose files","text":"<p>Warning</p> <p>If you have made customisations to how you deployed SeAT with docker-compose, then you should probably not </p> <p>be replacing the compose file like we are about to do. Instead, have a look at the new one here and adapt.</p> <p>Next, we will download the new SeAT 5 docker-compose files. Do that with:</p> <pre><code>mv docker-compose.yml docker-compose.yml.seat4.bak\ncurl -L https://raw.githubusercontent.com/eveseat/seat-docker/master/docker-compose.yml -o docker-compose.yml\ncurl -L https://raw.githubusercontent.com/eveseat/seat-docker/master/docker-compose.mariadb.yml -o docker-compose.mariadb.yml\ncurl -L https://raw.githubusercontent.com/eveseat/seat-docker/master/docker-compose.traefik.yml -o docker-compose.traefik.yml\ncurl -L https://raw.githubusercontent.com/eveseat/seat-docker/master/docker-compose.proxy.yml -o docker-compose.proxy.yml\n</code></pre> <p>With this we have created a copy of the older docker-compose file (just in case), and downloaded the new one.</p>"},{"location":"upgrading/from_seat_4_0/docker/#updating-custom-styles","title":"Updating custom styles","text":"<p>If you've customized the appearance of seat using this guide, follow these additional steps. Otherwise, skip to the next section and update your <code>.env</code> file.</p> <p>Open your <code>docker-compose.override.yml</code> file using nano: <pre><code>nano docker-compose.override.yml\n</code></pre></p> <p>Go to the following line that says <code>seat-web</code>: <pre><code>    services:\nseat-web: # &lt;--- Here\nvolumes:\n</code></pre></p> <p>Update the line to say <code>front</code> instead of <code>seat-web</code>: <pre><code>    services:\nfront: # &lt;--- Here\nvolumes:\n</code></pre> It is important to keep the indentation as it is.</p> <p>Exit using Control-X and type <code>y</code> for yes when asked whether you want to save the changes.</p>"},{"location":"upgrading/from_seat_4_0/docker/#update-the-env-file","title":"Update the .env file","text":"<p>This is one of the more important steps. The database configuration needs to be updated.</p> <p>The easier is probably to download the new template and adapt variables according to your previous configuration as some of them have been removed, newest appeared and overall have been reordered.</p> <pre><code>mv .env .env.seat4.bak\ncurl -L https://raw.githubusercontent.com/eveseat/seat-docker/master/.env.example -o .env\n</code></pre> <p>You can refer at any time to the online version of <code>.env</code> file on GitHub The table bellow is provided as a variable mapping between SeAT 4.x and SeAT 5.x. You can use it as a reference.</p> SeAT 4.x SeAT 5.x <code>TRAEFIK_DOMAIN=seat.local</code> <code>SEAT_DOMAIN=seat.seat.local</code> <code>SEAT_SUBDOMAIN=seat</code> <code>SEAT_DOMAIN=seat.seat.local</code> <code>REDIS_HOST=redis</code> <code>REDIS_HOST=cache</code> <code>PROXY_BACKEND_HTTP_PORT=8080</code> <code>LOG_LEVEL=error</code>"},{"location":"upgrading/from_seat_4_0/docker/#bringing-seat-5-up","title":"Bringing SeAT 5 up","text":"<p>The only thing that is left to do is to start the stack up again. The first time we are going to start SeAT 5 we won't use the <code>-d</code> flag. This is just so that you can see what's happening during the upgrade procedure. So, start SeAT with:</p> Using TraefikUsing reverse proxy <p>In case you want to use Traefik front of SeAT ui container, you'll need to setup the following environment variable: <code>TRAEFIK_ACME_EMAIL</code>. You'll then use the following command to boot the stack <code>docker compose -f docker-compose.yml -f docker-compose.mariadb.yml -f docker-compose.traefik.yml up</code></p> <p>In case you want to use a custom reverse proxy front of SeAT ui container, you'll need to setup the new environment variable <code>PROXY_BACKEND_HTTP_PORT</code>. You'll then use the following command to boot the stack <code>docker compose -f docker-compose.yml -f docker-compose.mariadb.yml -f docker-compose.proxy.yml up</code></p> <p>You should first see some download progress bars downloading the new SeAT version.</p> <p>After a while, seat should start up similar to this:</p> <pre><code>...\n\nseat_local-front-1  | mysqld is alive\nseat_local-front-1  | PONG\nseat_local-front-1  | starting web service\nseat_local-front-1  | Processing plugins from SEAT_PLUGINS\nseat_local-front-1  | Loading composer repositories with package information\nseat_local-front-1  | Info from https://repo.packagist.org: #StandWithUkraine\nseat_local-front-1  | Updating dependencies\n...\n</code></pre> <p>Warning</p> <p>Do not interrupt SeAT during this phase. It will leave your database in a potentially corrupt state, meaning you are going to have to do some extra pluming to get a backup restored. Not a train smash, but not worth it.</p> <p>Eventually, when everything is done you should start seeing the following output:</p> <pre><code>seat_local-front-1  | AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 172.25.0.5. Set the 'ServerName' directive globally to suppress this message\nseat_local-front-1  | AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 172.25.0.5. Set the 'ServerName' directive globally to suppress this message\nseat_local-front-1  | [Sun May 21 21:10:46.869842 2023] [mpm_prefork:notice] [pid 1] AH00163: Apache/2.4.56 (Debian) PHP/8.1.19 configured -- resuming normal operations\nseat_local-front-1  | [Sun May 21 21:10:46.869944 2023] [core:notice] [pid 1] AH00094: Command line: 'apache2 -D FOREGROUND'\n</code></pre> <p>This is a good sign, and means everything is now ready!</p>"},{"location":"upgrading/from_seat_4_0/docker/#check-your-installation","title":"Check your installation","text":"<p>The first obvious step will be to check that you can access the web UI. If not, something is probably weird with the web server configuration and needs some tweaking.</p> <p>If everything seems to be working fine, you can hit ++crtl+c++ which will bring the stack down gracefully. This might take up to 30 seconds.</p> <pre><code>^CGracefully stopping... (press Ctrl+C again to force)\nStopping seat-docker_scheduler_1 ...\nStopping seat-docker_worker_1    ...\nStopping seat-docker_front_1     ...\nStopping seat-docker_traefik_1   ... done\nStopping seat-docker_cache_1     ...\n</code></pre> <p>Then, bring it back up with the <code>-d</code> flag.</p> Using TraefikUsing reverse proxy <p>In case you want to use Traefik front of SeAT ui container, you'll need to setup the following environment variable: <code>TRAEFIK_ACME_EMAIL</code>. You'll then use the following command to boot the stack <code>docker compose -f docker-compose.yml -f docker-compose.mariadb.yml -f docker-compose.traefik.yml up -d</code></p> <p>In case you want to use a custom reverse proxy front of SeAT ui container, you'll need to setup the new environment variable <code>PROXY_BACKEND_HTTP_PORT</code>. You'll then use the following command to boot the stack <code>docker compose -f docker-compose.yml -f docker-compose.mariadb.yml -f docker-compose.proxy.yml up -d</code></p> <p>Congrats, and welcome to SeAT 5!</p>"},{"location":"upgrading/from_seat_4_0/docker/#problems","title":"Problems","text":"<p>Should you have any issue with the installation, please contact us on Discord.</p>"},{"location":"user_guides/moons_reporter/","title":"Moons Reporter","text":""},{"location":"user_guides/moons_reporter/#moons-reporter","title":"Moons Reporter","text":"<p>Introduced in SeAT 4.0, a new tool is available to assist you in your moon management task by leveraging your intelligence desk. Like your old google/excel sheet, it will gather all your intel related to moon probing. It provides a centralized and convenient way to store reports and search through them.</p> <p>Of course, like other modules, you are able to restrict its usage using ACL by choosing who can view it and/or import reports.</p> <p></p>"},{"location":"user_guides/moons_reporter/#importing-reports","title":"Importing reports","text":"<p>Seeding an intelligence database is usually a really long task. The Moons Reporter simplifies the process as much as possible by accepting your raw moon report collected by the in-game moon probing interface.</p> <p>Here is the process which need to be follow in order to be able to import a new moon report :</p> <ul> <li>fire your probe in-game and wait for the report to land</li> <li>use the \"Copy to Clipboard\" button from your \"Moon Probe and Analysis\" window </li> <li>go on the Moons Report and hit the \"Import\" button located on top right (1)</li> <li>paste copied content in the opening modal and hit \"Post report\"</li> </ul> <p>That's all, SeAT will take care of your report and apply change accordingly.</p> <p>Tip</p> <p>You can paste multiple moon report in once - so, to gain time and save clicks, you will probably prefer to scans all moons in a system before importing them into SeAT.</p> <p>Info</p> <p>When importing a report targeting an already imported moon report, existing data will be erased and replaced by the new report.</p> <p>Caution</p> <p>In case you have to import data from an existing sheet, you will have to generate report based on your information. Please put an eye into migrate section from this documentation.</p>"},{"location":"user_guides/moons_reporter/#advanced-search","title":"Advanced Search","text":"<p>The Moons Reporter is shipped with an advanced search panel (2) which allow you to search moons by different criteria :</p> <ul> <li>region</li> <li>constellation</li> <li>system</li> <li>rank</li> <li>produces</li> </ul> <p>Region, Constellation and System filters will be driven together depending on what you're doing - making your search easier.</p> <p>You are able to provide multiple rank into the rank filter (like ubiquitous, common, uncommon, rare and exceptional). When you are using this filter, only moon which contain all criteria will be displayed. For example, if you are searching for a moon which contain common and uncommon materials, simply select both criteria.</p> <p>Like rank filter, the produces filter is allowing you to track for moons containing multiple materials. As an example, you can search for moons producing both Vanadium and Cobalt.</p> <p>To make a search, once you put your criteria, use the search button.</p>"},{"location":"user_guides/moons_reporter/#moon-information","title":"Moon Information","text":""},{"location":"user_guides/moons_reporter/#moon-metadata","title":"Moon Metadata","text":"<p>Main pane (3) is showing you the list of all probed moons. You'll get quick intel on them with indicator and sovereignty columns. However, in case you want more information regarding a moon, you can click on the eye button which will show you the moon card.</p> <p>Displayed sovereignty depends on public in-game collected intel regarding systems. Those data are updated once a day - after down-time.</p>"},{"location":"user_guides/moons_reporter/#moon-card","title":"Moon Card","text":"<p>You are able to access details regarding a moon, simple by clicking on the eye button, located in the action column. Moon card will give you some valuable information like contained raw materials, reprocessed materials and reactions candidates.</p> <p>The Moons Reporter is not only showing you types but also figures like volume, quantity and estimated value. All of them are computed based on a regular chunk of 20,000.00m3 - and upgraded to 30 days for convenience. The base reprocessing yield is 80% - however, you are able to determine which yield must be used into your user profile.</p>"},{"location":"user_guides/moons_reporter/#moon-stats","title":"Moon Stats","text":"<p>Some stats are provide in Moons Reporter footer (4). They are showing you the number of raw materials, per rank, from all your scanned moons. Those stats are list in the same order as the indicator column :</p> <ul> <li>Gaz or Ubiquitous asteroids</li> <li>R8 or Common asteroids</li> <li>R16 or Uncommon asteroids</li> <li>R32 or Rare asteroids</li> <li>R64 or Exceptional asteroids</li> <li>Ore (standard asteroids - like Scordite, Spodumain, etc...)</li> </ul>"},{"location":"user_guides/moons_reporter/#migrating","title":"Migrating","text":"<p>Moons Reporter can only accept reports using Eve Online raw format. As a result, you will probably not be able to import data from an existing sheet without process. Luckily, the used format is quite simple to recover from collected data. You will find bellow a sample :</p> <pre><code>Moon    Moon Product    Quantity    Ore TypeID  SolarSystemID   PlanetID    MoonID\n\nOP9L-F II - Moon 1\n    Glossy Scordite 0.300030559301  46687   30002173    40138526    40138527\n    Immaculate Jaspet   0.328855156898  46682   30002173    40138526    40138527\n    Pellucid Crokite    0.287893354893  46677   30002173    40138526    40138527\n    Sylvite 0.083220936358  45491   30002173    40138526    40138527\n</code></pre> <p>Keep the two first lines as it, it's the report header. You will then have same format for every moon you need to put inside the report :</p> <ul> <li>The full qualified moon name</li> <li>One line per moon compound - indented by a tabulation</li> </ul> <p>Moon compound line are built using :</p> <ul> <li>Type name</li> <li>Rate (number between 0 and 1, using <code>.</code> a decimal separator - without thousands separator)</li> <li>Type identifier (number without either decimal or thousands separator)</li> <li>Solar system identifier (number without either decimal or thousands separator)</li> <li>Planet identifier (number without either decimal or thousands separator)</li> <li>Moon identifier (number without either decimal or thousands separator)</li> </ul> <p>If you need either the type name or the type identifier, you can use the amazing work from Fuzzy Steve :</p> <ul> <li>Types information</li> <li>Celestial information</li> </ul> <p>Caution</p> <p>Take care of separators. Report is using tabulations between column and not simple spaces. Also, each line must end with an end line and a carriage return character (CRLF - or Windows carriage return format)</p>"}]}